{
  "last_update": "2025-01-04T15:52:59.402755+00:00",
  "candidates": [
    {
      "url": "https://api.github.com/repos/python/cpython/issues/128354",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/128354/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/128354/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/128354/events",
      "html_url": "https://github.com/python/cpython/issues/128354",
      "id": 2763493232,
      "node_id": "I_kwDOBN0Z8c6kt49w",
      "number": 128354,
      "title": "`LDFLAGS` and `LIBS` not used consistently in `configure`",
      "user": {
        "login": "zanieb",
        "id": 2586601,
        "node_id": "MDQ6VXNlcjI1ODY2MDE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2586601?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zanieb",
        "html_url": "https://github.com/zanieb",
        "followers_url": "https://api.github.com/users/zanieb/followers",
        "following_url": "https://api.github.com/users/zanieb/following{/other_user}",
        "gists_url": "https://api.github.com/users/zanieb/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zanieb/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zanieb/subscriptions",
        "organizations_url": "https://api.github.com/users/zanieb/orgs",
        "repos_url": "https://api.github.com/users/zanieb/repos",
        "events_url": "https://api.github.com/users/zanieb/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zanieb/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-12-30T17:22:36Z",
      "updated_at": "2025-01-04T00:30:39Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nFollowing up on #128322, I noticed that the same pattern of setting `LDFLAGS` instead of `LIBS` is used frequently. Additionally, there is not consistency in the ordering of the added libraries, e.g., `LIBS=\"$LIBS ...\"` vs `LIBS=\"... $LIBS\"`.\n\nFor cases where the linking order matters, I believe using `LDFLAGS` is incorrect and the existing `$LIBS` should always come first.\n\n### CPython versions tested on:\n\nCPython main branch\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-128359\n* gh-128465\n* gh-128466\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/128354/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/128354/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/128317",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/128317/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/128317/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/128317/events",
      "html_url": "https://github.com/python/cpython/issues/128317",
      "id": 2762004198,
      "node_id": "I_kwDOBN0Z8c6koNbm",
      "number": 128317,
      "title": "Highlight today in colour in calendar's CLI output",
      "user": {
        "login": "hugovk",
        "id": 1324225,
        "node_id": "MDQ6VXNlcjEzMjQyMjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1324225?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugovk",
        "html_url": "https://github.com/hugovk",
        "followers_url": "https://api.github.com/users/hugovk/followers",
        "following_url": "https://api.github.com/users/hugovk/following{/other_user}",
        "gists_url": "https://api.github.com/users/hugovk/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hugovk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hugovk/subscriptions",
        "organizations_url": "https://api.github.com/users/hugovk/orgs",
        "repos_url": "https://api.github.com/users/hugovk/repos",
        "events_url": "https://api.github.com/users/hugovk/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hugovk/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-12-28T22:32:15Z",
      "updated_at": "2025-01-03T17:22:41Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\nIn Python 3.13 we added colour output to the new REPL, tracebacks and doctest, and in 3.14 to unittest and `test.regrtest`, which can also be controlled with the `PYTHON_COLORS`, `NO_COLOR` and `FORCE_COLOR` environment variables:\n\n* https://docs.python.org/3.14/whatsnew/3.14.html#unittest\n* https://docs.python.org/3.14/using/cmdline.html#using-on-controlling-color\n\nOn macOS, the `cal` utility does something similar, but highlights today.\n\nThe calendar module has a CLI to print out a calendar to the terminal, but with no highlighting. Let's add it.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-128318\n* gh-128353\n* gh-128357\n* gh-128358\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "hugovk",
        "id": 1324225,
        "node_id": "MDQ6VXNlcjEzMjQyMjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1324225?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugovk",
        "html_url": "https://github.com/hugovk",
        "followers_url": "https://api.github.com/users/hugovk/followers",
        "following_url": "https://api.github.com/users/hugovk/following{/other_user}",
        "gists_url": "https://api.github.com/users/hugovk/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hugovk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hugovk/subscriptions",
        "organizations_url": "https://api.github.com/users/hugovk/orgs",
        "repos_url": "https://api.github.com/users/hugovk/repos",
        "events_url": "https://api.github.com/users/hugovk/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hugovk/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/128317/reactions",
        "total_count": 3,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 1,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/128317/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/128262",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/128262/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/128262/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/128262/events",
      "html_url": "https://github.com/python/cpython/issues/128262",
      "id": 2758856256,
      "node_id": "I_kwDOBN0Z8c6kcM5A",
      "number": 128262,
      "title": "Classes with __slots__ ought to be specialized when constructing instances",
      "user": {
        "login": "Fidget-Spinner",
        "id": 28750310,
        "node_id": "MDQ6VXNlcjI4NzUwMzEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fidget-Spinner",
        "html_url": "https://github.com/Fidget-Spinner",
        "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
        "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
        "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
        "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
        "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-12-25T15:11:14Z",
      "updated_at": "2024-12-26T10:57:26Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\nRight now simple classes have the `CALL_ALLOC_AND_ENTER_INIT` specialization when calling their constructor. This however, blocks classes with `__slots__`. I propose relaxing the requirement and allowing `__slots__` classes to benefit from this specialization as well.\n\n### Has this already been discussed elsewhere?\n\nThis is a minor feature, which does not need previous discussion elsewhere\n\n### Links to previous discussion of this feature:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-128263\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/128262/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/128262/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/128212",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/128212/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/128212/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/128212/events",
      "html_url": "https://github.com/python/cpython/issues/128212",
      "id": 2757195906,
      "node_id": "I_kwDOBN0Z8c6kV3iC",
      "number": 128212,
      "title": "Race between ` PyUnicode_SET_UTF8` and `_PyUnicode_CheckConsistency`",
      "user": {
        "login": "mpage",
        "id": 577841,
        "node_id": "MDQ6VXNlcjU3Nzg0MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/577841?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mpage",
        "html_url": "https://github.com/mpage",
        "followers_url": "https://api.github.com/users/mpage/followers",
        "following_url": "https://api.github.com/users/mpage/following{/other_user}",
        "gists_url": "https://api.github.com/users/mpage/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mpage/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mpage/subscriptions",
        "organizations_url": "https://api.github.com/users/mpage/orgs",
        "repos_url": "https://api.github.com/users/mpage/repos",
        "events_url": "https://api.github.com/users/mpage/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mpage/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2024-12-24T05:18:44Z",
      "updated_at": "2025-01-02T19:58:47Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nReproducible by running : \n\n1. `env CC=clang CXX=clang++ ./configure --disable-gil --with-thread-sanitizer --with-pydebug && make -j`\n2. `env TSAN_OPTIONS=suppressions=${PWD}/Tools/tsan/suppressions_free_threading.txt ./python -m test --tsan test_importlib --match test_multiprocessing_pool_circular_import -F`\n\n```\n==================\nWARNING: ThreadSanitizer: data race (pid=3454844)\n  Atomic write of size 8 at 0x7fd7be2285d0 by thread T1:\n    #0 _Py_atomic_store_ptr_release /home/mpage/local/cpython/./Include/cpython/pyatomic_gcc.h:565:3 (python+0x74072e) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #1 PyUnicode_SET_UTF8 /home/mpage/local/cpython/Objects/unicodeobject.c:133:5 (python+0x74072e)\n    #2 unicode_fill_utf8 /home/mpage/local/cpython/Objects/unicodeobject.c:5916:5 (python+0x74072e)\n    #3 unicode_ensure_utf8 /home/mpage/local/cpython/Objects/unicodeobject.c:4228:19 (python+0x74072e)\n    #4 PyUnicode_AsUTF8AndSize /home/mpage/local/cpython/Objects/unicodeobject.c:4246:9 (python+0x74072e)\n    #5 write_unicode_binary /home/mpage/local/cpython/./Modules/_pickle.c:2677:12 (_pickle.cpython-314td-x86_64-linux-gnu.so+0xa219) (BuildId: e2f310e804661a33ae374de41f9979004e07a1e7)\n    #6 save_unicode /home/mpage/local/cpython/./Modules/_pickle.c:2729:13 (_pickle.cpython-314td-x86_64-linux-gnu.so+0xa219)\n    #7 save /home/mpage/local/cpython/./Modules/_pickle.c:4392:16 (_pickle.cpython-314td-x86_64-linux-gnu.so+0x940a) (BuildId: e2f310e804661a33ae374de41f9979004e07a1e7)\n    #8 batch_dict_exact /home/mpage/local/cpython/./Modules/_pickle.c:3346:17 (_pickle.cpython-314td-x86_64-linux-gnu.so+0xb682) (BuildId: e2f310e804661a33ae374de41f9979004e07a1e7)\n    #9 save_dict /home/mpage/local/cpython/./Modules/_pickle.c:3408:22 (_pickle.cpython-314td-x86_64-linux-gnu.so+0xb682)\n    #10 save /home/mpage/local/cpython/./Modules/_pickle.c:4402:18 (_pickle.cpython-314td-x86_64-linux-gnu.so+0x9624) (BuildId: e2f310e804661a33ae374de41f9979004e07a1e7)\n    #11 dump /home/mpage/local/cpython/./Modules/_pickle.c:4602:9 (_pickle.cpython-314td-x86_64-linux-gnu.so+0x8068) (BuildId: e2f310e804661a33ae374de41f9979004e07a1e7)\n    #12 _pickle_Pickler_dump_impl /home/mpage/local/cpython/./Modules/_pickle.c:4676:9 (_pickle.cpython-314td-x86_64-linux-gnu.so+0x21a74) (BuildId: e2f310e804661a33ae374de41f9979004e07a1e7)\n    #13 _pickle_Pickler_dump /home/mpage/local/cpython/./Modules/clinic/_pickle.c.h:73:20 (_pickle.cpython-314td-x86_64-linux-gnu.so+0x21a74)\n    #14 cfunction_vectorcall_FASTCALL_KEYWORDS_METHOD /home/mpage/local/cpython/Objects/methodobject.c:468:24 (python+0x6924c6) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #15 _PyObject_VectorcallTstate /home/mpage/local/cpython/./Include/internal/pycore_call.h:167:11 (python+0x5d48f0) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #16 PyObject_Vectorcall /home/mpage/local/cpython/Objects/call.c:327:12 (python+0x5d62b0) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #17 _PyEval_EvalFrameDefault /home/mpage/local/cpython/Python/generated_cases.c.h:960:35 (python+0x8291e2) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #18 _PyEval_EvalFrame /home/mpage/local/cpython/./Include/internal/pycore_ceval.h:116:16 (python+0x8219b6) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #19 _PyEval_Vector /home/mpage/local/cpython/Python/ceval.c:1911:12 (python+0x8219b6)\n    #20 _PyFunction_Vectorcall /home/mpage/local/cpython/Objects/call.c (python+0x5d6799) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #21 _PyObject_VectorcallDictTstate /home/mpage/local/cpython/Objects/call.c:135:15 (python+0x5d4b88) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #22 _PyObject_Call_Prepend /home/mpage/local/cpython/Objects/call.c:504:24 (python+0x5d6bd2) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #23 slot_tp_init /home/mpage/local/cpython/Objects/typeobject.c:10233:15 (python+0x71d085) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #24 type_call /home/mpage/local/cpython/Objects/typeobject.c:2185:19 (python+0x6fd01c) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #25 _PyObject_MakeTpCall /home/mpage/local/cpython/Objects/call.c:242:18 (python+0x5d4fd1) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #26 _PyObject_VectorcallTstate /home/mpage/local/cpython/./Include/internal/pycore_call.h:165:16 (python+0x5d4918) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #27 PyObject_Vectorcall /home/mpage/local/cpython/Objects/call.c:327:12 (python+0x5d62b0) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #28 _PyEval_EvalFrameDefault /home/mpage/local/cpython/Python/generated_cases.c.h:960:35 (python+0x8291e2) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #29 _PyEval_EvalFrame /home/mpage/local/cpython/./Include/internal/pycore_ceval.h:116:16 (python+0x8219b6) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #30 _PyEval_Vector /home/mpage/local/cpython/Python/ceval.c:1911:12 (python+0x8219b6)\n    #31 _PyFunction_Vectorcall /home/mpage/local/cpython/Objects/call.c (python+0x5d6799) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #32 _PyObject_VectorcallDictTstate /home/mpage/local/cpython/Objects/call.c:146:15 (python+0x5d4b64) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #33 _PyObject_Call_Prepend /home/mpage/local/cpython/Objects/call.c:504:24 (python+0x5d6bd2) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #34 slot_tp_init /home/mpage/local/cpython/Objects/typeobject.c:10233:15 (python+0x71d085) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #35 type_call /home/mpage/local/cpython/Objects/typeobject.c:2185:19 (python+0x6fd01c) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #36 _PyObject_MakeTpCall /home/mpage/local/cpython/Objects/call.c:242:18 (python+0x5d4fd1) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #37 _PyObject_VectorcallTstate /home/mpage/local/cpython/./Include/internal/pycore_call.h:165:16 (python+0x5d4918) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #38 PyObject_Vectorcall /home/mpage/local/cpython/Objects/call.c:327:12 (python+0x5d62b0) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #39 _PyEval_EvalFrameDefault /home/mpage/local/cpython/Python/generated_cases.c.h:1993:35 (python+0x8310ad) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #40 _PyEval_EvalFrame /home/mpage/local/cpython/./Include/internal/pycore_ceval.h:116:16 (python+0x8219b6) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #41 _PyEval_Vector /home/mpage/local/cpython/Python/ceval.c:1911:12 (python+0x8219b6)\n    #42 _PyFunction_Vectorcall /home/mpage/local/cpython/Objects/call.c (python+0x5d6799) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #43 _PyObject_VectorcallTstate /home/mpage/local/cpython/./Include/internal/pycore_call.h:167:11 (python+0x5dc820) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #44 method_vectorcall /home/mpage/local/cpython/Objects/classobject.c:71:20 (python+0x5dae9d) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #45 _PyVectorcall_Call /home/mpage/local/cpython/Objects/call.c:273:16 (python+0x5d619d) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #46 _PyObject_Call /home/mpage/local/cpython/Objects/call.c:348:16 (python+0x5d6413) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #47 PyObject_Call /home/mpage/local/cpython/Objects/call.c:373:12 (python+0x5d65c7) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #48 thread_run /home/mpage/local/cpython/./Modules/_threadmodule.c:346:21 (python+0xa28898) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #49 pythread_wrapper /home/mpage/local/cpython/Python/thread_pthread.h:242:5 (python+0x96a4bb) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n\n  Previous read of size 8 at 0x7fd7be2285d0 by thread T18:\n    #0 _PyUnicode_CheckConsistency /home/mpage/local/cpython/Objects/unicodeobject.c:691:13 (python+0x72f906) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #1 PyUnicode_UTF8 /home/mpage/local/cpython/Objects/unicodeobject.c:122:5 (python+0x73018f) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #2 unicode_ensure_utf8 /home/mpage/local/cpython/Objects/unicodeobject.c:4225:9 (python+0x74036b) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #3 PyUnicode_AsUTF8AndSize /home/mpage/local/cpython/Objects/unicodeobject.c:4246:9 (python+0x74036b)\n    #4 write_unicode_binary /home/mpage/local/cpython/./Modules/_pickle.c:2677:12 (_pickle.cpython-314td-x86_64-linux-gnu.so+0xa219) (BuildId: e2f310e804661a33ae374de41f9979004e07a1e7)\n    #5 save_unicode /home/mpage/local/cpython/./Modules/_pickle.c:2729:13 (_pickle.cpython-314td-x86_64-linux-gnu.so+0xa219)\n    #6 save /home/mpage/local/cpython/./Modules/_pickle.c:4392:16 (_pickle.cpython-314td-x86_64-linux-gnu.so+0x940a) (BuildId: e2f310e804661a33ae374de41f9979004e07a1e7)\n    #7 batch_dict_exact /home/mpage/local/cpython/./Modules/_pickle.c:3346:17 (_pickle.cpython-314td-x86_64-linux-gnu.so+0xb682) (BuildId: e2f310e804661a33ae374de41f9979004e07a1e7)\n    #8 save_dict /home/mpage/local/cpython/./Modules/_pickle.c:3408:22 (_pickle.cpython-314td-x86_64-linux-gnu.so+0xb682)\n    #9 save /home/mpage/local/cpython/./Modules/_pickle.c:4402:18 (_pickle.cpython-314td-x86_64-linux-gnu.so+0x9624) (BuildId: e2f310e804661a33ae374de41f9979004e07a1e7)\n    #10 dump /home/mpage/local/cpython/./Modules/_pickle.c:4602:9 (_pickle.cpython-314td-x86_64-linux-gnu.so+0x8068) (BuildId: e2f310e804661a33ae374de41f9979004e07a1e7)\n    #11 _pickle_Pickler_dump_impl /home/mpage/local/cpython/./Modules/_pickle.c:4676:9 (_pickle.cpython-314td-x86_64-linux-gnu.so+0x21a74) (BuildId: e2f310e804661a33ae374de41f9979004e07a1e7)\n    #12 _pickle_Pickler_dump /home/mpage/local/cpython/./Modules/clinic/_pickle.c.h:73:20 (_pickle.cpython-314td-x86_64-linux-gnu.so+0x21a74)\n    #13 cfunction_vectorcall_FASTCALL_KEYWORDS_METHOD /home/mpage/local/cpython/Objects/methodobject.c:468:24 (python+0x6924c6) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #14 _PyObject_VectorcallTstate /home/mpage/local/cpython/./Include/internal/pycore_call.h:167:11 (python+0x5d48f0) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #15 PyObject_Vectorcall /home/mpage/local/cpython/Objects/call.c:327:12 (python+0x5d62b0) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #16 _PyEval_EvalFrameDefault /home/mpage/local/cpython/Python/generated_cases.c.h:960:35 (python+0x8291e2) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #17 _PyEval_EvalFrame /home/mpage/local/cpython/./Include/internal/pycore_ceval.h:116:16 (python+0x8219b6) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #18 _PyEval_Vector /home/mpage/local/cpython/Python/ceval.c:1911:12 (python+0x8219b6)\n    #19 _PyFunction_Vectorcall /home/mpage/local/cpython/Objects/call.c (python+0x5d6799) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #20 _PyObject_VectorcallDictTstate /home/mpage/local/cpython/Objects/call.c:135:15 (python+0x5d4b88) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #21 _PyObject_Call_Prepend /home/mpage/local/cpython/Objects/call.c:504:24 (python+0x5d6bd2) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #22 slot_tp_init /home/mpage/local/cpython/Objects/typeobject.c:10233:15 (python+0x71d085) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #23 type_call /home/mpage/local/cpython/Objects/typeobject.c:2185:19 (python+0x6fd01c) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #24 _PyObject_MakeTpCall /home/mpage/local/cpython/Objects/call.c:242:18 (python+0x5d4fd1) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #25 _PyObject_VectorcallTstate /home/mpage/local/cpython/./Include/internal/pycore_call.h:165:16 (python+0x5d4918) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #26 PyObject_Vectorcall /home/mpage/local/cpython/Objects/call.c:327:12 (python+0x5d62b0) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #27 _PyEval_EvalFrameDefault /home/mpage/local/cpython/Python/generated_cases.c.h:960:35 (python+0x8291e2) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #28 _PyEval_EvalFrame /home/mpage/local/cpython/./Include/internal/pycore_ceval.h:116:16 (python+0x8219b6) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #29 _PyEval_Vector /home/mpage/local/cpython/Python/ceval.c:1911:12 (python+0x8219b6)\n    #30 _PyFunction_Vectorcall /home/mpage/local/cpython/Objects/call.c (python+0x5d6799) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #31 _PyObject_VectorcallDictTstate /home/mpage/local/cpython/Objects/call.c:146:15 (python+0x5d4b64) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #32 _PyObject_Call_Prepend /home/mpage/local/cpython/Objects/call.c:504:24 (python+0x5d6bd2) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #33 slot_tp_init /home/mpage/local/cpython/Objects/typeobject.c:10233:15 (python+0x71d085) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #34 type_call /home/mpage/local/cpython/Objects/typeobject.c:2185:19 (python+0x6fd01c) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #35 _PyObject_MakeTpCall /home/mpage/local/cpython/Objects/call.c:242:18 (python+0x5d4fd1) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #36 _PyObject_VectorcallTstate /home/mpage/local/cpython/./Include/internal/pycore_call.h:165:16 (python+0x5d4918) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #37 PyObject_Vectorcall /home/mpage/local/cpython/Objects/call.c:327:12 (python+0x5d62b0) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #38 _PyEval_EvalFrameDefault /home/mpage/local/cpython/Python/generated_cases.c.h:1993:35 (python+0x8310ad) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #39 _PyEval_EvalFrame /home/mpage/local/cpython/./Include/internal/pycore_ceval.h:116:16 (python+0x8219b6) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #40 _PyEval_Vector /home/mpage/local/cpython/Python/ceval.c:1911:12 (python+0x8219b6)\n    #41 _PyFunction_Vectorcall /home/mpage/local/cpython/Objects/call.c (python+0x5d6799) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #42 _PyObject_VectorcallTstate /home/mpage/local/cpython/./Include/internal/pycore_call.h:167:11 (python+0x5dc820) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #43 method_vectorcall /home/mpage/local/cpython/Objects/classobject.c:71:20 (python+0x5dae9d) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #44 _PyVectorcall_Call /home/mpage/local/cpython/Objects/call.c:273:16 (python+0x5d619d) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #45 _PyObject_Call /home/mpage/local/cpython/Objects/call.c:348:16 (python+0x5d6413) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #46 PyObject_Call /home/mpage/local/cpython/Objects/call.c:373:12 (python+0x5d65c7) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #47 thread_run /home/mpage/local/cpython/./Modules/_threadmodule.c:346:21 (python+0xa28898) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #48 pythread_wrapper /home/mpage/local/cpython/Python/thread_pthread.h:242:5 (python+0x96a4bb) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n\n  Thread T1 'Thread-1 (t)' (tid=3454868, running) created by main thread at:\n    #0 pthread_create <null> (python+0x47a2df) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #1 do_start_joinable_thread /home/mpage/local/cpython/Python/thread_pthread.h:289:14 (python+0x96920b) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #2 PyThread_start_joinable_thread /home/mpage/local/cpython/Python/thread_pthread.h:313:9 (python+0x96904a) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #3 ThreadHandle_start /home/mpage/local/cpython/./Modules/_threadmodule.c:431:9 (python+0xa283d0) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #4 do_start_new_thread /home/mpage/local/cpython/./Modules/_threadmodule.c:1794:9 (python+0xa283d0)\n    #5 thread_PyThread_start_joinable_thread /home/mpage/local/cpython/./Modules/_threadmodule.c:1917:14 (python+0xa26a27) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #6 cfunction_call /home/mpage/local/cpython/Objects/methodobject.c:551:18 (python+0x693086) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #7 _PyObject_MakeTpCall /home/mpage/local/cpython/Objects/call.c:242:18 (python+0x5d4fd1) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #8 _PyObject_VectorcallTstate /home/mpage/local/cpython/./Include/internal/pycore_call.h:165:16 (python+0x5d4918) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #9 PyObject_Vectorcall /home/mpage/local/cpython/Objects/call.c:327:12 (python+0x5d62b0) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #10 _PyEval_EvalFrameDefault /home/mpage/local/cpython/Python/generated_cases.c.h:1993:35 (python+0x8310ad) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #11 _PyEval_EvalFrame /home/mpage/local/cpython/./Include/internal/pycore_ceval.h:116:16 (python+0x8219b6) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #12 _PyEval_Vector /home/mpage/local/cpython/Python/ceval.c:1911:12 (python+0x8219b6)\n    #13 PyEval_EvalCode /home/mpage/local/cpython/Python/ceval.c:658:21 (python+0x8212a6) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #14 run_eval_code_obj /home/mpage/local/cpython/Python/pythonrun.c:1338:9 (python+0x94517b) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #15 run_mod /home/mpage/local/cpython/Python/pythonrun.c:1423:19 (python+0x944cfe) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #16 pyrun_file /home/mpage/local/cpython/Python/pythonrun.c:1256:15 (python+0x93f898) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #17 _PyRun_SimpleFileObject /home/mpage/local/cpython/Python/pythonrun.c:491:13 (python+0x93f898)\n    #18 _PyRun_AnyFileObject /home/mpage/local/cpython/Python/pythonrun.c:78:15 (python+0x93f059) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #19 pymain_run_file_obj /home/mpage/local/cpython/Modules/main.c:410:15 (python+0x9865f6) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #20 pymain_run_file /home/mpage/local/cpython/Modules/main.c:429:15 (python+0x9865f6)\n    #21 pymain_run_python /home/mpage/local/cpython/Modules/main.c:697:21 (python+0x985569) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #22 Py_RunMain /home/mpage/local/cpython/Modules/main.c:776:5 (python+0x985569)\n    #23 pymain_main /home/mpage/local/cpython/Modules/main.c:806:12 (python+0x985a99) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #24 Py_BytesMain /home/mpage/local/cpython/Modules/main.c:830:12 (python+0x985b19) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #25 main /home/mpage/local/cpython/./Programs/python.c:15:12 (python+0x4f8250) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n\n  Thread T18 'Thread-18 (t)' (tid=3454886, running) created by main thread at:\n    #0 pthread_create <null> (python+0x47a2df) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #1 do_start_joinable_thread /home/mpage/local/cpython/Python/thread_pthread.h:289:14 (python+0x96920b) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #2 PyThread_start_joinable_thread /home/mpage/local/cpython/Python/thread_pthread.h:313:9 (python+0x96904a) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #3 ThreadHandle_start /home/mpage/local/cpython/./Modules/_threadmodule.c:431:9 (python+0xa283d0) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #4 do_start_new_thread /home/mpage/local/cpython/./Modules/_threadmodule.c:1794:9 (python+0xa283d0)\n    #5 thread_PyThread_start_joinable_thread /home/mpage/local/cpython/./Modules/_threadmodule.c:1917:14 (python+0xa26a27) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #6 cfunction_call /home/mpage/local/cpython/Objects/methodobject.c:551:18 (python+0x693086) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #7 _PyObject_MakeTpCall /home/mpage/local/cpython/Objects/call.c:242:18 (python+0x5d4fd1) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #8 _PyObject_VectorcallTstate /home/mpage/local/cpython/./Include/internal/pycore_call.h:165:16 (python+0x5d4918) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #9 PyObject_Vectorcall /home/mpage/local/cpython/Objects/call.c:327:12 (python+0x5d62b0) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #10 _PyEval_EvalFrameDefault /home/mpage/local/cpython/Python/generated_cases.c.h:2195:35 (python+0x832b51) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #11 _PyEval_EvalFrame /home/mpage/local/cpython/./Include/internal/pycore_ceval.h:116:16 (python+0x8219b6) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #12 _PyEval_Vector /home/mpage/local/cpython/Python/ceval.c:1911:12 (python+0x8219b6)\n    #13 PyEval_EvalCode /home/mpage/local/cpython/Python/ceval.c:658:21 (python+0x8212a6) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #14 run_eval_code_obj /home/mpage/local/cpython/Python/pythonrun.c:1338:9 (python+0x94517b) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #15 run_mod /home/mpage/local/cpython/Python/pythonrun.c:1423:19 (python+0x944cfe) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #16 pyrun_file /home/mpage/local/cpython/Python/pythonrun.c:1256:15 (python+0x93f898) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #17 _PyRun_SimpleFileObject /home/mpage/local/cpython/Python/pythonrun.c:491:13 (python+0x93f898)\n    #18 _PyRun_AnyFileObject /home/mpage/local/cpython/Python/pythonrun.c:78:15 (python+0x93f059) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #19 pymain_run_file_obj /home/mpage/local/cpython/Modules/main.c:410:15 (python+0x9865f6) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #20 pymain_run_file /home/mpage/local/cpython/Modules/main.c:429:15 (python+0x9865f6)\n    #21 pymain_run_python /home/mpage/local/cpython/Modules/main.c:697:21 (python+0x985569) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #22 Py_RunMain /home/mpage/local/cpython/Modules/main.c:776:5 (python+0x985569)\n    #23 pymain_main /home/mpage/local/cpython/Modules/main.c:806:12 (python+0x985a99) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #24 Py_BytesMain /home/mpage/local/cpython/Modules/main.c:830:12 (python+0x985b19) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n    #25 main /home/mpage/local/cpython/./Programs/python.c:15:12 (python+0x4f8250) (BuildId: 09e963041ced7dc45ee41bb522bc04b7063f3ff9)\n\nSUMMARY: ThreadSanitizer: data race /home/mpage/local/cpython/./Include/cpython/pyatomic_gcc.h:565:3 in _Py_atomic_store_ptr_release\n==================\nThreadSanitizer: reported 1 warnings\n```\n\n\n### CPython versions tested on:\n\nCPython main branch\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-128367\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/128212/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/128212/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/128100",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/128100/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/128100/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/128100/events",
      "html_url": "https://github.com/python/cpython/issues/128100",
      "id": 2750923435,
      "node_id": "I_kwDOBN0Z8c6j98Kr",
      "number": 128100,
      "title": "Race between _PyObject_GenericGetAttrWithDict and ensure_nonmanaged_dict under free-threading",
      "user": {
        "login": "hawkinsp",
        "id": 348932,
        "node_id": "MDQ6VXNlcjM0ODkzMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/348932?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hawkinsp",
        "html_url": "https://github.com/hawkinsp",
        "followers_url": "https://api.github.com/users/hawkinsp/followers",
        "following_url": "https://api.github.com/users/hawkinsp/following{/other_user}",
        "gists_url": "https://api.github.com/users/hawkinsp/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hawkinsp/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hawkinsp/subscriptions",
        "organizations_url": "https://api.github.com/users/hawkinsp/orgs",
        "repos_url": "https://api.github.com/users/hawkinsp/repos",
        "events_url": "https://api.github.com/users/hawkinsp/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hawkinsp/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-12-19T16:51:06Z",
      "updated_at": "2024-12-27T20:02:38Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nUnder Python 3.13.1t build with thread-sanitizer:\n```python\nimport concurrent.futures\nimport functools\nimport threading\n\nnum_threads = 100\n\n\ndef closure(b, o):\n  b.wait()\n  getattr(o, \"foo\", None)\n  o.foo = 42\n\nwith concurrent.futures.ThreadPoolExecutor(max_workers=num_threads) as executor:\n  for _ in range(100):\n    b = threading.Barrier(num_threads)\n    o = functools.partial(lambda x: x, 42)\n    for _ in range(num_threads):\n      executor.submit(functools.partial(closure, b, o))\n```\n\nGet (it may take a few runs):\n```\nWARNING: ThreadSanitizer: data race (pid=239136)\n  Read of size 8 at 0x7fa5e69e6a28 by thread T91:\n    #0 _PyObject_GenericGetAttrWithDict /usr/local/google/home/phawkins/p/cpython/Objects/object.c:1665:24 (python3.13+0x2960a5) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #1 PyObject_GetOptionalAttr /usr/local/google/home/phawkins/p/cpython/Objects/object.c:1266:19 (python3.13+0x2930c4) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #2 builtin_getattr /usr/local/google/home/phawkins/p/cpython/Python/bltinmodule.c:1200:13 (python3.13+0x3d8bf9) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #3 cfunction_vectorcall_FASTCALL /usr/local/google/home/phawkins/p/cpython/Objects/methodobject.c:425:24 (python3.13+0x289efb) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #4 _PyObject_VectorcallTstate /usr/local/google/home/phawkins/p/cpython/./Include/internal/pycore_call.h:168:11 (python3.13+0x1eafaa) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #5 PyObject_Vectorcall /usr/local/google/home/phawkins/p/cpython/Objects/call.c:327:12 (python3.13+0x1eafaa)\n    #6 _PyEval_EvalFrameDefault /usr/local/google/home/phawkins/p/cpython/Python/generated_cases.c.h:813:23 (python3.13+0x3e24fb) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #7 _PyEval_EvalFrame /usr/local/google/home/phawkins/p/cpython/./Include/internal/pycore_ceval.h:119:16 (python3.13+0x3de62a) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #8 _PyEval_Vector /usr/local/google/home/phawkins/p/cpython/Python/ceval.c:1811:12 (python3.13+0x3de62a)\n    #9 _PyFunction_Vectorcall /usr/local/google/home/phawkins/p/cpython/Objects/call.c (python3.13+0x1eb61f) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #10 _PyObject_VectorcallTstate /usr/local/google/home/phawkins/p/cpython/./Include/internal/pycore_call.h:168:11 (python3.13+0x571bb2) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #11 partial_vectorcall /usr/local/google/home/phawkins/p/cpython/./Modules/_functoolsmodule.c:252:16 (python3.13+0x571bb2)\n    #12 _PyVectorcall_Call /usr/local/google/home/phawkins/p/cpython/Objects/call.c:273:16 (python3.13+0x1eb293) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #13 _PyObject_Call /usr/local/google/home/phawkins/p/cpython/Objects/call.c:348:16 (python3.13+0x1eb293)\n    #14 PyObject_Call /usr/local/google/home/phawkins/p/cpython/Objects/call.c:373:12 (python3.13+0x1eb315) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #15 _PyEval_EvalFrameDefault /usr/local/google/home/phawkins/p/cpython/Python/generated_cases.c.h:1355:26 (python3.13+0x3e46e2) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #16 _PyEval_EvalFrame /usr/local/google/home/phawkins/p/cpython/./Include/internal/pycore_ceval.h:119:16 (python3.13+0x3de62a) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #17 _PyEval_Vector /usr/local/google/home/phawkins/p/cpython/Python/ceval.c:1811:12 (python3.13+0x3de62a)\n    #18 _PyFunction_Vectorcall /usr/local/google/home/phawkins/p/cpython/Objects/call.c (python3.13+0x1eb61f) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #19 _PyObject_VectorcallTstate /usr/local/google/home/phawkins/p/cpython/./Include/internal/pycore_call.h:168:11 (python3.13+0x1ef5ef) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #20 method_vectorcall /usr/local/google/home/phawkins/p/cpython/Objects/classobject.c:70:20 (python3.13+0x1ef5ef)\n    #21 _PyVectorcall_Call /usr/local/google/home/phawkins/p/cpython/Objects/call.c:273:16 (python3.13+0x1eb293) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #22 _PyObject_Call /usr/local/google/home/phawkins/p/cpython/Objects/call.c:348:16 (python3.13+0x1eb293)\n    #23 PyObject_Call /usr/local/google/home/phawkins/p/cpython/Objects/call.c:373:12 (python3.13+0x1eb315) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #24 thread_run /usr/local/google/home/phawkins/p/cpython/./Modules/_threadmodule.c:337:21 (python3.13+0x564292) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #25 pythread_wrapper /usr/local/google/home/phawkins/p/cpython/Python/thread_pthread.h:243:5 (python3.13+0x4bd637) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n\n  Previous atomic write of size 8 at 0x7fa5e69e6a28 by thread T18:\n    #0 _Py_atomic_store_ptr_release /usr/local/google/home/phawkins/p/cpython/./Include/cpython/pyatomic_gcc.h:501:3 (python3.13+0x272a17) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #1 ensure_nonmanaged_dict /usr/local/google/home/phawkins/p/cpython/Objects/dictobject.c:7275:9 (python3.13+0x272a17)\n    #2 _PyObjectDict_SetItem /usr/local/google/home/phawkins/p/cpython/Objects/dictobject.c:7311:12 (python3.13+0x272aee) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #3 _PyObject_GenericSetAttrWithDict /usr/local/google/home/phawkins/p/cpython/Objects/object.c:1791:19 (python3.13+0x297c8e) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #4 PyObject_GenericSetAttr /usr/local/google/home/phawkins/p/cpython/Objects/object.c:1819:12 (python3.13+0x298667) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #5 PyObject_SetAttr /usr/local/google/home/phawkins/p/cpython/Objects/object.c:1385:15 (python3.13+0x294f8a) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #6 _PyEval_EvalFrameDefault /usr/local/google/home/phawkins/p/cpython/Python/generated_cases.c.h:5488:27 (python3.13+0x3f3f6d) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #7 _PyEval_EvalFrame /usr/local/google/home/phawkins/p/cpython/./Include/internal/pycore_ceval.h:119:16 (python3.13+0x3de62a) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #8 _PyEval_Vector /usr/local/google/home/phawkins/p/cpython/Python/ceval.c:1811:12 (python3.13+0x3de62a)\n    #9 _PyFunction_Vectorcall /usr/local/google/home/phawkins/p/cpython/Objects/call.c (python3.13+0x1eb61f) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #10 _PyObject_VectorcallTstate /usr/local/google/home/phawkins/p/cpython/./Include/internal/pycore_call.h:168:11 (python3.13+0x571bb2) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #11 partial_vectorcall /usr/local/google/home/phawkins/p/cpython/./Modules/_functoolsmodule.c:252:16 (python3.13+0x571bb2)\n    #12 _PyVectorcall_Call /usr/local/google/home/phawkins/p/cpython/Objects/call.c:273:16 (python3.13+0x1eb293) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #13 _PyObject_Call /usr/local/google/home/phawkins/p/cpython/Objects/call.c:348:16 (python3.13+0x1eb293)\n    #14 PyObject_Call /usr/local/google/home/phawkins/p/cpython/Objects/call.c:373:12 (python3.13+0x1eb315) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #15 _PyEval_EvalFrameDefault /usr/local/google/home/phawkins/p/cpython/Python/generated_cases.c.h:1355:26 (python3.13+0x3e46e2) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #16 _PyEval_EvalFrame /usr/local/google/home/phawkins/p/cpython/./Include/internal/pycore_ceval.h:119:16 (python3.13+0x3de62a) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #17 _PyEval_Vector /usr/local/google/home/phawkins/p/cpython/Python/ceval.c:1811:12 (python3.13+0x3de62a)\n    #18 _PyFunction_Vectorcall /usr/local/google/home/phawkins/p/cpython/Objects/call.c (python3.13+0x1eb61f) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #19 _PyObject_VectorcallTstate /usr/local/google/home/phawkins/p/cpython/./Include/internal/pycore_call.h:168:11 (python3.13+0x1ef5ef) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #20 method_vectorcall /usr/local/google/home/phawkins/p/cpython/Objects/classobject.c:70:20 (python3.13+0x1ef5ef)\n    #21 _PyVectorcall_Call /usr/local/google/home/phawkins/p/cpython/Objects/call.c:273:16 (python3.13+0x1eb293) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #22 _PyObject_Call /usr/local/google/home/phawkins/p/cpython/Objects/call.c:348:16 (python3.13+0x1eb293)\n    #23 PyObject_Call /usr/local/google/home/phawkins/p/cpython/Objects/call.c:373:12 (python3.13+0x1eb315) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #24 thread_run /usr/local/google/home/phawkins/p/cpython/./Modules/_threadmodule.c:337:21 (python3.13+0x564292) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n    #25 pythread_wrapper /usr/local/google/home/phawkins/p/cpython/Python/thread_pthread.h:243:5 (python3.13+0x4bd637) (BuildId: 9c1c16fb1bb8a435fa6fa4c6944da5d41f654e96)\n```\n\n\n### CPython versions tested on:\n\n3.13\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-128297\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/128100/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/128100/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/127681",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/127681/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/127681/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/127681/events",
      "html_url": "https://github.com/python/cpython/issues/127681",
      "id": 2722796496,
      "node_id": "I_kwDOBN0Z8c6iSpPQ",
      "number": 127681,
      "title": "Add overflow checks before calling memory allocators",
      "user": {
        "login": "picnixz",
        "id": 10796600,
        "node_id": "MDQ6VXNlcjEwNzk2NjAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/picnixz",
        "html_url": "https://github.com/picnixz",
        "followers_url": "https://api.github.com/users/picnixz/followers",
        "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
        "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
        "organizations_url": "https://api.github.com/users/picnixz/orgs",
        "repos_url": "https://api.github.com/users/picnixz/repos",
        "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/picnixz/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018672955,
          "node_id": "LA_kwDOBN0Z8c7viBU7",
          "url": "https://api.github.com/repos/python/cpython/labels/extension-modules",
          "name": "extension-modules",
          "color": "09fc59",
          "default": false,
          "description": "C modules in the Modules dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "picnixz",
        "id": 10796600,
        "node_id": "MDQ6VXNlcjEwNzk2NjAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/picnixz",
        "html_url": "https://github.com/picnixz",
        "followers_url": "https://api.github.com/users/picnixz/followers",
        "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
        "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
        "organizations_url": "https://api.github.com/users/picnixz/orgs",
        "repos_url": "https://api.github.com/users/picnixz/repos",
        "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/picnixz/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "picnixz",
          "id": 10796600,
          "node_id": "MDQ6VXNlcjEwNzk2NjAw",
          "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/picnixz",
          "html_url": "https://github.com/picnixz",
          "followers_url": "https://api.github.com/users/picnixz/followers",
          "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
          "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
          "organizations_url": "https://api.github.com/users/picnixz/orgs",
          "repos_url": "https://api.github.com/users/picnixz/repos",
          "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
          "received_events_url": "https://api.github.com/users/picnixz/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-12-06T11:29:12Z",
      "updated_at": "2024-12-06T16:52:07Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\nFrom https://github.com/capi-workgroup/decisions/issues/50#issuecomment-2522706899 and https://github.com/capi-workgroup/decisions/issues/50#issuecomment-2514640058.\r\n\r\nSome calls to the `PyMem_*` API uses an arithmetic operation on the size, which could make the requested length overflow. The checks in the corresponding functions would not be relevant since the inputs already overflowed.\r\n\r\n### CPython versions tested on:\r\n\r\nCPython main branch\r\n\r\n### Operating systems tested on:\r\n\r\n_No response_\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/127681/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/127681/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/127586",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/127586/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/127586/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/127586/events",
      "html_url": "https://github.com/python/cpython/issues/127586",
      "id": 2716327591,
      "node_id": "I_kwDOBN0Z8c6h596n",
      "number": 127586,
      "title": "`multiprocessing.Pool` does not properly restore blocked signals",
      "user": {
        "login": "stephen-hansen",
        "id": 17223626,
        "node_id": "MDQ6VXNlcjE3MjIzNjI2",
        "avatar_url": "https://avatars.githubusercontent.com/u/17223626?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stephen-hansen",
        "html_url": "https://github.com/stephen-hansen",
        "followers_url": "https://api.github.com/users/stephen-hansen/followers",
        "following_url": "https://api.github.com/users/stephen-hansen/following{/other_user}",
        "gists_url": "https://api.github.com/users/stephen-hansen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/stephen-hansen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/stephen-hansen/subscriptions",
        "organizations_url": "https://api.github.com/users/stephen-hansen/orgs",
        "repos_url": "https://api.github.com/users/stephen-hansen/repos",
        "events_url": "https://api.github.com/users/stephen-hansen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/stephen-hansen/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4204725259,
          "node_id": "LA_kwDOBN0Z8c76nwQL",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-multiprocessing",
          "name": "topic-multiprocessing",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-12-04T01:13:07Z",
      "updated_at": "2024-12-27T22:09:23Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nWhen instantiating a `multiprocessing.Pool`, for start methods \"spawn\" and \"forkserver\", the resource tracker must register a signal mask in the parent process to block some signals prior to creating the spawned childs, as explained by the comment below:\n\nhttps://github.com/python/cpython/blob/bfb0788bfcaab7474c1be0605552744e15082ee9/Lib/multiprocessing/resource_tracker.py#L152-L164\n\nThe comment makes sense, however the way in which the mask is unregistered seems like a bug, because it can have unintended effects on the parent process.\n\n```python\nimport signal\nfrom multiprocessing import Pool, set_start_method\n\ndef get_blocked_signals():\n    return signal.pthread_sigmask(signal.SIG_BLOCK, {})\n\nif __name__ == \"__main__\":\n    set_start_method(\"spawn\")\n    signal.pthread_sigmask(signal.SIG_BLOCK, {signal.SIGTERM})\n    print(f\"I am blocking {get_blocked_signals()}\")\n    my_pool = Pool(5)\n    print(f\"After creating Pool, now I am blocking {get_blocked_signals()}\")\n```\n\nRunning this code on the latest commit here, the output is as follows:\n\n```\nI am blocking {<Signals.SIGTERM: 15>}\nAfter creating Pool, now I am blocking set()\n```\n\nThis does not match what I would expect to see, I would have expected the set of blocked signals to remain unchanged after the call to construct the Pool. As far as I know I don't think Pool is supposed to have side effects on the signal handling of the main process.\n\nIt appears that in the resource tracker, after spawning the child process, the tracker unblocks the ignored signals rather than restore to the previous sigmask. This works fine for most use cases but has the unintended side effect of unblocking any of the ignored signals that were already blocked prior (as shown in the example above).\n\nThis seems relatively trivial to fix so I should have a PR up shortly.\n\nOne important thing to note here is with the fix, child processes created by spawn or forkserver will now inherit blocked signals such as SIGTERM, if they are blocked in the parent process. This is already the preexisting behavior for signals that weren't ignored by the resource manager, such as SIGUSR1. Calling methods like terminate(), or garbage collecting the Pool, will hang due to the child processes blocking SIGTERM. In this case Pool cleanup should be handled in the parent using close() followed by join(), or when the Pool is created an initializer is provided in the constructor to unblock SIGTERM in the child. To me this feels more in line with expected behavior.\n\nIt might be worthwhile to either adjust Pool.terminate() to call kill() (i.e. SIGKILL) instead on the workers or, to avoid breaking compatibility, provide an implementation of kill() in Pool to match parity with Process, but I'll leave that up for discussion for now.\n\nPlease let me know if anything here seems inaccurate or if there are any questions.\n\n\n### CPython versions tested on:\n\n3.9, 3.10, 3.11, 3.12, 3.13, CPython main branch\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-127587\n* gh-127973\n* gh-127983\n* gh-128011\n* gh-128298\n* gh-128299\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "gpshead",
        "id": 68491,
        "node_id": "MDQ6VXNlcjY4NDkx",
        "avatar_url": "https://avatars.githubusercontent.com/u/68491?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gpshead",
        "html_url": "https://github.com/gpshead",
        "followers_url": "https://api.github.com/users/gpshead/followers",
        "following_url": "https://api.github.com/users/gpshead/following{/other_user}",
        "gists_url": "https://api.github.com/users/gpshead/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gpshead/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gpshead/subscriptions",
        "organizations_url": "https://api.github.com/users/gpshead/orgs",
        "repos_url": "https://api.github.com/users/gpshead/repos",
        "events_url": "https://api.github.com/users/gpshead/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gpshead/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/127586/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/127586/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/127456",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/127456/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/127456/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/127456/events",
      "html_url": "https://github.com/python/cpython/issues/127456",
      "id": 2707829355,
      "node_id": "I_kwDOBN0Z8c6hZjJr",
      "number": 127456,
      "title": "pathlib ABCs: add protocols for supporting types",
      "user": {
        "login": "barneygale",
        "id": 960340,
        "node_id": "MDQ6VXNlcjk2MDM0MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/barneygale",
        "html_url": "https://github.com/barneygale",
        "followers_url": "https://api.github.com/users/barneygale/followers",
        "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
        "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
        "organizations_url": "https://api.github.com/users/barneygale/orgs",
        "repos_url": "https://api.github.com/users/barneygale/repos",
        "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
        "received_events_url": "https://api.github.com/users/barneygale/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4255101819,
          "node_id": "LA_kwDOBN0Z8c79n7N7",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-pathlib",
          "name": "topic-pathlib",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2024-11-30T18:51:58Z",
      "updated_at": "2024-12-07T21:03:45Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\nFor typing and documentation purposes, it would be useful to define three protocols in pathlib:\r\n\r\n- `Parser`: like `os.path`, but including only pure functionality that's essential for `PurePathBase`\r\n  - This [already exists](https://github.com/python/cpython/blob/328187cc4fcdd578db42cf6a16c197c3382157a7/Lib/pathlib/_abc.py#L38-L87), but it's defined and used in an odd way.\r\n- `DirEntry`: like `os.DirEntry`, but without some non-portable methods (like `inode()`)\r\n- `StatResult`: like `os.stat_result`, but without the tuple-like interface, and dropping non-essential attributes\r\n\r\nThese could be defined in a private module like `pathlib._types`. For performance reasons that module shouldn't be imported by any other pathlib module.\r\n\r\nIf/when we make `PathBase` public, we'll also make these protocols public.\r\n\r\nSee also: https://discuss.python.org/t/make-pathlib-extensible/3428/196\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-127494\r\n* gh-127725\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/127456/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/127456/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/127421",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/127421/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/127421/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/127421/events",
      "html_url": "https://github.com/python/cpython/issues/127421",
      "id": 2705551816,
      "node_id": "I_kwDOBN0Z8c6hQ3HI",
      "number": 127421,
      "title": "`test_start_new_thread_failed` flaky: failed on macOS (free threading)",
      "user": {
        "login": "colesbury",
        "id": 655866,
        "node_id": "MDQ6VXNlcjY1NTg2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/colesbury",
        "html_url": "https://github.com/colesbury",
        "followers_url": "https://api.github.com/users/colesbury/followers",
        "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
        "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
        "organizations_url": "https://api.github.com/users/colesbury/orgs",
        "repos_url": "https://api.github.com/users/colesbury/repos",
        "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
        "received_events_url": "https://api.github.com/users/colesbury/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-11-29T16:06:58Z",
      "updated_at": "2024-12-03T17:51:20Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\nSeen in https://github.com/python/cpython/actions/runs/12082953758/job/33695120037?pr=127399\n\n```\n======================================================================\nFAIL: test_start_new_thread_failed (test.test_threading.ThreadTests.test_start_new_thread_failed)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/Users/admin/actions-runner/_work/cpython/cpython/Lib/test/test_threading.py\", line 1201, in test_start_new_thread_failed\n    _, out, err = assert_python_ok(\"-u\", \"-c\", code)\n                  ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"/Users/admin/actions-runner/_work/cpython/cpython/Lib/test/support/script_helper.py\", line 182, in assert_python_ok\n    return _assert_python(True, *args, **env_vars)\n  File \"/Users/admin/actions-runner/_work/cpython/cpython/Lib/test/support/script_helper.py\", line 167, in _assert_python\n    res.fail(cmd_line)\n    ~~~~~~~~^^^^^^^^^^\n  File \"/Users/admin/actions-runner/_work/cpython/cpython/Lib/test/support/script_helper.py\", line 80, in fail\n    raise AssertionError(f\"Process return code is {exitcode}\\n\"\n    ...<10 lines>...\n                         f\"---\")\nAssertionError: Process return code is -6 (SIGABRT)\ncommand line: ['/Users/admin/actions-runner/_work/cpython/cpython/python.exe', '-X', 'faulthandler', '-I', '-u', '-c', 'if 1:\\n            import resource\\n            import _thread\\n\\n            def f():\\n                print(\"shouldn\\'t be printed\")\\n\\n            limits = resource.getrlimit(resource.RLIMIT_NPROC)\\n            [_, hard] = limits\\n            resource.setrlimit(resource.RLIMIT_NPROC, (0, hard))\\n\\n            try:\\n                _thread.start_new_thread(f, ())\\n            except RuntimeError:\\n                print(\\'ok\\')\\n            else:\\n                print(\\'!skip!\\')\\n        ']\n```\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-127549\n* gh-127574\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/127421/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/127421/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/127274",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/127274/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/127274/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/127274/events",
      "html_url": "https://github.com/python/cpython/issues/127274",
      "id": 2692565396,
      "node_id": "I_kwDOBN0Z8c6gfUmU",
      "number": 127274,
      "title": "Defer functions defined in nested classes in free-threaded builds",
      "user": {
        "login": "mpage",
        "id": 577841,
        "node_id": "MDQ6VXNlcjU3Nzg0MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/577841?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mpage",
        "html_url": "https://github.com/mpage",
        "followers_url": "https://api.github.com/users/mpage/followers",
        "following_url": "https://api.github.com/users/mpage/following{/other_user}",
        "gists_url": "https://api.github.com/users/mpage/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mpage/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mpage/subscriptions",
        "organizations_url": "https://api.github.com/users/mpage/orgs",
        "repos_url": "https://api.github.com/users/mpage/repos",
        "events_url": "https://api.github.com/users/mpage/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mpage/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-11-25T23:21:07Z",
      "updated_at": "2024-12-17T01:03:35Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\nWe currently only defer functions that do not have the `CO_NESTED` flag set:\n\nhttps://github.com/python/cpython/blob/26ff32b30553e1f7b0cc822835ad2da8890c180c/Objects/funcobject.c#L213-L218\n\nThis also excludes functions defined on nested classes. In the example below, the `Foo.__init__` function will not use deferred reference counting because the `__init__` method's code object has the `CO_NESTED` flag set.\n\n```py\ndef func():\n    class Foo:\n        def __init__(self):\n            pass\n```\n\nWe would like to relax the restriction on `CO_NESTED` to allow functions that are defined on nested classes to use deferred reference counting.\n\n### Has this already been discussed elsewhere?\n\nThis is a minor feature, which does not need previous discussion elsewhere\n\n### Links to previous discussion of this feature:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-128012\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/127274/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/127274/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/127213",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/127213/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/127213/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/127213/events",
      "html_url": "https://github.com/python/cpython/issues/127213",
      "id": 2687168356,
      "node_id": "I_kwDOBN0Z8c6gKu9k",
      "number": 127213,
      "title": "multiprocessing.Process() with method fork() works not the same with os.fork() on unloading of .so files",
      "user": {
        "login": "Yi-sir",
        "id": 43091670,
        "node_id": "MDQ6VXNlcjQzMDkxNjcw",
        "avatar_url": "https://avatars.githubusercontent.com/u/43091670?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Yi-sir",
        "html_url": "https://github.com/Yi-sir",
        "followers_url": "https://api.github.com/users/Yi-sir/followers",
        "following_url": "https://api.github.com/users/Yi-sir/following{/other_user}",
        "gists_url": "https://api.github.com/users/Yi-sir/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Yi-sir/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Yi-sir/subscriptions",
        "organizations_url": "https://api.github.com/users/Yi-sir/orgs",
        "repos_url": "https://api.github.com/users/Yi-sir/repos",
        "events_url": "https://api.github.com/users/Yi-sir/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Yi-sir/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4204725259,
          "node_id": "LA_kwDOBN0Z8c76nwQL",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-multiprocessing",
          "name": "topic-multiprocessing",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 7,
      "created_at": "2024-11-24T05:41:41Z",
      "updated_at": "2024-11-27T01:39:56Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nI have a c/cpp file and compile it with pybind to get a so named xyz_test.cpython-311-x86_64-linux-gnu.so so that I can import it(xyz_test) and call a method named xyz_test.call() in Python code .\n\nI use it with multiprocessing.Process() or os.fork(), but the unload process of this so is different:\n\n    with multiprocessing.setset_start_method('fork') and multiprocessing.Process(), this so is only unloaded while the parent process is terminated.\n    with os.fork(), this so is unloaded both while the child process and the parent process are terminated.\n\nThe behavior with os.fork() is the same with what I test on C code with C fork(), so is the behavior a bug with multiprocessing.Process() ?\n\nThank you! \n\n```python\n# main_os_fork.py\nimport xyz_test\nimport os\nimport time\n\ndef func():\n    pid = os.getpid()\n    print(f'=== pid = {pid}, this is python func')\n    xyz_test.callTLS()\n\n\nif __name__ == '__main__':\n    pid = os.getpid()\n    print(f'=== pid = {pid}, this is python main')\n    xyz_test.callTLS()\n    fork_pid = os.fork()\n    if fork_pid == 0:\n        func()\n    else:\n        time.sleep(1)\n```\n\n```python\n# main_mp_fork.py\nimport xyz_test\nimport multiprocessing\nimport os\nimport time\n\ndef func():\n    pid = os.getpid()\n    print(f'=== pid = {pid}, this is python func')\n    xyz_test.callTLS()\n    time.sleep(10*60)\n\n\nif __name__ == '__main__':\n    pid = os.getpid()\n    print(f'=== pid = {pid}, this is python main')\n    xyz_test.callTLS()\n    multiprocessing.set_start_method('fork')\n    child = multiprocessing.Process(target=func)\n    \n    child.start()\n    child.join()\n```\n```c++\n# xyz_test.h\n#ifndef SHARED_OBJ_H_\n#define SHARED_OBJ_H_\n\n\n#define PID_LOG(STR) \\\nauto pid = getpid(); \\\nprintf(\"=== pid is %d, %s\\n\", pid, STR);\n\n#define PRINT_ADDR() \\\nprintf(\"\\t now addr is %p\\n\", this);\n\nvoid callTLS();\n\nclass A {\npublic:\n    A();\n    ~A();\n    void call();\nprivate:\n    int a = 0;\n};\n\n#endif\n\n# xyz_test.cc\n#include \"shared_obj.h\"\n#include <stdio.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <unistd.h>\n#include <thread>\n#include <iostream>\n\nstatic thread_local A test;\n\nvoid __attribute__((constructor)) init() {\n    PID_LOG(\"so is loaded.\");\n}\n\nvoid __attribute__((destructor)) fini() {\n    PID_LOG(\"so is unloaded.\");\n}\n\nA::A() {\n    PID_LOG(\"this is A::A().\");\n    PRINT_ADDR();\n}\n\nA::~A() {\n    PID_LOG(\"this is A::~A().\");\n    PRINT_ADDR();\n}\n\nvoid A::call() {\n    PID_LOG(\"this is A::call().\")\n    PRINT_ADDR();\n}\n\nvoid callTLS() {\n    test.call();\n}\n```\n\n### CPython versions tested on:\n\n3.11\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-127246\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/127213/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/127213/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/127178",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/127178/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/127178/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/127178/events",
      "html_url": "https://github.com/python/cpython/issues/127178",
      "id": 2684892218,
      "node_id": "I_kwDOBN0Z8c6gCDQ6",
      "number": 127178,
      "title": "Convert `_sysconfigdata` to a JSON file",
      "user": {
        "login": "FFY00",
        "id": 11718923,
        "node_id": "MDQ6VXNlcjExNzE4OTIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/11718923?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/FFY00",
        "html_url": "https://github.com/FFY00",
        "followers_url": "https://api.github.com/users/FFY00/followers",
        "following_url": "https://api.github.com/users/FFY00/following{/other_user}",
        "gists_url": "https://api.github.com/users/FFY00/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/FFY00/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/FFY00/subscriptions",
        "organizations_url": "https://api.github.com/users/FFY00/orgs",
        "repos_url": "https://api.github.com/users/FFY00/repos",
        "events_url": "https://api.github.com/users/FFY00/events{/privacy}",
        "received_events_url": "https://api.github.com/users/FFY00/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 5178737896,
          "node_id": "LA_kwDOBN0Z8c8AAAABNK1E6A",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-sysconfig",
          "name": "topic-sysconfig",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 7,
      "created_at": "2024-11-22T23:10:18Z",
      "updated_at": "2024-11-29T22:56:00Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\nCurrently, as part of the `sysconfig` internals, we generate a `_sysconfigdata` Python module containing the variables for `sysconfig.get_config_vars()`. This data is consists of all Makefile variables, which can be encoded as JSON data.\n\nThe use of a module instead of a text file is historic, and adds unnecessary complexity. Converting `_sysconfigdata` to a JSON file would simplify the `sysconfig` implementation. Additionally, it also makes it easier for tools to introspect the Python installation, as this would remove the necessity to execute Python code to read `_sysconfigdata`.\n\n### Has this already been discussed elsewhere?\n\nNo response given\n\n### Links to previous discussion of this feature:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-127180\n* gh-127302\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/127178/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/127178/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/127146",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/127146/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/127146/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/127146/events",
      "html_url": "https://github.com/python/cpython/issues/127146",
      "id": 2682969519,
      "node_id": "I_kwDOBN0Z8c6f6t2v",
      "number": 127146,
      "title": "Emscripten: Get test suite passing",
      "user": {
        "login": "hoodmane",
        "id": 8739626,
        "node_id": "MDQ6VXNlcjg3Mzk2MjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8739626?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hoodmane",
        "html_url": "https://github.com/hoodmane",
        "followers_url": "https://api.github.com/users/hoodmane/followers",
        "following_url": "https://api.github.com/users/hoodmane/following{/other_user}",
        "gists_url": "https://api.github.com/users/hoodmane/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hoodmane/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hoodmane/subscriptions",
        "organizations_url": "https://api.github.com/users/hoodmane/orgs",
        "repos_url": "https://api.github.com/users/hoodmane/repos",
        "events_url": "https://api.github.com/users/hoodmane/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hoodmane/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 7679165194,
          "node_id": "LA_kwDOBN0Z8c8AAAABybbDCg",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-emscripten",
          "name": "OS-emscripten",
          "color": "d4c5f9",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-11-22T11:51:53Z",
      "updated_at": "2024-12-16T15:59:11Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "First I'd like to get the test suite to run all the way through, then to pass.\r\n\r\ncc @freakboy3742\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-127151\r\n* gh-127562\r\n* gh-127565\r\n* gh-127843\r\n* gh-127984\n* gh-127992\n<!-- /gh-linked-prs -->\r\n\r\n### Emscripten PRs:\r\n* https://github.com/emscripten-core/emscripten/pull/22886\r\nhttps://github.com/emscripten-core/emscripten/pull/23000\r\nhttps://github.com/emscripten-core/emscripten/pull/23025\r\nhttps://github.com/emscripten-core/emscripten/pull/23017\r\nhttps://github.com/emscripten-core/emscripten/pull/23072\r\nhttps://github.com/emscripten-core/emscripten/pull/23073\r\nhttps://github.com/emscripten-core/emscripten/pull/22925\r\nhttps://github.com/emscripten-core/emscripten/pull/23058\r\nhttps://github.com/emscripten-core/emscripten/pull/23002\r\nhttps://github.com/emscripten-core/emscripten/pull/22998\r\nhttps://github.com/emscripten-core/emscripten/pull/23074\r\nhttps://github.com/emscripten-core/emscripten/pull/23045\r\nhttps://github.com/emscripten-core/emscripten/pull/23061\r\nhttps://github.com/emscripten-core/emscripten/pull/23135\r\nhttps://github.com/emscripten-core/emscripten/pull/23136\r\nhttps://github.com/emscripten-core/emscripten/pull/23137\r\nhttps://github.com/emscripten-core/emscripten/pull/23139",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/127146/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/127146/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/127065",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/127065/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/127065/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/127065/events",
      "html_url": "https://github.com/python/cpython/issues/127065",
      "id": 2676575923,
      "node_id": "I_kwDOBN0Z8c6fiU6z",
      "number": 127065,
      "title": "`methodcaller` is not thread-safe (or re-entrant)",
      "user": {
        "login": "colesbury",
        "id": 655866,
        "node_id": "MDQ6VXNlcjY1NTg2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/colesbury",
        "html_url": "https://github.com/colesbury",
        "followers_url": "https://api.github.com/users/colesbury/followers",
        "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
        "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
        "organizations_url": "https://api.github.com/users/colesbury/orgs",
        "repos_url": "https://api.github.com/users/colesbury/repos",
        "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
        "received_events_url": "https://api.github.com/users/colesbury/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 7,
      "created_at": "2024-11-20T17:03:30Z",
      "updated_at": "2025-01-01T09:48:36Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n**EDIT**: edited to clarify that the issue is in the C implementation of `operator.methodcaller`.\r\n\r\nOriginally reported by @ngoldbaum in https://github.com/crate-py/rpds/issues/101\r\n\r\n\r\n<details>\r\n<summary>Reproducer</summary>\r\n\r\n```python\r\nfrom operator import methodcaller\r\n\r\nfrom concurrent.futures import ThreadPoolExecutor\r\n\r\nclass HashTrieMap():\r\n    def keys(self):\r\n        return None\r\n    def values(self):\r\n        return None\r\n    def items(self):\r\n        return None\r\n\r\nnum_workers=1000\r\n\r\nviews = [methodcaller(p) for p in [\"keys\", \"values\", \"items\"]]\r\n\r\ndef work(view):\r\n    m, d = HashTrieMap(), {}\r\n    view(m)\r\n    view(d)\r\n\r\niterations = 10\r\n\r\nfor _ in range(iterations):\r\n    \r\n    executor = ThreadPoolExecutor(max_workers=num_workers)\r\n\r\n    for view in views:\r\n        futures = [executor.submit(work, view) for _ in range(num_workers)]\r\n        results = [future.result() for future in futures]\r\n```\r\n\r\n</details>\r\n\r\nOnce every 5-10 runs, the program prints:\r\n\r\n```\r\nTypeError: descriptor 'keys' for 'dict' objects doesn't apply to a 'HashTrieMap' object\r\n```\r\n\r\nThe problem is that `operator.methodcaller` is not thread-safe because it modifies the `vectorcall_args`, which is shared across calls:\r\n\r\nhttps://github.com/python/cpython/blob/0af4ec30bd2e3a52350344d1011c0c125d6dcd71/Modules/_operator.c#L1646-L1666\r\n\r\nI think this is generally unsafe, not just for free threading. The `vectorcall` args array needs to be valid for the duration of the call, and it's possible for `methodcaller` to be called reentrantly or by another thread while the call is still ongoing.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-127109\n* gh-127150\n* gh-127245\n* gh-127746\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/127065/reactions",
        "total_count": 2,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 2,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/127065/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/127058",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/127058/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/127058/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/127058/events",
      "html_url": "https://github.com/python/cpython/issues/127058",
      "id": 2676048317,
      "node_id": "I_kwDOBN0Z8c6fgUG9",
      "number": 127058,
      "title": "Tuples should be immutable and safe in C, as well as in Python.",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4322231958,
          "node_id": "LA_kwDOBN0Z8c8AAAABAaAGlg",
          "url": "https://api.github.com/repos/python/cpython/labels/triaged",
          "name": "triaged",
          "color": "0DA2C8",
          "default": false,
          "description": "The issue has been accepted as valid by a triager."
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 8,
      "created_at": "2024-11-20T14:32:21Z",
      "updated_at": "2024-12-09T11:39:30Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\n[Apologies if this sounds a bit like a rant. I'm not blaming anyone. Just because something is the wrong choice now, doesn't mean it wasn't the right choice historically]\r\n\r\nTuples are immutable in Python, but we play all sorts of games in C with tuples, filling them will `NULL`s, mutating them and reusing them.\r\n\r\nWe do this in the mistaken belief that it improves performance.\r\nBut it doesn't. It makes the code base more complicated and fragile as we need to work around tuples that misbehave and do strange things. Any local performance gain is overwhelmed by slowdowns caused by the extra complexity in tuple code, the garbage collector and a few other places.\r\n\r\nSo let's fix this.\r\n\r\nWe need to:\r\n* Provide a new C API `PyTuple_MakePair()`. Pairs are by far the most common type of tuple that we play games with. By providing a  fast way to create pairs, we can provide an upgrade path for C code that creates tuples in unsafe ways to do so safely and quickly.\r\n* Deprecate `PyTuple_New`. I don't know when we'll be able to remove it, but we should deprecate it ASAP.\r\n* Change `PyTuple_New` to fill the tuple with pointers to `None` instead of `NULL`. This doesn't fix the mutability issue, but it at least means the GC will only see valid objects. (This might break too much code, so we might just have to clearly document that tuples should be fully initialized in one go, before the tuple escapes the function it was created in)\r\n* Fix our own code to not use `PyTuple_New()` or perform tuple shenanigans. We can't reasonably expect third-party package authors to follow the rules if we don't.\r\n\r\n\r\n\r\n\r\n### CPython versions tested on:\r\n\r\nCPython main branch\r\n\r\n### Operating systems tested on:\r\n\r\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-127758\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/127058/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/127058/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/126833",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/126833/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/126833/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/126833/events",
      "html_url": "https://github.com/python/cpython/issues/126833",
      "id": 2659472956,
      "node_id": "I_kwDOBN0Z8c6ehFY8",
      "number": 126833,
      "title": "Provide visualizations of executor graphs",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-11-14T17:00:10Z",
      "updated_at": "2024-12-26T13:09:14Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\n### Proposal:\r\n\r\nVisualizations can help us understand what is going on with executors. How they link to each other, where they drop to tier 1, etc, etc.\r\n\r\n### Has this already been discussed elsewhere?\r\n\r\nThis is a minor feature, which does not need previous discussion elsewhere\r\n\r\n### Links to previous discussion of this feature:\r\n\r\n_No response_\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-126880\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/126833/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/126833/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/126795",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/126795/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/126795/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/126795/events",
      "html_url": "https://github.com/python/cpython/issues/126795",
      "id": 2656359652,
      "node_id": "I_kwDOBN0Z8c6eVNTk",
      "number": 126795,
      "title": "Use a higher tier-up threshold for JIT code",
      "user": {
        "login": "brandtbucher",
        "id": 40968415,
        "node_id": "MDQ6VXNlcjQwOTY4NDE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brandtbucher",
        "html_url": "https://github.com/brandtbucher",
        "followers_url": "https://api.github.com/users/brandtbucher/followers",
        "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
        "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
        "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
        "repos_url": "https://api.github.com/users/brandtbucher/repos",
        "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        },
        {
          "id": 7018075156,
          "node_id": "LA_kwDOBN0Z8c8AAAABok9UFA",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-JIT",
          "name": "topic-JIT",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "brandtbucher",
        "id": 40968415,
        "node_id": "MDQ6VXNlcjQwOTY4NDE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brandtbucher",
        "html_url": "https://github.com/brandtbucher",
        "followers_url": "https://api.github.com/users/brandtbucher/followers",
        "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
        "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
        "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
        "repos_url": "https://api.github.com/users/brandtbucher/repos",
        "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "brandtbucher",
          "id": 40968415,
          "node_id": "MDQ6VXNlcjQwOTY4NDE1",
          "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/brandtbucher",
          "html_url": "https://github.com/brandtbucher",
          "followers_url": "https://api.github.com/users/brandtbucher/followers",
          "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
          "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
          "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
          "repos_url": "https://api.github.com/users/brandtbucher/repos",
          "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
          "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 8,
      "created_at": "2024-11-13T18:10:04Z",
      "updated_at": "2024-12-12T08:16:08Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Our current tier-up threshold is 16, which was chosen a while ago because:\r\n- in theory, it gives some of our 16-bit branch counters time to stabilize\r\n- it seemed to work fine in practice\r\n\r\nIt turns out that we're leaving significant performance and memory improvements on the table by not using higher thresholds. Here are the results of some experiments I ran:\r\n\r\n|  warmup                                                                                                                          | speedup | memory | traces created | traces executed | uops executed |\r\n| -------------------------------------------------------------------------------------------------------------------------------- | ------- | ------ | -------------- | --------------- | ------------- |\r\n|    [64](https://github.com/faster-cpython/benchmarking-public/blob/main/results/bm-20241108-3.14.0a1%2B-48ade84-JIT/README.md)   |   +0.3% |  -1.2% |          -8.0% |           -0.1% |         +0.2% |\r\n|   [256](https://github.com/faster-cpython/benchmarking-public/blob/main/results/bm-20241110-3.14.0a1%2B-29895e9-JIT/README.md)   |   +1.0% |  -2.6% |         -22.0% |           -0.7% |         -1.3% |\r\n|  [1024](https://github.com/faster-cpython/benchmarking-public/blob/main/results/bm-20241111-3.14.0a1%2B-aaa9ae0-JIT/README.md)   |   +1.2% |  -3.2% |         -38.6% |           -3.0% |         -1.5% |\r\n|  [2048](https://github.com/faster-cpython/benchmarking-public/blob/main/results/bm-20241112-3.14.0a1%2B-f863657-JIT/README.md)   |   +1.1% |  -3.3% |         -44.9% |          -12.4% |         -3.8% |\r\n|  [4096](https://github.com/faster-cpython/benchmarking-public/blob/main/results/bm-20241111-3.14.0a1%2B-a2be6fd-JIT/README.md)   |   +2.1% |  -3.6% |         -52.2% |          -11.2% |         -3.1% | **\r\n|  [8192](https://github.com/faster-cpython/benchmarking-public/blob/main/results/bm-20241112-3.14.0a1%2B-1236a9d-JIT/README.md)\\* |   +2.0% |  -3.4% |         -59.2% |          -12.8% |         -3.1% |\r\n| [16384](https://github.com/faster-cpython/benchmarking-public/blob/main/results/bm-20241111-3.14.0a1%2B-1723e00-JIT/README.md)\\* |   +2.0% |  -3.6% |         -65.2% |          -14.5% |         -4.7% |\r\n| [32768](https://github.com/faster-cpython/benchmarking-public/blob/main/results/bm-20241112-3.14.0a1%2B-c561277-JIT/README.md)\\* |   +1.8% |  -3.8% |         -73.1% |          -18.3% |         -7.1% |\r\n| [65536](https://github.com/faster-cpython/benchmarking-public/blob/main/results/bm-20241112-3.14.0a1%2B-c17f578-JIT/README.md)\\* |   +1.4% |  -3.9% |         -79.7% |          -21.9% |         -9.2% |\r\n\r\n\\* For warmups above 4096, exponential backoff is disabled.\r\n\r\nBased on these numbers, I think 4096 as a new threshold makes sense (2% faster and 3% less memory without significant hits to the amount of work we actually do in JIT code). I'll open a PR.\r\n\r\nMy next steps will be conducting similar experiments with higher side-exit warmup values, and then lastly with different `JIT_CLEANUP_THRESHOLD` values.\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-126816\r\n* gh-127155\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/126795/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/126795/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/126775",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/126775/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/126775/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/126775/events",
      "html_url": "https://github.com/python/cpython/issues/126775",
      "id": 2655003980,
      "node_id": "I_kwDOBN0Z8c6eQCVM",
      "number": 126775,
      "title": "linecache.checkcache() is not threadsafe or GC finalizer re-entrancy safe",
      "user": {
        "login": "graingert",
        "id": 413772,
        "node_id": "MDQ6VXNlcjQxMzc3Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413772?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/graingert",
        "html_url": "https://github.com/graingert",
        "followers_url": "https://api.github.com/users/graingert/followers",
        "following_url": "https://api.github.com/users/graingert/following{/other_user}",
        "gists_url": "https://api.github.com/users/graingert/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/graingert/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/graingert/subscriptions",
        "organizations_url": "https://api.github.com/users/graingert/orgs",
        "repos_url": "https://api.github.com/users/graingert/repos",
        "events_url": "https://api.github.com/users/graingert/events{/privacy}",
        "received_events_url": "https://api.github.com/users/graingert/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-11-13T10:39:07Z",
      "updated_at": "2024-12-10T07:41:19Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\n```python\r\nimport linecache\r\nimport weakref\r\n\r\n\r\ndef gen_func(n):\r\n    func_code = \"\"\"\r\ndef func():\r\n    pass\r\n\"\"\"\r\n    g = {}\r\n    exec(func_code, g, g)\r\n    func = g['func']\r\n\r\n    filename = f\"<generated-{n}>\"\r\n    linecache.cache[filename] = (len(func_code), None, func_code.splitlines(True), filename)\r\n\r\n    def cleanup_linecache(filename):\r\n        def _cleanup():\r\n            if filename in linecache.cache:\r\n                del linecache.cache[filename]\r\n        return _cleanup\r\n\r\n    weakref.finalize(func, cleanup_linecache(filename))\r\n\r\n    return func\r\n\r\ndef main():\r\n    n = 0\r\n    while True:\r\n        func = gen_func(n)\r\n        del func\r\n        linecache.checkcache()\r\n        n += 1\r\n        if n % 100000 == 0:\r\n            print(n)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\nThis crashes with a KeyError every time for me on 3.12 and 3.13, but some people report that it never crashes on CPython:\r\n\r\n```\r\n \u2718  graingert@conscientious \ue0b0 ~/projects/weakref-func-cycle-never-gc \ue0b0 \ue0a0 main \ue0b0 python demo.py\r\nTraceback (most recent call last):\r\n  File \"/home/graingert/projects/weakref-func-cycle-never-gc/demo.py\", line 38, in <module>\r\n    main()\r\n  File \"/home/graingert/projects/weakref-func-cycle-never-gc/demo.py\", line 32, in main\r\n    linecache.checkcache()\r\n  File \"/usr/lib/python3.12/linecache.py\", line 64, in checkcache\r\n    entry = cache[filename]\r\n            ~~~~~^^^^^^^^^^\r\nKeyError: '<generated-147>'\r\n \u2718  graingert@conscientious \ue0b0 ~/projects/weakref-func-cycle-never-gc \ue0b0 \ue0a0 main \ue0b0 phyt \r\n \u2718  graingert@conscientious \ue0b0 ~/projects/weakref-func-cycle-never-gc \ue0b0 \ue0a0 main \ue0b0 python3.13 demo.py \r\nTraceback (most recent call last):\r\n  File \"/home/graingert/projects/weakref-func-cycle-never-gc/demo.py\", line 38, in <module>\r\n    main()\r\n    ~~~~^^\r\n  File \"/home/graingert/projects/weakref-func-cycle-never-gc/demo.py\", line 32, in main\r\n    linecache.checkcache()\r\n    ~~~~~~~~~~~~~~~~~~~~^^\r\n  File \"/usr/lib/python3.13/linecache.py\", line 59, in checkcache\r\n    entry = cache[filename]\r\n            ~~~~~^^^^^^^^^^\r\nKeyError: '<generated-2637>'\r\n```\r\n\r\nThe script seems to run \"forever\" on Python3.9, 3.10 and 3.11 3.14.0a1+ (heads/main:ba088c8f9cf.\r\n\r\n### CPython versions tested on:\r\n\r\n3.12, 3.13\r\n\r\n### Operating systems tested on:\r\n\r\n_No response_\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-126776\r\n* gh-127778\n* gh-127779\n<!-- /gh-linked-prs -->\r\n\r\n\r\n# important meta issue:\r\nThis reproducer absolutely should not reproduce on cpython!!\r\n\r\nThere does seem to be another issue, because this function should be deleted instantly because its refcount drops to 0, and never run the finalizer during the linecache.checkcache call\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/126775/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/126775/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/126748",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/126748/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/126748/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/126748/events",
      "html_url": "https://github.com/python/cpython/issues/126748",
      "id": 2652443754,
      "node_id": "I_kwDOBN0Z8c6eGRRq",
      "number": 126748,
      "title": "Wasi + Emscripten: configure behavior with --enable-optimizations seems incorrect?",
      "user": {
        "login": "hoodmane",
        "id": 8739626,
        "node_id": "MDQ6VXNlcjg3Mzk2MjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8739626?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hoodmane",
        "html_url": "https://github.com/hoodmane",
        "followers_url": "https://api.github.com/users/hoodmane/followers",
        "following_url": "https://api.github.com/users/hoodmane/following{/other_user}",
        "gists_url": "https://api.github.com/users/hoodmane/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hoodmane/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hoodmane/subscriptions",
        "organizations_url": "https://api.github.com/users/hoodmane/orgs",
        "repos_url": "https://api.github.com/users/hoodmane/repos",
        "events_url": "https://api.github.com/users/hoodmane/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hoodmane/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        },
        {
          "id": 4615519712,
          "node_id": "LA_kwDOBN0Z8c8AAAABExs94A",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-wasi",
          "name": "OS-wasi",
          "color": "d4c5f9",
          "default": false,
          "description": ""
        },
        {
          "id": 7679165194,
          "node_id": "LA_kwDOBN0Z8c8AAAABybbDCg",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-emscripten",
          "name": "OS-emscripten",
          "color": "d4c5f9",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-11-12T14:56:02Z",
      "updated_at": "2024-11-12T18:42:20Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "`configure.ac` sets `DEF_MAKE_ALL_RULE` to:\r\n* if `--enable-optimizations` is passed, then `profile-opt`\r\n* if `ac_sys_system` is `Emscripten` or `WASI` then `build_wasm`\r\n* if neither of these, then `build_all`.\r\n\r\n`build_wasm` is a modified version of the `build_all` target that drops some targets that don't build correctly in webassembly targets or are unneeded. This logic hasn't been added for the case when `--enable-optimizations` is passed. I think the best solution for now would be to check for these targets with `--enable-optimizations` and error out. I don't think PGO will work on the wasm targets without tinkering either way.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-126687\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/126748/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/126748/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/126644",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/126644/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/126644/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/126644/events",
      "html_url": "https://github.com/python/cpython/issues/126644",
      "id": 2647328879,
      "node_id": "I_kwDOBN0Z8c6dywhv",
      "number": 126644,
      "title": "`_interpreters` is not thread safe on the free-threaded build",
      "user": {
        "login": "devdanzin",
        "id": 74280297,
        "node_id": "MDQ6VXNlcjc0MjgwMjk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/74280297?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/devdanzin",
        "html_url": "https://github.com/devdanzin",
        "followers_url": "https://api.github.com/users/devdanzin/followers",
        "following_url": "https://api.github.com/users/devdanzin/following{/other_user}",
        "gists_url": "https://api.github.com/users/devdanzin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/devdanzin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/devdanzin/subscriptions",
        "organizations_url": "https://api.github.com/users/devdanzin/orgs",
        "repos_url": "https://api.github.com/users/devdanzin/repos",
        "events_url": "https://api.github.com/users/devdanzin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/devdanzin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018672955,
          "node_id": "LA_kwDOBN0Z8c7viBU7",
          "url": "https://api.github.com/repos/python/cpython/labels/extension-modules",
          "name": "extension-modules",
          "color": "09fc59",
          "default": false,
          "description": "C modules in the Modules dir"
        },
        {
          "id": 4018848914,
          "node_id": "LA_kwDOBN0Z8c7visSS",
          "url": "https://api.github.com/repos/python/cpython/labels/type-crash",
          "name": "type-crash",
          "color": "b60205",
          "default": false,
          "description": "A hard crash of the interpreter, possibly with a core dump"
        },
        {
          "id": 4018993468,
          "node_id": "LA_kwDOBN0Z8c7vjPk8",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-subinterpreters",
          "name": "topic-subinterpreters",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "ZeroIntensity",
        "id": 49501366,
        "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
        "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ZeroIntensity",
        "html_url": "https://github.com/ZeroIntensity",
        "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
        "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
        "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
        "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
        "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
        "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "ZeroIntensity",
          "id": 49501366,
          "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
          "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ZeroIntensity",
          "html_url": "https://github.com/ZeroIntensity",
          "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
          "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
          "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
          "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
          "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
          "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2024-11-10T15:09:04Z",
      "updated_at": "2024-11-11T18:24:32Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Crash report\r\n\r\n### What happened?\r\n\r\nFirst off, sorry for not being able to offer code that is more reduced and certain to trigger a repro.\r\n\r\nThe code below non-deterministically triggers `python: Python/index_pool.c:92: heap_pop: Assertion 'heap->size > 0' failed.` in a free-threading build with `PYTHON_GIL=0`.\r\n\r\n```python\r\nimport _interpreters\r\nfrom threading import Thread\r\n\r\ndef f(): pass\r\n\r\nints = []\r\nfor x in range(300):\r\n    ints.append(_interpreters.create())\r\n\r\nthreads = []\r\nfor interpr in ints:\r\n    threads.append(Thread(target=_interpreters.run_string, args=(interpr, \"f()\",)))\r\n    threads.append(Thread(target=_interpreters.get_current, args=()))\r\n    threads.append(Thread(target=_interpreters.destroy, args=(interpr,)))\r\n    threads.append(Thread(target=_interpreters.list_all, args=()))\r\n    threads.append(Thread(target=_interpreters.destroy, args=(interpr,)))\r\n    threads.append(Thread(target=_interpreters.get_current, args=()))\r\n    threads.append(Thread(target=_interpreters.get_main, args=()))\r\n    threads.append(Thread(target=_interpreters.destroy, args=(interpr,)))\r\n    threads.append(Thread(target=_interpreters.run_string, args=(interpr, \"f()\",)))\r\n\r\nfor thread in threads:\r\n    try:\r\n        print(\"START\", thread)\r\n        thread.start()\r\n    except Exception:\r\n        pass\r\n\r\nfor thread in threads:\r\n    try:\r\n        print(\"JOIN\", thread)\r\n        thread.join()\r\n    except Exception:\r\n        pass\r\n```\r\n\r\nBacktrace:\r\n```gdb\r\n#0  __pthread_kill_implementation (no_tid=0, signo=6, threadid=140729519150656) at ./nptl/pthread_kill.c:44\r\n#1  __pthread_kill_internal (signo=6, threadid=140729519150656) at ./nptl/pthread_kill.c:78\r\n#2  __GI___pthread_kill (threadid=140729519150656, signo=signo@entry=6) at ./nptl/pthread_kill.c:89\r\n#3  0x00007ffff7ce0476 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26\r\n#4  0x00007ffff7cc67f3 in __GI_abort () at ./stdlib/abort.c:79\r\n#5  0x00007ffff7cc671b in __assert_fail_base (fmt=0x7ffff7e7b130 \"%s%s%s:%u: %s%sAssertion `%s' failed.\\n%n\",\r\n    assertion=0x555555aceaf4 \"heap->size > 0\", file=0x555555aceae0 \"Python/index_pool.c\", line=92, function=<optimized out>)\r\n    at ./assert/assert.c:92\r\n#6  0x00007ffff7cd7e96 in __GI___assert_fail (assertion=assertion@entry=0x555555aceaf4 \"heap->size > 0\",\r\n    file=file@entry=0x555555aceae0 \"Python/index_pool.c\", line=line@entry=92,\r\n    function=function@entry=0x555555aceb40 <__PRETTY_FUNCTION__.1> \"heap_pop\") at ./assert/assert.c:101\r\n#7  0x00005555558caa1c in heap_pop (heap=<optimized out>) at Python/index_pool.c:92\r\n#8  0x00005555558cac33 in _PyIndexPool_AllocIndex (pool=pool@entry=0x7ffff780f498) at Python/index_pool.c:173\r\n#9  0x000055555568d9f0 in _Py_ReserveTLBCIndex (interp=interp@entry=0x7ffff780b020) at Objects/codeobject.c:2752\r\n#10 0x0000555555951c33 in new_threadstate (interp=interp@entry=0x7ffff780b020, whence=whence@entry=5) at Python/pystate.c:1516\r\n#11 0x0000555555953994 in _PyThreadState_NewBound (interp=interp@entry=0x7ffff780b020, whence=whence@entry=5)\r\n    at Python/pystate.c:1578\r\n#12 0x0000555555896ee9 in _enter_session (session=session@entry=0x7ffe24ff8740, interp=interp@entry=0x7ffff780b020)\r\n    at Python/crossinterp.c:1548\r\n#13 0x000055555589b9fb in _PyXI_Enter (session=session@entry=0x7ffe24ff8740, interp=interp@entry=0x7ffff780b020,\r\n    nsupdates=nsupdates@entry=0x0) at Python/crossinterp.c:1711\r\n#14 0x00007ffff7c3d217 in _run_in_interpreter (interp=interp@entry=0x7ffff780b020, codestr=0x200006182c8 \"f()\", codestrlen=3,\r\n    shareables=shareables@entry=0x0, flags=1, p_excinfo=p_excinfo@entry=0x7ffe24ff8870) at ./Modules/_interpretersmodule.c:461\r\n#15 0x00007ffff7c3d3ef in _interp_exec (self=self@entry=<module at remote 0x20000778b30>, interp=interp@entry=0x7ffff780b020,\r\n    code_arg=<optimized out>, shared_arg=0x0, p_excinfo=p_excinfo@entry=0x7ffe24ff8870) at ./Modules/_interpretersmodule.c:950\r\n#16 0x00007ffff7c3dc6b in interp_run_string (self=<module at remote 0x20000778b30>, args=args@entry=(9, 'f()'), kwds=kwds@entry={})\r\n    at ./Modules/_interpretersmodule.c:1110\r\n#17 0x000055555570145a in cfunction_call (func=func@entry=<built-in method run_string of module object at remote 0x20000778b30>,\r\n    args=args@entry=(9, 'f()'), kwargs=kwargs@entry={}) at Objects/methodobject.c:551\r\n#18 0x000055555567f69a in _PyObject_Call (tstate=0x5555560c09d0,\r\n    callable=callable@entry=<built-in method run_string of module object at remote 0x20000778b30>, args=args@entry=(9, 'f()'),\r\n    kwargs=kwargs@entry={}) at Objects/call.c:361\r\n```\r\n\r\nThis code most usually results in one of the following errors, from most common to rarest:\r\n\r\n1. tstate_delete_common assertion, which seems to indicate a thread creation failed, see https://github.com/python/cpython/issues/109746.\r\n```\r\npython: Python/pystate.c:1739: tstate_delete_common: Assertion `tstate->_status.cleared && !tstate->_status.finalized' failed.\r\n```\r\n\r\n2. Fatal Python error, seems to be https://github.com/python/cpython/issues/113148.\r\n\r\n```\r\nFatal Python error: Py_EndInterpreter: not the last thread\r\nPython runtime state: initialized\r\n\r\nCurrent thread 0x00007f09af37e640 (most recent call first):\r\n  <no Python frame>\r\n\r\nThread 0x00007f09b0380640 (most recent call first):\r\n  <no Python frame>\r\nAborted\r\n```\r\n\r\nGiven that, running it multiple times seems necessary to trigger the correct abort in `heap_pop`. The affected code seems to have been included in https://github.com/python/cpython/pull/123926, so cc @mpage.\r\n\r\nFound using fusil by @vstinner.\r\n\r\n### CPython versions tested on:\r\n\r\nCPython main branch\r\n\r\n### Operating systems tested on:\r\n\r\nLinux\r\n\r\n### Output from running 'python -VV' on the command line:\r\n\r\nPython 3.14.0a1+ experimental free-threading build (heads/main-dirty:54c63a32d0, Nov  8 2024, 20:16:36) [GCC 11.4.0]\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-126696\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/126644/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/126644/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/126491",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/126491/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/126491/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/126491/events",
      "html_url": "https://github.com/python/cpython/issues/126491",
      "id": 2637923216,
      "node_id": "I_kwDOBN0Z8c6dO4OQ",
      "number": 126491,
      "title": "Mark all objects reachable from roots as live before doing main cyclic GC pass",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2024-11-06T12:12:05Z",
      "updated_at": "2024-12-10T10:55:14Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Objects can only be cyclic garbage if they are not reachable.\r\nSo, if we can cheaply identify the majority of reachable objects before performing the (relatively slow) cycle detecting pass, we can save a lot of time.\r\n\r\nPerforming a transitive closure of all objects reachable from global roots (the sys and builtins modules as well as builtin class's dicts and sublasses) plus a transitive closure of all objects reachable from the stacks can eliminate >90% of all objects relatively cheaply.\r\n\r\nInitial experiments show a [~3% speedup, with an almost 50% speedup of the most gc-heavy benchmark](https://raw.githubusercontent.com/faster-cpython/benchmarking-public/refs/heads/main/results/bm-20241104-3.14.0a1%2B-5e813c5/bm-20241104-linux-x86_64-faster%252dcpython-mark_first_gc-3.14.0a1%2B-5e813c5-vs-base.svg).\r\n\r\nThis idea has been proposed a few times. \r\n@nascheme has definitely suggested it before. Perhaps he can add links to any prior discussion and/or experiments?\r\n\r\nWhat makes this more feasible now is that the GC can see the evaluation stack of frames, thanks to #124392, so we would now expect that the vast majority of reachable objects can be cheaply marked, thus improving the efficiency of cycle detection considerably.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-126502\n* gh-126983\n* gh-126984\n* gh-127110\n* gh-127519\n* gh-127770\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/126491/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/126491/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/126469",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/126469/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/126469/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/126469/events",
      "html_url": "https://github.com/python/cpython/issues/126469",
      "id": 2637101723,
      "node_id": "I_kwDOBN0Z8c6dLvqb",
      "number": 126469,
      "title": "Unnecessary error-checking branch in `lexer.c`.",
      "user": {
        "login": "qqwqqw689",
        "id": 114795525,
        "node_id": "U_kgDOBtekBQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/114795525?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/qqwqqw689",
        "html_url": "https://github.com/qqwqqw689",
        "followers_url": "https://api.github.com/users/qqwqqw689/followers",
        "following_url": "https://api.github.com/users/qqwqqw689/following{/other_user}",
        "gists_url": "https://api.github.com/users/qqwqqw689/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/qqwqqw689/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/qqwqqw689/subscriptions",
        "organizations_url": "https://api.github.com/users/qqwqqw689/orgs",
        "repos_url": "https://api.github.com/users/qqwqqw689/repos",
        "events_url": "https://api.github.com/users/qqwqqw689/events{/privacy}",
        "received_events_url": "https://api.github.com/users/qqwqqw689/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 5532939260,
          "node_id": "LA_kwDOBN0Z8c8AAAABScnz_A",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-parser",
          "name": "topic-parser",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2024-11-06T05:44:28Z",
      "updated_at": "2024-11-06T15:09:50Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nIn file lexer.c we have\n```c\n    Py_ssize_t invalid = _PyUnicode_ScanIdentifier(s);\n    if (invalid < 0) {\n        Py_DECREF(s);\n        tok->done = E_ERROR;\n        return 0;\n    }\n```\n[link](https://github.com/python/cpython/blob/main/Parser/lexer/lexer.c#L331)\n\nBut for function _PyUnicode_ScanIdentifier in unicodeobject.c file\n```c\nPy_ssize_t\n_PyUnicode_ScanIdentifier(PyObject *self)\n{\n    Py_ssize_t i;\n    Py_ssize_t len = PyUnicode_GET_LENGTH(self);\n    if (len == 0) {\n        /* an empty string is not a valid identifier */\n        return 0;\n    }\n\n    int kind = PyUnicode_KIND(self);\n    const void *data = PyUnicode_DATA(self);\n    Py_UCS4 ch = PyUnicode_READ(kind, data, 0);\n    /* PEP 3131 says that the first character must be in\n       XID_Start and subsequent characters in XID_Continue,\n       and for the ASCII range, the 2.x rules apply (i.e\n       start with letters and underscore, continue with\n       letters, digits, underscore). However, given the current\n       definition of XID_Start and XID_Continue, it is sufficient\n       to check just for these, except that _ must be allowed\n       as starting an identifier.  */\n    if (!_PyUnicode_IsXidStart(ch) && ch != 0x5F /* LOW LINE */) {\n        return 0;\n    }\n\n    for (i = 1; i < len; i++) {\n        ch = PyUnicode_READ(kind, data, i);\n        if (!_PyUnicode_IsXidContinue(ch)) {\n            return i;\n        }\n    }\n    return i;\n}\n```\n[link](https://github.com/python/cpython/blob/main/Objects/unicodeobject.c#L12117)\nThis function will never return a invalid valiable <0, so\n```c\n    if (invalid < 0) {\n        Py_DECREF(s);\n        tok->done = E_ERROR;\n        return 0;\n    }\n```\nwill never be executed.\n\n### CPython versions tested on:\n\nCPython main branch\n\n### Operating systems tested on:\n\nLinux, macOS, Windows, Other\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-126473\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/126469/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/126469/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/126462",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/126462/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/126462/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/126462/events",
      "html_url": "https://github.com/python/cpython/issues/126462",
      "id": 2636745705,
      "node_id": "I_kwDOBN0Z8c6dKYvp",
      "number": 126462,
      "title": "[Python 3.11 only] \"Post-init processing\" section of `dataclasses` contains duplicate sentences + malformatted code example",
      "user": {
        "login": "akabraham",
        "id": 1848501,
        "node_id": "MDQ6VXNlcjE4NDg1MDE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1848501?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/akabraham",
        "html_url": "https://github.com/akabraham",
        "followers_url": "https://api.github.com/users/akabraham/followers",
        "following_url": "https://api.github.com/users/akabraham/following{/other_user}",
        "gists_url": "https://api.github.com/users/akabraham/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/akabraham/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/akabraham/subscriptions",
        "organizations_url": "https://api.github.com/users/akabraham/orgs",
        "repos_url": "https://api.github.com/users/akabraham/repos",
        "events_url": "https://api.github.com/users/akabraham/events{/privacy}",
        "received_events_url": "https://api.github.com/users/akabraham/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 7334604047,
          "node_id": "LA_kwDOBN0Z8c8AAAABtS0tDw",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-dataclasses",
          "name": "topic-dataclasses",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-11-05T23:59:58Z",
      "updated_at": "2024-11-06T13:50:13Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Documentation\r\n\r\n#### NOTE: Python 3.11 Docs Only\r\n\r\n## Issue:\r\nThe `\"Post-init processing\" `section of `dataclasses` in the [Python 3.11 documentation](https://docs.python.org/3.11/library/dataclasses.html#post-init-processing) contains duplicate sentences and a malformed code example. These issues aren't in the other active Python versions (i.e. 3.9, 3.10, 3.12, 3.13)\r\n\r\n## Proposed Fix:\r\nThe fix is to replace the 3.11 \"Post-init processing\" section with that of the 3.12 branch, which doesn't contain the duplicate sentences or bad formatting. To my knowledge, there are no new features added in 3.12 that makes this section incompatible with the 3.11 documentation, so it's safe to use it.\r\n\r\nScreenshot of malformatted section in Python 3.11 documentation:\r\n![bug_python_3-11_dataclasses_postinit_processing](https://github.com/user-attachments/assets/54afe7b3-7249-4096-891b-dfc58f499964)\r\n\r\nScreenshot of good section in Python 3.12 documentation:\r\n![fixed_python_3-12_dataclasses_postinit_processing](https://github.com/user-attachments/assets/d9383ca6-5b6d-460a-91b7-526ee0e5bce9)\r\n\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-126463\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/126462/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/126462/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/126209",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/126209/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/126209/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/126209/events",
      "html_url": "https://github.com/python/cpython/issues/126209",
      "id": 2625511628,
      "node_id": "I_kwDOBN0Z8c6cfiDM",
      "number": 126209,
      "title": "warnings.warn's skip_file_prefixes doesn't work when provided `__file__`.",
      "user": {
        "login": "nairb774",
        "id": 128795,
        "node_id": "MDQ6VXNlcjEyODc5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/128795?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nairb774",
        "html_url": "https://github.com/nairb774",
        "followers_url": "https://api.github.com/users/nairb774/followers",
        "following_url": "https://api.github.com/users/nairb774/following{/other_user}",
        "gists_url": "https://api.github.com/users/nairb774/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nairb774/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nairb774/subscriptions",
        "organizations_url": "https://api.github.com/users/nairb774/orgs",
        "repos_url": "https://api.github.com/users/nairb774/repos",
        "events_url": "https://api.github.com/users/nairb774/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nairb774/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "zsaladin",
        "id": 6466389,
        "node_id": "MDQ6VXNlcjY0NjYzODk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6466389?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zsaladin",
        "html_url": "https://github.com/zsaladin",
        "followers_url": "https://api.github.com/users/zsaladin/followers",
        "following_url": "https://api.github.com/users/zsaladin/following{/other_user}",
        "gists_url": "https://api.github.com/users/zsaladin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zsaladin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zsaladin/subscriptions",
        "organizations_url": "https://api.github.com/users/zsaladin/orgs",
        "repos_url": "https://api.github.com/users/zsaladin/repos",
        "events_url": "https://api.github.com/users/zsaladin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zsaladin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "zsaladin",
          "id": 6466389,
          "node_id": "MDQ6VXNlcjY0NjYzODk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6466389?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/zsaladin",
          "html_url": "https://github.com/zsaladin",
          "followers_url": "https://api.github.com/users/zsaladin/followers",
          "following_url": "https://api.github.com/users/zsaladin/following{/other_user}",
          "gists_url": "https://api.github.com/users/zsaladin/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/zsaladin/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/zsaladin/subscriptions",
          "organizations_url": "https://api.github.com/users/zsaladin/orgs",
          "repos_url": "https://api.github.com/users/zsaladin/repos",
          "events_url": "https://api.github.com/users/zsaladin/events{/privacy}",
          "received_events_url": "https://api.github.com/users/zsaladin/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-10-30T22:40:28Z",
      "updated_at": "2024-11-02T08:56:52Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nI was attempting to make warning.warn skip all frames in the calling file by setting `skip_file_prefixes=(__file__,)`. Frustratingly it wasn't working as expected and was blaming an intermediate frame in the file I was trying to skip. Looking at `Lib/warnings.py` I was confused as to why it wasn't working. After some digging I discovered there is a parallel C implementation in `Python/_warnings.c`.\n\nThe following script demonstrates the difference between the two implementations:\n\n```python\nimport sys\n# Uncomment to compare the C and Py implementation of warnings.warn.\n# sys.modules[\"_warnings\"] = None\nimport warnings\n\n# Desired input which works as expected with the Py impl, but not the C impl.\nskip_file_prefixes=(__file__,)\n\n# Hack to make the C implementation match the Py behavior:\n# skip_file_prefixes=(__file__[:-1],)  \n\ndef ccc():\n    warnings.warn(\"Hello\", UserWarning, skip_file_prefixes=skip_file_prefixes)\n\ndef bbb():\n    ccc()\n\ndef aaa():\n    bbb()\n\naaa()\n```\n\nBroken C implementation:\n```\n$ python sample.py \n/tmp/sample.py:12: UserWarning: Hello\n  ccc()\n```\n\nCorrect Python implementation:\n```\n$ python sample.py \nsys:1: UserWarning: Hello\n```\n\nThere is a slight implementation difference between `Python/_warnings.c:is_filename_to_skip` and `Lib/warnings.py:_is_filename_to_skip`. The Python implementation is uses `filename.startswith(prefix)` [^1] while the C implementation uses `PyUnicode_Tailmatch(filename, prefix, 0, -1, -1)` [^2]. It looks like the C implementation should be something like `PyUnicode_Tailmatch(filename, prefix, 0, PY_SSIZE_T_MAX, -1)`.\n\n```\n$ python --version\nPython 3.12.7\n```\n\n[^1]: https://github.com/python/cpython/blob/679dfaeb4c78a138441a2073530be105c6752766/Lib/warnings.py#L280\n\n[^2]: https://github.com/python/cpython/blob/3ef8a3a9004ff7ed2bf6f2f67f13ff5b37c42204/Python/_warnings.c#L809\n\n### CPython versions tested on:\n\n3.12\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-126329\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/126209/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/126209/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/126195",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/126195/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/126195/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/126195/events",
      "html_url": "https://github.com/python/cpython/issues/126195",
      "id": 2624886613,
      "node_id": "I_kwDOBN0Z8c6cdJdV",
      "number": 126195,
      "title": "JIT: Use pthread_jit_write_protect_np on macOS",
      "user": {
        "login": "diegorusso",
        "id": 342108,
        "node_id": "MDQ6VXNlcjM0MjEwOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/342108?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/diegorusso",
        "html_url": "https://github.com/diegorusso",
        "followers_url": "https://api.github.com/users/diegorusso/followers",
        "following_url": "https://api.github.com/users/diegorusso/following{/other_user}",
        "gists_url": "https://api.github.com/users/diegorusso/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/diegorusso/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/diegorusso/subscriptions",
        "organizations_url": "https://api.github.com/users/diegorusso/orgs",
        "repos_url": "https://api.github.com/users/diegorusso/repos",
        "events_url": "https://api.github.com/users/diegorusso/events{/privacy}",
        "received_events_url": "https://api.github.com/users/diegorusso/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 588881297,
          "node_id": "MDU6TGFiZWw1ODg4ODEyOTc=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-mac",
          "name": "OS-mac",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 7018075156,
          "node_id": "LA_kwDOBN0Z8c8AAAABok9UFA",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-JIT",
          "name": "topic-JIT",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "diegorusso",
        "id": 342108,
        "node_id": "MDQ6VXNlcjM0MjEwOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/342108?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/diegorusso",
        "html_url": "https://github.com/diegorusso",
        "followers_url": "https://api.github.com/users/diegorusso/followers",
        "following_url": "https://api.github.com/users/diegorusso/following{/other_user}",
        "gists_url": "https://api.github.com/users/diegorusso/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/diegorusso/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/diegorusso/subscriptions",
        "organizations_url": "https://api.github.com/users/diegorusso/orgs",
        "repos_url": "https://api.github.com/users/diegorusso/repos",
        "events_url": "https://api.github.com/users/diegorusso/events{/privacy}",
        "received_events_url": "https://api.github.com/users/diegorusso/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "diegorusso",
          "id": 342108,
          "node_id": "MDQ6VXNlcjM0MjEwOA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/342108?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/diegorusso",
          "html_url": "https://github.com/diegorusso",
          "followers_url": "https://api.github.com/users/diegorusso/followers",
          "following_url": "https://api.github.com/users/diegorusso/following{/other_user}",
          "gists_url": "https://api.github.com/users/diegorusso/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/diegorusso/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/diegorusso/subscriptions",
          "organizations_url": "https://api.github.com/users/diegorusso/orgs",
          "repos_url": "https://api.github.com/users/diegorusso/repos",
          "events_url": "https://api.github.com/users/diegorusso/events{/privacy}",
          "received_events_url": "https://api.github.com/users/diegorusso/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-10-30T17:55:21Z",
      "updated_at": "2024-11-12T01:22:02Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\nThe proposal is an internal implementation of the JIT and it transparent to the user.\n\n### Has this already been discussed elsewhere?\n\nI have already discussed this feature proposal on Discourse\n\n### Links to previous discussion of this feature:\n\nNot on Discourse, I've had extensive discussion about this with @brandtbucher and created a prototype that we benchmarked using the faster-cpython infrastructure. The full results are here: https://github.com/faster-cpython/benchmarking-public/tree/main/results/bm-20241018-3.14.0a1+-f74cd79-JIT\n\nOn macOS on Apple Silicon there is an overall 1.4% speed improvement by replacing the `mprotect` with `pthread_jit_write_protect_np`.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-126196\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/126195/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/126195/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/126091",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/126091/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/126091/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/126091/events",
      "html_url": "https://github.com/python/cpython/issues/126091",
      "id": 2619478072,
      "node_id": "I_kwDOBN0Z8c6cIhA4",
      "number": 126091,
      "title": "Incomplete stack traces when throwing into a generator chain that ends in a custom generator",
      "user": {
        "login": "jbower-fb",
        "id": 1978924,
        "node_id": "MDQ6VXNlcjE5Nzg5MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1978924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jbower-fb",
        "html_url": "https://github.com/jbower-fb",
        "followers_url": "https://api.github.com/users/jbower-fb/followers",
        "following_url": "https://api.github.com/users/jbower-fb/following{/other_user}",
        "gists_url": "https://api.github.com/users/jbower-fb/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jbower-fb/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jbower-fb/subscriptions",
        "organizations_url": "https://api.github.com/users/jbower-fb/orgs",
        "repos_url": "https://api.github.com/users/jbower-fb/repos",
        "events_url": "https://api.github.com/users/jbower-fb/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jbower-fb/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-10-28T20:32:23Z",
      "updated_at": "2024-10-30T17:53:02Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\n[bpo-29590](https://bugs.python.org/issue29590) identified an issue where only the head of a chain of generators was included in stack-traces when processing a thrown-in exception. I think this issue still exists but only in the case where the head of a chain of generators is a custom generator.\r\n\r\nConsider the following example in which a custom generator's `throw()` method does not see its predecessor in the `yield from` chain (the `g()` generator), but the builtin in generator does:\r\n```python\r\n$ cat test.py\r\nimport sys\r\n\r\nclass UserGen:\r\n  def throw(self, *args):\r\n    print(\"Traceback from UserGen:\")\r\n    f = sys._getframe()\r\n    while f:\r\n      print(f)\r\n      f = f.f_back\r\n  def __iter__(self):\r\n    return self\r\n  def __next__(self):\r\n    return 42\r\n\r\ndef real_gen():\r\n  yield 43\r\n\r\ndef g(target):\r\n  yield from target\r\n\r\ngg = g(UserGen())\r\ngg.send(None)\r\ngg.throw(RuntimeError)\r\n\r\nprint()\r\n\r\ngg = g(real_gen())\r\ngg.send(None)\r\ngg.throw(RuntimeError)\r\n\r\n\r\n$ python3 test.py\r\nTraceback from UserGen:\r\n<frame at 0x10273e230, file 'test.py', line 8, code throw>\r\n<frame at 0x10270d440, file 'test.py', line 26, code <module>>\r\n\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 32, in <module>\r\n    gg.throw(RuntimeError)\r\n  File \"test.py\", line 22, in g\r\n    yield from target\r\n  File \"test.py\", line 18, in real_gen\r\n    yield 43\r\nRuntimeError\r\n```\r\n\r\nThe fix for [bpo-29590](https://bugs.python.org/issue29590) is in #19896 and appears to specifically only link frames together for chains of builtin generators only. I *suspect* this was just an oversight rather than a deliberate choice though.\r\n\r\nI attach a proposed fix in a PR.\r\n\r\n### CPython versions tested on:\r\n\r\nCPython main branch\r\n\r\n### Operating systems tested on:\r\n\r\n_No response_\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-126092\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/126091/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/126091/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/126081",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/126081/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/126081/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/126081/events",
      "html_url": "https://github.com/python/cpython/issues/126081",
      "id": 2618814066,
      "node_id": "I_kwDOBN0Z8c6cF-5y",
      "number": 126081,
      "title": "Require reviews for new features",
      "user": {
        "login": "ambv",
        "id": 55281,
        "node_id": "MDQ6VXNlcjU1Mjgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/55281?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ambv",
        "html_url": "https://github.com/ambv",
        "followers_url": "https://api.github.com/users/ambv/followers",
        "following_url": "https://api.github.com/users/ambv/following{/other_user}",
        "gists_url": "https://api.github.com/users/ambv/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ambv/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ambv/subscriptions",
        "organizations_url": "https://api.github.com/users/ambv/orgs",
        "repos_url": "https://api.github.com/users/ambv/repos",
        "events_url": "https://api.github.com/users/ambv/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ambv/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2024-10-28T15:46:44Z",
      "updated_at": "2024-10-29T10:11:03Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\nAnnouncement:\nhttps://discuss.python.org/t/workflow-change-coming-mandatory-reviews-on-new-features/68135\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-126082\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/126081/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/126081/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/126022",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/126022/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/126022/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/126022/events",
      "html_url": "https://github.com/python/cpython/issues/126022",
      "id": 2616245075,
      "node_id": "I_kwDOBN0Z8c6b8LtT",
      "number": 126022,
      "title": "Python license documentation file has a stale link to Zope Corporation",
      "user": {
        "login": "partev",
        "id": 23830955,
        "node_id": "MDQ6VXNlcjIzODMwOTU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23830955?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/partev",
        "html_url": "https://github.com/partev",
        "followers_url": "https://api.github.com/users/partev/followers",
        "following_url": "https://api.github.com/users/partev/following{/other_user}",
        "gists_url": "https://api.github.com/users/partev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/partev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/partev/subscriptions",
        "organizations_url": "https://api.github.com/users/partev/orgs",
        "repos_url": "https://api.github.com/users/partev/repos",
        "events_url": "https://api.github.com/users/partev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/partev/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 15,
      "created_at": "2024-10-27T01:21:28Z",
      "updated_at": "2024-11-06T13:51:22Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "Python license file https://docs.python.org/3.14/license.html refers to \"Digital Creations (now Zope Corporation; see https://www.zope.org/)\". However, Zope Corporations' current website is https://zope.dev and not zope.org. Currently zope.org redirects to zope.dev but at some point in the future this redirection may stop working and it is probably better to link to the new URL which is https://zope.dev\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-126011\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/126022/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/126022/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/126016",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/126016/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/126016/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/126016/events",
      "html_url": "https://github.com/python/cpython/issues/126016",
      "id": 2616073322,
      "node_id": "I_kwDOBN0Z8c6b7hxq",
      "number": 126016,
      "title": "Multithreaded subinterpreters can be running during finalization",
      "user": {
        "login": "ZeroIntensity",
        "id": 49501366,
        "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
        "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ZeroIntensity",
        "html_url": "https://github.com/ZeroIntensity",
        "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
        "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
        "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
        "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
        "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
        "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018848914,
          "node_id": "LA_kwDOBN0Z8c7visSS",
          "url": "https://api.github.com/repos/python/cpython/labels/type-crash",
          "name": "type-crash",
          "color": "b60205",
          "default": false,
          "description": "A hard crash of the interpreter, possibly with a core dump"
        },
        {
          "id": 4018993468,
          "node_id": "LA_kwDOBN0Z8c7vjPk8",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-subinterpreters",
          "name": "topic-subinterpreters",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "ZeroIntensity",
        "id": 49501366,
        "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
        "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ZeroIntensity",
        "html_url": "https://github.com/ZeroIntensity",
        "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
        "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
        "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
        "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
        "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
        "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "ZeroIntensity",
          "id": 49501366,
          "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
          "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ZeroIntensity",
          "html_url": "https://github.com/ZeroIntensity",
          "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
          "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
          "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
          "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
          "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
          "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2024-10-26T19:10:23Z",
      "updated_at": "2024-10-27T02:52:56Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Crash report\n\n### What happened?\n\n(Found while investigating a fix for #125920.)\n\nSubinterpreters that are running in a different thread can still be running upon the finalization of the main interpreter, depending on what the thread was doing. Take the following script:\n\n```py\nfrom threading import Thread\nimport _interpreters\n\n\ndef silly():\n    interp = _interpreters.create()\n    _interpreters.run_string(interp, \"import time; time.sleep(100)\")\n\n\nif __name__ == \"__main__\":\n    Thread(target=silly).start()\n```\n\nOn 3.13 and 3.14, killing the process with CTRL+C results in an assertion failure:\n\n```\npython: Python/pylifecycle.c:2480: finalize_subinterpreters: Assertion `!_PyInterpreterState_IsRunningMain(interp)' failed.\n```\n\nHowever, if the thread is daemon, then the interpreter fully segfaults:\n\n```py\nfrom threading import Thread\nimport _interpreters\n\n\ndef silly():\n    interp = _interpreters.create()\n    _interpreters.run_string(interp, \"import time; time.sleep(100)\")\n\n\nif __name__ == \"__main__\":\n    Thread(target=silly, daemon=True).start()\n```\n\nI'm going to investigate possible fixes.\n\ncc @ericsnowcurrently\n\n### CPython versions tested on:\n\n3.13, CPython main branch\n\n### Operating systems tested on:\n\nLinux\n\n### Output from running 'python -VV' on the command line:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-126026\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/126016/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/126016/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/125904",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/125904/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/125904/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/125904/events",
      "html_url": "https://github.com/python/cpython/issues/125904",
      "id": 2610044285,
      "node_id": "I_kwDOBN0Z8c6bkh19",
      "number": 125904,
      "title": "MRO summary description in tutorial still says depth-first",
      "user": {
        "login": "drewarnett",
        "id": 15134749,
        "node_id": "MDQ6VXNlcjE1MTM0NzQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/15134749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/drewarnett",
        "html_url": "https://github.com/drewarnett",
        "followers_url": "https://api.github.com/users/drewarnett/followers",
        "following_url": "https://api.github.com/users/drewarnett/following{/other_user}",
        "gists_url": "https://api.github.com/users/drewarnett/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/drewarnett/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/drewarnett/subscriptions",
        "organizations_url": "https://api.github.com/users/drewarnett/orgs",
        "repos_url": "https://api.github.com/users/drewarnett/repos",
        "events_url": "https://api.github.com/users/drewarnett/events{/privacy}",
        "received_events_url": "https://api.github.com/users/drewarnett/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2024-10-23T23:34:10Z",
      "updated_at": "2024-11-06T08:29:36Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Documentation\r\n\r\nTutorial - Classes chapter - Multiple Inheritance section has a summary description of MRO which\r\nstill says depth first.  That applied to classic Python2 (old) classes.\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-125905\n* gh-125906\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/125904/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/125904/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/125889",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/125889/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/125889/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/125889/events",
      "html_url": "https://github.com/python/cpython/issues/125889",
      "id": 2609270112,
      "node_id": "I_kwDOBN0Z8c6bhk1g",
      "number": 125889,
      "title": "python versions of bisect_right and bisect_left can fail guarantees",
      "user": {
        "login": "mike-neergaard",
        "id": 11297928,
        "node_id": "MDQ6VXNlcjExMjk3OTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11297928?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mike-neergaard",
        "html_url": "https://github.com/mike-neergaard",
        "followers_url": "https://api.github.com/users/mike-neergaard/followers",
        "following_url": "https://api.github.com/users/mike-neergaard/following{/other_user}",
        "gists_url": "https://api.github.com/users/mike-neergaard/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mike-neergaard/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mike-neergaard/subscriptions",
        "organizations_url": "https://api.github.com/users/mike-neergaard/orgs",
        "repos_url": "https://api.github.com/users/mike-neergaard/repos",
        "events_url": "https://api.github.com/users/mike-neergaard/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mike-neergaard/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018672955,
          "node_id": "LA_kwDOBN0Z8c7viBU7",
          "url": "https://api.github.com/repos/python/cpython/labels/extension-modules",
          "name": "extension-modules",
          "color": "09fc59",
          "default": false,
          "description": "C modules in the Modules dir"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "rhettinger",
        "id": 1623689,
        "node_id": "MDQ6VXNlcjE2MjM2ODk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1623689?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rhettinger",
        "html_url": "https://github.com/rhettinger",
        "followers_url": "https://api.github.com/users/rhettinger/followers",
        "following_url": "https://api.github.com/users/rhettinger/following{/other_user}",
        "gists_url": "https://api.github.com/users/rhettinger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rhettinger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rhettinger/subscriptions",
        "organizations_url": "https://api.github.com/users/rhettinger/orgs",
        "repos_url": "https://api.github.com/users/rhettinger/repos",
        "events_url": "https://api.github.com/users/rhettinger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rhettinger/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "rhettinger",
          "id": 1623689,
          "node_id": "MDQ6VXNlcjE2MjM2ODk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1623689?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rhettinger",
          "html_url": "https://github.com/rhettinger",
          "followers_url": "https://api.github.com/users/rhettinger/followers",
          "following_url": "https://api.github.com/users/rhettinger/following{/other_user}",
          "gists_url": "https://api.github.com/users/rhettinger/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rhettinger/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rhettinger/subscriptions",
          "organizations_url": "https://api.github.com/users/rhettinger/orgs",
          "repos_url": "https://api.github.com/users/rhettinger/repos",
          "events_url": "https://api.github.com/users/rhettinger/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rhettinger/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 21,
      "created_at": "2024-10-23T17:00:36Z",
      "updated_at": "2024-10-25T15:23:31Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\nThe [documentation](https://docs.python.org/3/library/bisect.html) for [bisect.bisect_right](https://docs.python.org/3/library/bisect.html#bisect.bisect_right) and [bisect.bisect_left]( https://docs.python.org/3/library/bisect.html#bisect.bisect_left) states in both cases that\r\n>The returned insertion point ip partitions the array a into two slices such that \r\n>all(elem <= x for elem in a[lo : ip]) is true for the left slice and \r\n>all(elem > x for elem in a[ip : hi]) is true for the right slice.\r\n\r\nBut in the python version of bisect, that guarantee can fail: \r\n```python\r\nimport sys\r\nimport _bisect as c_bisect\r\nsys.modules['_bisect'] = None\r\nimport bisect as py_bisect\r\n\r\ndef check_guarantees(bisect_func, a, x, lo, hi):\r\n    ip = bisect_func(a, x, lo, hi)\r\n    check_pass = True \r\n    if not all(elem <= x for elem in a[lo : ip]): \r\n        print(\"\\tFAIL. Elements of\",a[lo:ip],\" are not <=\",x)\r\n        check_pass = False\r\n    if not all(elem > x for elem in a[ip : hi]):\r\n        print(\"\\tFAIL. Elements of\",a[ip:hi],\" are not >\",x)\r\n        check_pass = False\r\n    if  check_pass: print(\"\\tOk\")\r\n\r\n#print(c_bisect.bisect_right) # <built-in function bisect_right>\r\n#print(py_bisect.bisect_right) # <function bisect_right at 0x0000023164AE7C40>\r\n\r\na = [0,1,2,3,4]\r\nx = 8\r\nlo = 3\r\nhi = -1\r\n\r\nprint(\"bisect_left from C\")\r\ncheck_guarantees(c_bisect.bisect_left, a, x, lo, hi)\r\n\r\nprint(\"bisect_left from python\")\r\ncheck_guarantees(py_bisect.bisect_left, a, x, lo, hi)\r\n\r\nprint(\"bisect_right from C\")\r\ncheck_guarantees(c_bisect.bisect_right, a, x, lo, hi)\r\n\r\nprint(\"bisect_right from python\")\r\ncheck_guarantees(py_bisect.bisect_right, a, x, lo, hi)\r\n```\r\n [Attempt this online](https://ato.pxeger.com/run?1=lVRLbsIwFNx05VWP8BQWEMkgfmqrCJAQAqlS1W66owi5qUMsjB3FjhTO0g2b9lA9TV9IwqdQlXoTv3hmPJPn-P0zWttQq83mI7FB_e7r6lqsIh1bMGtDiun8VRjuW2AG_GJOcLmx0m-J5GZaLV5WZ9CHR614SdzzonVJJG88AD_k_nK-SFjMlOXc1PLFeZAonwKjkFKQmkIoXI8ADhGh9AGodoTZQnLNiBmD0Oc44ZAzA1AaPUhZ45KvoNeHFAIdw7YSCthUavBwh5nr5ZRsRLFQtua82Mnw_qEBYwRzZQ3owKEZw0M8dYDFfCvf6zs0dXfsIy8TJg0_62VwYgVzephoVsT-24mIPIQfOBlcaORgydvv8bR0XEIqeV02u1F8-FgsQutCBXqviZC2jo6zXlihFRxCBqXAruunCmeJwCw002Y22p3WTXc4vh11mwNCGLqfNmmLtmmHdmckxfqOYN_60CGhwEe9RUiRolCUPLAQxHoFI8x0cuJ-hsvgP47e74r5T3NO9iTyBbp59sutbvGXa_7D7Dnl_GIo7ofynvgG)\r\nOutputs :\r\n  \r\n```\r\nbisect_left from C\r\n\tOk\r\nbisect_left from python\r\n\tFAIL. Elements of [3]  are not > 8\r\nbisect_right from C\r\n\tOk\r\nbisect_right from python\r\n\tFAIL. Elements of [3]  are not > 8\r\n\r\n```\r\n I think there is an extra check in the C version for hi < 0.  \r\n\r\n\r\n### CPython versions tested on:\r\n\r\n3.13\r\n\r\n### Operating systems tested on:\r\n\r\nLinux\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-125915\r\n<!-- /gh-linked-prs -->",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/125889/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/125889/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/125866",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/125866/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/125866/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/125866/events",
      "html_url": "https://github.com/python/cpython/issues/125866",
      "id": 2607065453,
      "node_id": "I_kwDOBN0Z8c6bZKlt",
      "number": 125866,
      "title": "Improve file URI ergonomics in `urllib.request`",
      "user": {
        "login": "barneygale",
        "id": 960340,
        "node_id": "MDQ6VXNlcjk2MDM0MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/barneygale",
        "html_url": "https://github.com/barneygale",
        "followers_url": "https://api.github.com/users/barneygale/followers",
        "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
        "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
        "organizations_url": "https://api.github.com/users/barneygale/orgs",
        "repos_url": "https://api.github.com/users/barneygale/repos",
        "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
        "received_events_url": "https://api.github.com/users/barneygale/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 9,
      "created_at": "2024-10-23T03:23:32Z",
      "updated_at": "2024-12-03T19:35:54Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\nI request that we make [`pathname2url`](https://docs.python.org/3/library/urllib.request.html#urllib.request.pathname2url) and [`url2pathname`](https://docs.python.org/3/library/urllib.request.html#urllib.request.url2pathname) easier to use:\r\n\r\n- `pathname2url()` is made to accept an optional *include_scheme* argument that sticks `file:` on the front when true\r\n- `url2pathname()` is made to strip any `file:` prefix from its argument.\r\n\r\nI think this would go a long way towards making these functions usable, and allow us to remove the scary \"This does not accept/produce a complete URL\" warnings from the docs.\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-125993\r\n* gh-126144\r\n* gh-126145\r\n* gh-127138\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/125866/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/125866/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/125741",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/125741/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/125741/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/125741/events",
      "html_url": "https://github.com/python/cpython/issues/125741",
      "id": 2599783544,
      "node_id": "I_kwDOBN0Z8c6a9Yx4",
      "number": 125741,
      "title": "Update check_generated_files CI to use our published container image",
      "user": {
        "login": "corona10",
        "id": 5110323,
        "node_id": "MDQ6VXNlcjUxMTAzMjM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5110323?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/corona10",
        "html_url": "https://github.com/corona10",
        "followers_url": "https://api.github.com/users/corona10/followers",
        "following_url": "https://api.github.com/users/corona10/following{/other_user}",
        "gists_url": "https://api.github.com/users/corona10/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/corona10/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/corona10/subscriptions",
        "organizations_url": "https://api.github.com/users/corona10/orgs",
        "repos_url": "https://api.github.com/users/corona10/repos",
        "events_url": "https://api.github.com/users/corona10/events{/privacy}",
        "received_events_url": "https://api.github.com/users/corona10/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 7527065505,
          "node_id": "LA_kwDOBN0Z8c8AAAABwKXnoQ",
          "url": "https://api.github.com/repos/python/cpython/labels/infra",
          "name": "infra",
          "color": "5319e7",
          "default": false,
          "description": "CI, GitHub Actions, buildbots, Dependabot, etc."
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "corona10",
        "id": 5110323,
        "node_id": "MDQ6VXNlcjUxMTAzMjM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5110323?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/corona10",
        "html_url": "https://github.com/corona10",
        "followers_url": "https://api.github.com/users/corona10/followers",
        "following_url": "https://api.github.com/users/corona10/following{/other_user}",
        "gists_url": "https://api.github.com/users/corona10/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/corona10/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/corona10/subscriptions",
        "organizations_url": "https://api.github.com/users/corona10/orgs",
        "repos_url": "https://api.github.com/users/corona10/repos",
        "events_url": "https://api.github.com/users/corona10/events{/privacy}",
        "received_events_url": "https://api.github.com/users/corona10/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "corona10",
          "id": 5110323,
          "node_id": "MDQ6VXNlcjUxMTAzMjM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/5110323?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/corona10",
          "html_url": "https://github.com/corona10",
          "followers_url": "https://api.github.com/users/corona10/followers",
          "following_url": "https://api.github.com/users/corona10/following{/other_user}",
          "gists_url": "https://api.github.com/users/corona10/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/corona10/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/corona10/subscriptions",
          "organizations_url": "https://api.github.com/users/corona10/orgs",
          "repos_url": "https://api.github.com/users/corona10/repos",
          "events_url": "https://api.github.com/users/corona10/events{/privacy}",
          "received_events_url": "https://api.github.com/users/corona10/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2024-10-20T00:46:26Z",
      "updated_at": "2024-10-21T15:16:13Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "We can do this through https://docs.github.com/en/actions/writing-workflows/choosing-where-your-workflow-runs/running-jobs-in-a-container, and it is less painful to make both image environments the same.\r\n\r\n\r\nSee: https://github.com/python/cpython/pull/122566#pullrequestreview-2379858448\r\ncc @erlend-aasland @hugovk @Damien-Chen \n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-125744\n* gh-125759\n* gh-125760\n* gh-125772\n* gh-125779\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "corona10",
        "id": 5110323,
        "node_id": "MDQ6VXNlcjUxMTAzMjM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5110323?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/corona10",
        "html_url": "https://github.com/corona10",
        "followers_url": "https://api.github.com/users/corona10/followers",
        "following_url": "https://api.github.com/users/corona10/following{/other_user}",
        "gists_url": "https://api.github.com/users/corona10/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/corona10/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/corona10/subscriptions",
        "organizations_url": "https://api.github.com/users/corona10/orgs",
        "repos_url": "https://api.github.com/users/corona10/repos",
        "events_url": "https://api.github.com/users/corona10/events{/privacy}",
        "received_events_url": "https://api.github.com/users/corona10/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/125741/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/125741/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/125714",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/125714/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/125714/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/125714/events",
      "html_url": "https://github.com/python/cpython/issues/125714",
      "id": 2598405041,
      "node_id": "I_kwDOBN0Z8c6a4IOx",
      "number": 125714,
      "title": "`_pickle.PicklingError` on 3.14.0a1+ where it didn't before due to the start method change from fork to forkserver",
      "user": {
        "login": "progval",
        "id": 406946,
        "node_id": "MDQ6VXNlcjQwNjk0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/406946?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/progval",
        "html_url": "https://github.com/progval",
        "followers_url": "https://api.github.com/users/progval/followers",
        "following_url": "https://api.github.com/users/progval/following{/other_user}",
        "gists_url": "https://api.github.com/users/progval/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/progval/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/progval/subscriptions",
        "organizations_url": "https://api.github.com/users/progval/orgs",
        "repos_url": "https://api.github.com/users/progval/repos",
        "events_url": "https://api.github.com/users/progval/events{/privacy}",
        "received_events_url": "https://api.github.com/users/progval/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4204725259,
          "node_id": "LA_kwDOBN0Z8c76nwQL",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-multiprocessing",
          "name": "topic-multiprocessing",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "gpshead",
        "id": 68491,
        "node_id": "MDQ6VXNlcjY4NDkx",
        "avatar_url": "https://avatars.githubusercontent.com/u/68491?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gpshead",
        "html_url": "https://github.com/gpshead",
        "followers_url": "https://api.github.com/users/gpshead/followers",
        "following_url": "https://api.github.com/users/gpshead/following{/other_user}",
        "gists_url": "https://api.github.com/users/gpshead/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gpshead/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gpshead/subscriptions",
        "organizations_url": "https://api.github.com/users/gpshead/orgs",
        "repos_url": "https://api.github.com/users/gpshead/repos",
        "events_url": "https://api.github.com/users/gpshead/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gpshead/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "gpshead",
          "id": 68491,
          "node_id": "MDQ6VXNlcjY4NDkx",
          "avatar_url": "https://avatars.githubusercontent.com/u/68491?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/gpshead",
          "html_url": "https://github.com/gpshead",
          "followers_url": "https://api.github.com/users/gpshead/followers",
          "following_url": "https://api.github.com/users/gpshead/following{/other_user}",
          "gists_url": "https://api.github.com/users/gpshead/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/gpshead/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/gpshead/subscriptions",
          "organizations_url": "https://api.github.com/users/gpshead/orgs",
          "repos_url": "https://api.github.com/users/gpshead/repos",
          "events_url": "https://api.github.com/users/gpshead/events{/privacy}",
          "received_events_url": "https://api.github.com/users/gpshead/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 11,
      "created_at": "2024-10-18T21:20:28Z",
      "updated_at": "2024-11-14T23:12:37Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nCode dating back to Python 2 had to do `super(OwnClassName, self)` instead of `super()`. Modules designed to be reloadable could not use the `super(OwnClassName, self)` syntax in their non-constructor method, as `OwnClassName` was re-binded to the class of the new module, rather than the class that had the name when the object was constructed (which differs when the object was constructed before a reload). Therefore, such modules defined classes like this:\n\n```python\nclass Subclass(Superclass):\n    def __init__(self):\n        self.__parent = super(Subclass, self)\n\n    def method1(self, arg):\n        self.__parent.method1(arg + 2)\n```\n\nPython 3.14.0a1+ breaks existing code using this trick on subclasses of `multiprocessing.Process`.\n\nFor example:\n\n```python\nimport multiprocessing\n\nclass MyProcess(multiprocessing.Process):\n    def __init__(self, target=None, args=(), kwargs={}):\n        self.__parent = super(MyProcess, self)\n        self.__parent.__init__(target=target, args=args, kwargs=kwargs)\n\n    def run(self):\n        self.__parent.run()\n    \nif __name__ == \"__main__\":\n    p = MyProcess()\n    p.start()\n```\n\nworked fine on previous versions, but now errors with:\n\n```\nTraceback (most recent call last):\n  File \"/home/dev-irc/Limnoria/repro.py\", line 12, in <module>\n    p.start()\n    ~~~~~~~^^\n  File \"/home/dev-irc/.local-py-git/lib/python3.14/multiprocessing/process.py\", line 121, in start\n    self._popen = self._Popen(self)\n                  ~~~~~~~~~~~^^^^^^\n  File \"/home/dev-irc/.local-py-git/lib/python3.14/multiprocessing/context.py\", line 224, in _Popen\n    return _default_context.get_context().Process._Popen(process_obj)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^\n  File \"/home/dev-irc/.local-py-git/lib/python3.14/multiprocessing/context.py\", line 300, in _Popen\n    return Popen(process_obj)\n  File \"/home/dev-irc/.local-py-git/lib/python3.14/multiprocessing/popen_forkserver.py\", line 35, in __init__\n    super().__init__(process_obj)\n    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^\n  File \"/home/dev-irc/.local-py-git/lib/python3.14/multiprocessing/popen_fork.py\", line 20, in __init__\n    self._launch(process_obj)\n    ~~~~~~~~~~~~^^^^^^^^^^^^^\n  File \"/home/dev-irc/.local-py-git/lib/python3.14/multiprocessing/popen_forkserver.py\", line 47, in _launch\n    reduction.dump(process_obj, buf)\n    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"/home/dev-irc/.local-py-git/lib/python3.14/multiprocessing/reduction.py\", line 60, in dump\n    ForkingPickler(file, protocol).dump(obj)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^\n_pickle.PicklingError: first argument to __newobj__() must be <class 'super'>, not <class '__main__.MyProcess'>\nwhen serializing super object\nwhen serializing dict item '_MyProcess__parent'\nwhen serializing MyProcess state\nwhen serializing MyProcess object\n```\n\nFull version string: `Python 3.14.0a1+ (heads/main:c8fd4b12e3d, Oct 18 2024, 22:51:39) [GCC 12.2.0] on linux`\n\n### CPython versions tested on:\n\n3.14, CPython main branch\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-125750\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/125714/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/125714/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/125666",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/125666/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/125666/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/125666/events",
      "html_url": "https://github.com/python/cpython/issues/125666",
      "id": 2595934485,
      "node_id": "I_kwDOBN0Z8c6autEV",
      "number": 125666,
      "title": "PyREPL exits the interpreter on specific input",
      "user": {
        "login": "warsaw",
        "id": 210184,
        "node_id": "MDQ6VXNlcjIxMDE4NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/210184?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/warsaw",
        "html_url": "https://github.com/warsaw",
        "followers_url": "https://api.github.com/users/warsaw/followers",
        "following_url": "https://api.github.com/users/warsaw/following{/other_user}",
        "gists_url": "https://api.github.com/users/warsaw/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/warsaw/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/warsaw/subscriptions",
        "organizations_url": "https://api.github.com/users/warsaw/orgs",
        "repos_url": "https://api.github.com/users/warsaw/repos",
        "events_url": "https://api.github.com/users/warsaw/events{/privacy}",
        "received_events_url": "https://api.github.com/users/warsaw/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 6933214501,
          "node_id": "LA_kwDOBN0Z8c8AAAABnUB1JQ",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-repl",
          "name": "topic-repl",
          "color": "0052cc",
          "default": false,
          "description": "Related to the interactive shell"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2024-10-17T22:58:24Z",
      "updated_at": "2024-12-24T14:04:24Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nPlaying with the Python 3.13.0 interpreter installed from brew on macOS 14.7 in a Terminal window.\n\nI entered the repl and typed\n\n```python\n>>> import math\n>>> math.tau\n6.283185307179586\n```\n\nThen I hit ctrl-P to get the last line and hit SPC, `/`, `2`.  Oddly, the SPC got eaten and the slash ended up right next to the `u`.  I didn't notice that until I hit Enter, at which point the exception occurred and exited the interpreter.\n\nUnfortunately, I cannot reproduce it again.\n\n```python\n% python3\nPython 3.13.0 (main, Oct  7 2024, 05:02:14) [Clang 15.0.0 (clang-1500.3.9.4)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import math\n>>> math.tau\n6.283185307179586\n>>> math.tau/ 2\nSyntaxError: source code string cannot contain null bytes (<python-input-2>)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<frozen runpy>\", line 198, in _run_module_as_main\n  File \"<frozen runpy>\", line 88, in _run_code\n  File \"/usr/local/Cellar/python@3.13/3.13.0_1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/_pyrepl/__main__.py\", line 6, in <module>\n    __pyrepl_interactive_console()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"/usr/local/Cellar/python@3.13/3.13.0_1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/_pyrepl/main.py\", line 59, in interactive_console\n    run_multiline_interactive_console(console)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^\n  File \"/usr/local/Cellar/python@3.13/3.13.0_1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/_pyrepl/simple_interact.py\", line 160, in run_multiline_interactive_console\n    more = console.push(_strip_final_indent(statement), filename=input_name, _symbol=\"single\")  # type: ignore[call-arg]\n  File \"/usr/local/Cellar/python@3.13/3.13.0_1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/code.py\", line 313, in push\n    more = self.runsource(source, filename, symbol=_symbol)\n  File \"/usr/local/Cellar/python@3.13/3.13.0_1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/_pyrepl/console.py\", line 179, in runsource\n    self.showsyntaxerror(filename, source=source)\n    ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/Cellar/python@3.13/3.13.0_1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/_pyrepl/console.py\", line 165, in showsyntaxerror\n    super().showsyntaxerror(filename=filename, **kwargs)\n    ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/Cellar/python@3.13/3.13.0_1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/code.py\", line 115, in showsyntaxerror\n    self._showtraceback(typ, value, None, source)\n    ~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/Cellar/python@3.13/3.13.0_1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/code.py\", line 140, in _showtraceback\n    and not value.text and len(lines) >= value.lineno):\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: '>=' not supported between instances of 'int' and 'NoneType'\n```\n\n\n### CPython versions tested on:\n\n3.13\n\n### Operating systems tested on:\n\nmacOS\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-125732\n* gh-126023\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/125666/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/125666/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/125620",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/125620/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/125620/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/125620/events",
      "html_url": "https://github.com/python/cpython/issues/125620",
      "id": 2593125838,
      "node_id": "I_kwDOBN0Z8c6aj_XO",
      "number": 125620,
      "title": "test_resource_tracker_sigkill fails on NetBSD: AssertionError for warning count in test_multiprocessing_fork",
      "user": {
        "login": "furkanonder",
        "id": 24194934,
        "node_id": "MDQ6VXNlcjI0MTk0OTM0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24194934?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furkanonder",
        "html_url": "https://github.com/furkanonder",
        "followers_url": "https://api.github.com/users/furkanonder/followers",
        "following_url": "https://api.github.com/users/furkanonder/following{/other_user}",
        "gists_url": "https://api.github.com/users/furkanonder/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/furkanonder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/furkanonder/subscriptions",
        "organizations_url": "https://api.github.com/users/furkanonder/orgs",
        "repos_url": "https://api.github.com/users/furkanonder/repos",
        "events_url": "https://api.github.com/users/furkanonder/events{/privacy}",
        "received_events_url": "https://api.github.com/users/furkanonder/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-10-16T21:46:15Z",
      "updated_at": "2024-10-18T02:08:54Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\n```sh\n-bash-5.2$ ./python -m test test_multiprocessing_fork.test_misc -m test_resource_tracker_sigkill\n```\n```sh\nUsing random seed: 1947163462\n0:00:00 load avg: 0.16 Run 1 test sequentially in a single process\n0:00:00 load avg: 0.16 [1/1] test_multiprocessing_fork.test_misc\ntest test_multiprocessing_fork.test_misc failed -- Traceback (most recent call last):\n  File \"/home/blue/cpython/Lib/test/_test_multiprocessing.py\", line 5766, in test_resource_tracker_sigkill\n    self.check_resource_tracker_death(signal.SIGKILL, True)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/blue/cpython/Lib/test/_test_multiprocessing.py\", line 5748, in check_resource_tracker_death\n    self.assertEqual(len(all_warn), 1)\n    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\nAssertionError: 0 != 1\n\ntest_multiprocessing_fork.test_misc failed (1 failure) in 3 min\n\n== Tests result: FAILURE ==\n\n1 test failed:\n    test_multiprocessing_fork.test_misc\n```\nOS:  NetBSD 10.0\n\n### CPython versions tested on:\n\nCPython main branch\n\n### Operating systems tested on:\n\nOther\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-125621\n* gh-125624\n* gh-125627\n* gh-125628\n* gh-125672\n* gh-125673\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/125620/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/125620/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/125610",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/125610/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/125610/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/125610/events",
      "html_url": "https://github.com/python/cpython/issues/125610",
      "id": 2592791034,
      "node_id": "I_kwDOBN0Z8c6aitn6",
      "number": 125610,
      "title": "Bad specialization of `STORE_ATTR_INSTANCE_VALUE` with `obj.__dict__`",
      "user": {
        "login": "colesbury",
        "id": 655866,
        "node_id": "MDQ6VXNlcjY1NTg2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/colesbury",
        "html_url": "https://github.com/colesbury",
        "followers_url": "https://api.github.com/users/colesbury/followers",
        "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
        "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
        "organizations_url": "https://api.github.com/users/colesbury/orgs",
        "repos_url": "https://api.github.com/users/colesbury/repos",
        "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
        "received_events_url": "https://api.github.com/users/colesbury/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-10-16T18:59:47Z",
      "updated_at": "2024-12-06T15:48:40Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Consider:\r\n\r\n```python\r\nclass MyObject: pass\r\n\r\ndef func():\r\n    o = MyObject()\r\n    o.__dict__\r\n    for _ in range(100):\r\n        o.foo = \"bar\"\r\n        o.baz = \"qux\"\r\n\r\nfor _ in range(100):\r\n    func()\r\n```\r\n\r\n```\r\n    opcode[STORE_ATTR_INSTANCE_VALUE].specialization.miss : 20382\r\n    opcode[STORE_ATTR_INSTANCE_VALUE].execution_count : 21167\r\n```\r\n\r\nThe `STORE_ATTR_INSTANCE_VALUE` has a guard `_GUARD_DORV_NO_DICT` that ensures that the object does not have a managed dictionary:\r\nhttps://github.com/python/cpython/blob/760872efecb95017db8e38a8eda614bf23d2a22c/Python/bytecodes.c#L2269\r\n\r\nHowever, the specializer for `STORE_ATTR_INSTANCE_VALUE` does not take that into account. It only checks that the inline values are valid:\r\n\r\nhttps://github.com/python/cpython/blob/760872efecb95017db8e38a8eda614bf23d2a22c/Python/specialize.c#L867-L886\r\n\r\nI'm not sure if we should change the guard or change `specialize.c`\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-125612\n* gh-127698\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/125610/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/125610/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/125608",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/125608/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/125608/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/125608/events",
      "html_url": "https://github.com/python/cpython/issues/125608",
      "id": 2592698882,
      "node_id": "I_kwDOBN0Z8c6aiXIC",
      "number": 125608,
      "title": "Python dictionary watchers no longer trigger when an object's attributes change",
      "user": {
        "login": "colesbury",
        "id": 655866,
        "node_id": "MDQ6VXNlcjY1NTg2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/colesbury",
        "html_url": "https://github.com/colesbury",
        "followers_url": "https://api.github.com/users/colesbury/followers",
        "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
        "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
        "organizations_url": "https://api.github.com/users/colesbury/orgs",
        "repos_url": "https://api.github.com/users/colesbury/repos",
        "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
        "received_events_url": "https://api.github.com/users/colesbury/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-10-16T18:22:23Z",
      "updated_at": "2024-10-25T14:10:38Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\nHere's an example function using [`test_capi/test_watchers.py`](https://github.com/python/cpython/blob/main/Lib/test/test_capi/test_watchers.py) that passes in 3.12, but fails in 3.13 and 3.14:\n\n```python\n    def test_watch_obj_dict(self):\n        o = MyClass()\n        with self.watcher() as wid:\n            self.watch(wid, o.__dict__)\n            o.foo = \"bar\"\n            self.assert_events([\"new:foo:bar\"])  # fails in 3.13+ \n```\n\nThe dictionary watcher doesn't fire in 3.13+ even though the `o.__dict__` changes when `o.foo` is set to `\"bar\"`. The problem is specific to inline values -- our code paths for inline values do not trigger dictionary watcher events. If the object does not use inline values, then the watcher events fire as expected.\n\nThis is a problem for [PyTorch Dyanmo](https://pytorch.org/docs/stable/torch.compiler.html) because it uses dictionary watchers for compiler guards.\n\ncc @williamwen42 @markshannon \n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-125611\n* gh-125982\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/125608/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/125608/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/125522",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/125522/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/125522/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/125522/events",
      "html_url": "https://github.com/python/cpython/issues/125522",
      "id": 2588847272,
      "node_id": "I_kwDOBN0Z8c6aTqyo",
      "number": 125522,
      "title": "avoid bare except: in stdlib",
      "user": {
        "login": "iritkatriel",
        "id": 1055913,
        "node_id": "MDQ6VXNlcjEwNTU5MTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1055913?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/iritkatriel",
        "html_url": "https://github.com/iritkatriel",
        "followers_url": "https://api.github.com/users/iritkatriel/followers",
        "following_url": "https://api.github.com/users/iritkatriel/following{/other_user}",
        "gists_url": "https://api.github.com/users/iritkatriel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/iritkatriel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/iritkatriel/subscriptions",
        "organizations_url": "https://api.github.com/users/iritkatriel/orgs",
        "repos_url": "https://api.github.com/users/iritkatriel/repos",
        "events_url": "https://api.github.com/users/iritkatriel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/iritkatriel/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-10-15T13:48:55Z",
      "updated_at": "2024-11-02T08:27:25Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "\r\nBare excepts are best avoided, this issue is to reduce their use in the stdlib. It is not the intention to blindly replace them by `except BaseException:`, or to religiously purge all of them, but just to review them and avoid where it's feasible to do so.\r\n\r\n(see also https://github.com/python/cpython/issues/125514).\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-125523\n* gh-125544\n* gh-125726\n* gh-125727\n* gh-126321\n* gh-126327\n* gh-126328\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/125522/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/125522/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/125521",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/125521/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/125521/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/125521/events",
      "html_url": "https://github.com/python/cpython/issues/125521",
      "id": 2588743834,
      "node_id": "I_kwDOBN0Z8c6aTRia",
      "number": 125521,
      "title": "Strange warning and failure of JIT workflow on `aarch64-unknown-linux-gnu/gcc (Debug)`",
      "user": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 7018075156,
          "node_id": "LA_kwDOBN0Z8c8AAAABok9UFA",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-JIT",
          "name": "topic-JIT",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "markshannon",
          "id": 9448417,
          "node_id": "MDQ6VXNlcjk0NDg0MTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/markshannon",
          "html_url": "https://github.com/markshannon",
          "followers_url": "https://api.github.com/users/markshannon/followers",
          "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
          "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
          "organizations_url": "https://api.github.com/users/markshannon/orgs",
          "repos_url": "https://api.github.com/users/markshannon/repos",
          "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/markshannon/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2024-10-15T13:13:21Z",
      "updated_at": "2024-11-08T07:08:42Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\nLink: https://github.com/python/cpython/actions/runs/11333284963/job/31517441366#step:8:9113\n\nReport:\n\n```\n Python/generated_cases.c.h: In function \u2018_PyEval_EvalFrameDefault\u2019:\nPython/generated_cases.c.h:4738:46: warning: this statement may fall through [-Wimplicit-fallthrough=]\n 4738 |         TARGET(INSTRUMENTED_LOAD_SUPER_ATTR) {\n      |                                              ^\nIn file included from Python/ceval.c:679:\nPython/ceval_macros.h:77:22: note: here\n   77 | #  define TARGET(op) case op: TARGET_##op:\n      |                      ^~~~\nPython/generated_cases.c.h:4752:9: note: in expansion of macro \u2018TARGET\u2019\n 4752 |         TARGET(INSTRUMENTED_POP_JUMP_IF_FALSE) {\n      |         ^~~~~~\nPython/generated_cases.c.h:5049:34: warning: this statement may fall through [-Wimplicit-fallthrough=]\n 5049 |         TARGET(INTERPRETER_EXIT) {\n      |                                  ^\nPython/ceval_macros.h:77:22: note: here\n   77 | #  define TARGET(op) case op: TARGET_##op:\n      |                      ^~~~\nPython/generated_cases.c.h:5066:9: note: in expansion of macro \u2018TARGET\u2019\n 5066 |         TARGET(IS_OP) {\n      |         ^~~~~~\nPython/generated_cases.c.h:6817:31: warning: this statement may fall through [-Wimplicit-fallthrough=]\n 6817 |         TARGET(RAISE_VARARGS) {\n      |                               ^\nPython/ceval_macros.h:77:22: note: here\n   77 | #  define TARGET(op) case op: TARGET_##op:\n      |                      ^~~~\nPython/generated_cases.c.h:6842:9: note: in expansion of macro \u2018TARGET\u2019\n 6842 |         TARGET(RERAISE) {\n      |         ^~~~~~\n```\n\nNote that other builds do not have this warning.\n\nThen this job gets canceled due to timeout: \n<img width=\"951\" alt=\"\u0421\u043d\u0438\u043c\u043e\u043a \u044d\u043a\u0440\u0430\u043d\u0430 2024-10-15 \u0432 16 10 58\" src=\"https://github.com/user-attachments/assets/6e2d5ad3-f6c6-4b7b-87b3-8ac17aa89b33\">\n\nThere are several other similar failures due to timeout: https://github.com/python/cpython/actions/runs/11333284963/job/31517441919\n\n<img width=\"1341\" alt=\"\u0421\u043d\u0438\u043c\u043e\u043a \u044d\u043a\u0440\u0430\u043d\u0430 2024-10-15 \u0432 16 12 49\" src=\"https://github.com/user-attachments/assets/3f962504-f609-4553-8aaa-46f64a05baac\">\n\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-125700\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/125521/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/125521/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/125515",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/125515/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/125515/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/125515/events",
      "html_url": "https://github.com/python/cpython/issues/125515",
      "id": 2588584967,
      "node_id": "I_kwDOBN0Z8c6aSqwH",
      "number": 125515,
      "title": "Multiple unused code warnings in `Python/generated_cases.c.h`",
      "user": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "markshannon",
          "id": 9448417,
          "node_id": "MDQ6VXNlcjk0NDg0MTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/markshannon",
          "html_url": "https://github.com/markshannon",
          "followers_url": "https://api.github.com/users/markshannon/followers",
          "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
          "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
          "organizations_url": "https://api.github.com/users/markshannon/orgs",
          "repos_url": "https://api.github.com/users/markshannon/repos",
          "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/markshannon/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-10-15T12:06:34Z",
      "updated_at": "2024-10-18T13:27:32Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\nLink: https://github.com/python/cpython/actions/runs/11333284963/job/31517440086#step:6:1025\n\nReport:\n\n```\n In file included from Python/ceval.c:870:\nPython/generated_cases.c.h:5062:13: warning: code will never be executed [-Wunreachable-code]\n            stack_pointer += -1;\n            ^~~~~~~~~~~~~\nPython/generated_cases.c.h:4748:13: warning: code will never be executed [-Wunreachable-code]\n            stack_pointer += -1;\n            ^~~~~~~~~~~~~\nPython/generated_cases.c.h:803:31: warning: code will never be executed [-Wunreachable-code]\nclang -c -fno-strict-overflow -Wsign-compare -Wunreachable-code -DNDEBUG -g -O3 -Wall    -D_Py_TIER2=1 -D_Py_JIT -flto=thin -std=c11 -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -Wstrict-prototypes -Werror=implicit-function-declaration -fvisibility=hidden -fprofile-instr-generate -I./Include/internal -I./Include/internal/mimalloc  -I. -I./Include    -DPy_BUILD_CORE -o Python/codegen.o Python/codegen.c\n                for (int _i = oparg; --_i >= 0;) {\n                              ^~~~~\nPython/generated_cases.c.h:689:31: warning: code will never be executed [-Wunreachable-code]\n                for (int _i = oparg*2; --_i >= 0;) {\n                              ^~~~~\n```\n\nThis looks like we have two different problems:\n1. stack manipulations are added after `goto` and `return`: https://github.com/python/cpython/blob/cc5a225cdc2a5d4e035dd08d59cef39182c10a6c/Python/generated_cases.c.h#L4747-L4749 and https://github.com/python/cpython/blob/cc5a225cdc2a5d4e035dd08d59cef39182c10a6c/Python/generated_cases.c.h#L5061-L5063\n2. some logical? problem with the loop definition\n\nCC @Fidget-Spinner \n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-125697\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/125515/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/125515/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/125174",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/125174/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/125174/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/125174/events",
      "html_url": "https://github.com/python/cpython/issues/125174",
      "id": 2575317534,
      "node_id": "I_kwDOBN0Z8c6ZgDoe",
      "number": 125174,
      "title": "\"Immortal\" objects aren't immortal and that breaks things.",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "ericsnowcurrently",
          "id": 1152074,
          "node_id": "MDQ6VXNlcjExNTIwNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ericsnowcurrently",
          "html_url": "https://github.com/ericsnowcurrently",
          "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
          "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
          "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
          "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
          "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
          "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 9,
      "created_at": "2024-10-09T09:16:51Z",
      "updated_at": "2024-12-13T14:43:30Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\n[Immortal](https://dictionary.cambridge.org/us/dictionary/english/immortal) objects should live forever. By definition, immortality is a permanent property of an object; if it can loose immortality, then it wasn't immortal in the first place.\r\n\r\nImmortality allows some useful optimizations and safety guarantees that can make CPython faster *and* more robust.\r\n\r\nWhich would be great, if we didn't play fast and loose with immortality.\r\nFor no good reason that I'm aware of there are two functions `_Py_ClearImmortal` and `_Py_SetMortal` that make immortal objects mortal. This is nonsense. We must remove these functions.\r\n\r\nWe have also added `_Py_IsImmortalLoose` because it is too easy for C-extensions \r\nInstead of adding these workarounds, we need to fix this problem as well.\r\n\r\nLet's fix immortality so that we can rely on it and take advantage of it.\r\n\r\n\r\n### CPython versions tested on:\r\n\r\n3.12, 3.13, CPython main branch\r\n\r\n### Operating systems tested on:\r\n\r\nOther\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-125251\n* gh-127797\n* gh-127860\n* gh-127863\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/125174/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/125174/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/125041",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/125041/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/125041/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/125041/events",
      "html_url": "https://github.com/python/cpython/issues/125041",
      "id": 2570255975,
      "node_id": "I_kwDOBN0Z8c6ZMv5n",
      "number": 125041,
      "title": "Re-enable skipped test_zlib tests on s390x hardware acceleration",
      "user": {
        "login": "encukou",
        "id": 302922,
        "node_id": "MDQ6VXNlcjMwMjkyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/encukou",
        "html_url": "https://github.com/encukou",
        "followers_url": "https://api.github.com/users/encukou/followers",
        "following_url": "https://api.github.com/users/encukou/following{/other_user}",
        "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
        "organizations_url": "https://api.github.com/users/encukou/orgs",
        "repos_url": "https://api.github.com/users/encukou/repos",
        "events_url": "https://api.github.com/users/encukou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/encukou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "encukou",
        "id": 302922,
        "node_id": "MDQ6VXNlcjMwMjkyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/encukou",
        "html_url": "https://github.com/encukou",
        "followers_url": "https://api.github.com/users/encukou/followers",
        "following_url": "https://api.github.com/users/encukou/following{/other_user}",
        "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
        "organizations_url": "https://api.github.com/users/encukou/orgs",
        "repos_url": "https://api.github.com/users/encukou/repos",
        "events_url": "https://api.github.com/users/encukou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/encukou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "encukou",
          "id": 302922,
          "node_id": "MDQ6VXNlcjMwMjkyMg==",
          "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/encukou",
          "html_url": "https://github.com/encukou",
          "followers_url": "https://api.github.com/users/encukou/followers",
          "following_url": "https://api.github.com/users/encukou/following{/other_user}",
          "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
          "organizations_url": "https://api.github.com/users/encukou/orgs",
          "repos_url": "https://api.github.com/users/encukou/repos",
          "events_url": "https://api.github.com/users/encukou/events{/privacy}",
          "received_events_url": "https://api.github.com/users/encukou/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-10-07T12:08:47Z",
      "updated_at": "2024-10-16T12:39:07Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Some variants of the s390x platform have instructions for hardware-accelerated deflate compression. With HW acceleration, compressed byte stream can be different from the software implementation in zlib. (It still decompresses to the original of course.)\r\nThe zlib-ng library can be built to use this, and CPython can be built with zlib-ng.\r\n\r\nIn 2022 (#90781, GH-31096), two tests that failed on s390x were unconditionally skipped. IMO, it would be better if we only skip checking the compressed stream, but *do* check the round-trip result.\r\nTesting should be a bit easier now that a buildbot worker has the HW-accelerated zlib.\r\n\r\nIn #107535, the `skip_on_s390x` variable was separated from the comment that explains it.\r\nI propose to name the skip condition `HW_ACCELERATED` rather than `skip_on_s390x` -- theoretically, other platforms might need this in the future.\r\n\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-125042\n* gh-125526\n* gh-125527\n* gh-125577\n* gh-125585\n* gh-125587\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/125041/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/125041/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/124855",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/124855/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/124855/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/124855/events",
      "html_url": "https://github.com/python/cpython/issues/124855",
      "id": 2559704826,
      "node_id": "I_kwDOBN0Z8c6Ykf76",
      "number": 124855,
      "title": "Don't allow the JIT and perf support to be active at the same time",
      "user": {
        "login": "pablogsal",
        "id": 11718525,
        "node_id": "MDQ6VXNlcjExNzE4NTI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablogsal",
        "html_url": "https://github.com/pablogsal",
        "followers_url": "https://api.github.com/users/pablogsal/followers",
        "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
        "organizations_url": "https://api.github.com/users/pablogsal/orgs",
        "repos_url": "https://api.github.com/users/pablogsal/repos",
        "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pablogsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 7018075156,
          "node_id": "LA_kwDOBN0Z8c8AAAABok9UFA",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-JIT",
          "name": "topic-JIT",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-10-01T16:25:01Z",
      "updated_at": "2024-10-30T03:37:56Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Both modes are sadly incompatible so we should not allow the user to use both at the same time\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124856\n* gh-126163\n* gh-126166\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/124855/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/124855/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/124787",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/124787/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/124787/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/124787/events",
      "html_url": "https://github.com/python/cpython/issues/124787",
      "id": 2556806554,
      "node_id": "I_kwDOBN0Z8c6YZcWa",
      "number": 124787,
      "title": "TypeAliasType with should also raise an error if non-default type parameter follows default type parameter",
      "user": {
        "login": "Daraan",
        "id": 27899926,
        "node_id": "MDQ6VXNlcjI3ODk5OTI2",
        "avatar_url": "https://avatars.githubusercontent.com/u/27899926?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Daraan",
        "html_url": "https://github.com/Daraan",
        "followers_url": "https://api.github.com/users/Daraan/followers",
        "following_url": "https://api.github.com/users/Daraan/following{/other_user}",
        "gists_url": "https://api.github.com/users/Daraan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Daraan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Daraan/subscriptions",
        "organizations_url": "https://api.github.com/users/Daraan/orgs",
        "repos_url": "https://api.github.com/users/Daraan/repos",
        "events_url": "https://api.github.com/users/Daraan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Daraan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4030784939,
          "node_id": "LA_kwDOBN0Z8c7wQOWr",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-typing",
          "name": "topic-typing",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 7,
      "created_at": "2024-09-30T14:07:36Z",
      "updated_at": "2024-11-25T11:14:21Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nThe following statement is invalid:\n\n```python\ntype X[T_default=int, T] = (T_default, U) \n# SyntaxError: non-default type parameter 'T' follows default type parameter\n```\n\nHowever, writing it as a `TypeAliasType` is possible. The following should likely raise an error as well to mimic this behavior:\n\n```\nfrom typing import TypeAliasType, TypeVar\nT = TypeVar('T')\nT_default = TypeVar(\"T_default\", default=int)\nTypeAliasType(\"TupleT_default_reversed\", tuple[T_default, T], type_params=(T_default, T))\nprint(\"OK\")\n```\n\n\n### CPython versions tested on:\n\n3.13\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124795\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/124787/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/124787/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/124761",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/124761/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/124761/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/124761/events",
      "html_url": "https://github.com/python/cpython/issues/124761",
      "id": 2554831389,
      "node_id": "I_kwDOBN0Z8c6YR6Id",
      "number": 124761,
      "title": "Add socket.SO_REUSEPORT_LB and use it in socket.create_server(reuse_port=True) and BaseEventLoop.create_server(reuse_port=True)",
      "user": {
        "login": "graingert",
        "id": 413772,
        "node_id": "MDQ6VXNlcjQxMzc3Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/413772?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/graingert",
        "html_url": "https://github.com/graingert",
        "followers_url": "https://api.github.com/users/graingert/followers",
        "following_url": "https://api.github.com/users/graingert/following{/other_user}",
        "gists_url": "https://api.github.com/users/graingert/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/graingert/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/graingert/subscriptions",
        "organizations_url": "https://api.github.com/users/graingert/orgs",
        "repos_url": "https://api.github.com/users/graingert/repos",
        "events_url": "https://api.github.com/users/graingert/events{/privacy}",
        "received_events_url": "https://api.github.com/users/graingert/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018672955,
          "node_id": "LA_kwDOBN0Z8c7viBU7",
          "url": "https://api.github.com/repos/python/cpython/labels/extension-modules",
          "name": "extension-modules",
          "color": "09fc59",
          "default": false,
          "description": "C modules in the Modules dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2024-09-29T09:22:53Z",
      "updated_at": "2024-12-26T15:26:28Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\n### Proposal:\r\n\r\nSO_REUSEPORT_LB is defined in freebsd: https://man.freebsd.org/cgi/man.cgi?setsockopt(2)\r\n\r\n\r\n\r\n\r\n### Has this already been discussed elsewhere?\r\n\r\nThis is a minor feature, which does not need previous discussion elsewhere\r\n\r\n### Links to previous discussion of this feature:\r\n\r\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124961\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "kumaraditya303",
        "id": 59607654,
        "node_id": "MDQ6VXNlcjU5NjA3NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/59607654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kumaraditya303",
        "html_url": "https://github.com/kumaraditya303",
        "followers_url": "https://api.github.com/users/kumaraditya303/followers",
        "following_url": "https://api.github.com/users/kumaraditya303/following{/other_user}",
        "gists_url": "https://api.github.com/users/kumaraditya303/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kumaraditya303/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kumaraditya303/subscriptions",
        "organizations_url": "https://api.github.com/users/kumaraditya303/orgs",
        "repos_url": "https://api.github.com/users/kumaraditya303/repos",
        "events_url": "https://api.github.com/users/kumaraditya303/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kumaraditya303/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/124761/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/124761/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/124746",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/124746/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/124746/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/124746/events",
      "html_url": "https://github.com/python/cpython/issues/124746",
      "id": 2554743030,
      "node_id": "I_kwDOBN0Z8c6YRkj2",
      "number": 124746,
      "title": "Python/flowgraph.c:528: all_exits_have_lineno: Assertion `0' failed",
      "user": {
        "login": "15r10nk",
        "id": 44680962,
        "node_id": "MDQ6VXNlcjQ0NjgwOTYy",
        "avatar_url": "https://avatars.githubusercontent.com/u/44680962?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/15r10nk",
        "html_url": "https://github.com/15r10nk",
        "followers_url": "https://api.github.com/users/15r10nk/followers",
        "following_url": "https://api.github.com/users/15r10nk/following{/other_user}",
        "gists_url": "https://api.github.com/users/15r10nk/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/15r10nk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/15r10nk/subscriptions",
        "organizations_url": "https://api.github.com/users/15r10nk/orgs",
        "repos_url": "https://api.github.com/users/15r10nk/repos",
        "events_url": "https://api.github.com/users/15r10nk/events{/privacy}",
        "received_events_url": "https://api.github.com/users/15r10nk/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "iritkatriel",
        "id": 1055913,
        "node_id": "MDQ6VXNlcjEwNTU5MTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1055913?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/iritkatriel",
        "html_url": "https://github.com/iritkatriel",
        "followers_url": "https://api.github.com/users/iritkatriel/followers",
        "following_url": "https://api.github.com/users/iritkatriel/following{/other_user}",
        "gists_url": "https://api.github.com/users/iritkatriel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/iritkatriel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/iritkatriel/subscriptions",
        "organizations_url": "https://api.github.com/users/iritkatriel/orgs",
        "repos_url": "https://api.github.com/users/iritkatriel/repos",
        "events_url": "https://api.github.com/users/iritkatriel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/iritkatriel/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "iritkatriel",
          "id": 1055913,
          "node_id": "MDQ6VXNlcjEwNTU5MTM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1055913?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/iritkatriel",
          "html_url": "https://github.com/iritkatriel",
          "followers_url": "https://api.github.com/users/iritkatriel/followers",
          "following_url": "https://api.github.com/users/iritkatriel/following{/other_user}",
          "gists_url": "https://api.github.com/users/iritkatriel/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/iritkatriel/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/iritkatriel/subscriptions",
          "organizations_url": "https://api.github.com/users/iritkatriel/orgs",
          "repos_url": "https://api.github.com/users/iritkatriel/repos",
          "events_url": "https://api.github.com/users/iritkatriel/events{/privacy}",
          "received_events_url": "https://api.github.com/users/iritkatriel/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-09-29T06:47:27Z",
      "updated_at": "2024-10-02T13:56:09Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nThe following code causes an assertion in a debug build:\n\n```python\ndef name_4():\n    try:\n        pass\n    except* name_3:\n        pass\n    else:\n        return {}\n    finally:\n        try:\n            pass\n        except* name_1:\n            pass\n```\n\noutput (Python 3.13.0rc2+):\n```python\npython3: Python/flowgraph.c:528: all_exits_have_lineno: Assertion `0' failed.\n```\n\nThis bug can be reproduced with the current 3.13 branch (80de9766f7b802f7dad0857614f46496a3196186).\nI bisected the issue down to 7e49f27b41d5728cde1f8790586d113ddc25f18d.\n@iritkatriel I think this is one for you again.\n\n\n\n\n\n### CPython versions tested on:\n\n3.13\n\n### Operating systems tested on:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124762\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/124746/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/124746/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/124682",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/124682/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/124682/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/124682/events",
      "html_url": "https://github.com/python/cpython/issues/124682",
      "id": 2553389116,
      "node_id": "I_kwDOBN0Z8c6YMaA8",
      "number": 124682,
      "title": "Intermittent test_support.test_fd_count failure on iOS",
      "user": {
        "login": "freakboy3742",
        "id": 37345,
        "node_id": "MDQ6VXNlcjM3MzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/37345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/freakboy3742",
        "html_url": "https://github.com/freakboy3742",
        "followers_url": "https://api.github.com/users/freakboy3742/followers",
        "following_url": "https://api.github.com/users/freakboy3742/following{/other_user}",
        "gists_url": "https://api.github.com/users/freakboy3742/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/freakboy3742/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/freakboy3742/subscriptions",
        "organizations_url": "https://api.github.com/users/freakboy3742/orgs",
        "repos_url": "https://api.github.com/users/freakboy3742/repos",
        "events_url": "https://api.github.com/users/freakboy3742/events{/privacy}",
        "received_events_url": "https://api.github.com/users/freakboy3742/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-09-27T17:14:47Z",
      "updated_at": "2024-09-27T17:49:52Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nAn intermittent test failure has been observed on `test_support.test_fd_count`:\n\nhttps://buildbot.python.org/#/builders/1380/builds/1423\nhttps://buildbot.python.org/#/builders/1380/builds/626\nhttps://buildbot.python.org/#/builders/1380/builds/84\n\nIt's *very* intermittent - it's occurred 3 times in almost 1400 buildbot runs.\n\n### CPython versions tested on:\n\nCPython main branch\n\n### Operating systems tested on:\n\nOther\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124683\n* gh-124687\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/124682/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/124682/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/124547",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/124547/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/124547/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/124547/events",
      "html_url": "https://github.com/python/cpython/issues/124547",
      "id": 2548962069,
      "node_id": "I_kwDOBN0Z8c6X7hMV",
      "number": 124547,
      "title": "Crash when detaching dict from inline values and no memory is available",
      "user": {
        "login": "DinoV",
        "id": 320265,
        "node_id": "MDQ6VXNlcjMyMDI2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/320265?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DinoV",
        "html_url": "https://github.com/DinoV",
        "followers_url": "https://api.github.com/users/DinoV/followers",
        "following_url": "https://api.github.com/users/DinoV/following{/other_user}",
        "gists_url": "https://api.github.com/users/DinoV/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DinoV/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DinoV/subscriptions",
        "organizations_url": "https://api.github.com/users/DinoV/orgs",
        "repos_url": "https://api.github.com/users/DinoV/repos",
        "events_url": "https://api.github.com/users/DinoV/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DinoV/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "DinoV",
        "id": 320265,
        "node_id": "MDQ6VXNlcjMyMDI2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/320265?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DinoV",
        "html_url": "https://github.com/DinoV",
        "followers_url": "https://api.github.com/users/DinoV/followers",
        "following_url": "https://api.github.com/users/DinoV/following{/other_user}",
        "gists_url": "https://api.github.com/users/DinoV/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DinoV/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DinoV/subscriptions",
        "organizations_url": "https://api.github.com/users/DinoV/orgs",
        "repos_url": "https://api.github.com/users/DinoV/repos",
        "events_url": "https://api.github.com/users/DinoV/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DinoV/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "DinoV",
          "id": 320265,
          "node_id": "MDQ6VXNlcjMyMDI2NQ==",
          "avatar_url": "https://avatars.githubusercontent.com/u/320265?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/DinoV",
          "html_url": "https://github.com/DinoV",
          "followers_url": "https://api.github.com/users/DinoV/followers",
          "following_url": "https://api.github.com/users/DinoV/following{/other_user}",
          "gists_url": "https://api.github.com/users/DinoV/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/DinoV/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/DinoV/subscriptions",
          "organizations_url": "https://api.github.com/users/DinoV/orgs",
          "repos_url": "https://api.github.com/users/DinoV/repos",
          "events_url": "https://api.github.com/users/DinoV/events{/privacy}",
          "received_events_url": "https://api.github.com/users/DinoV/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        {
          "login": "markshannon",
          "id": 9448417,
          "node_id": "MDQ6VXNlcjk0NDg0MTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/markshannon",
          "html_url": "https://github.com/markshannon",
          "followers_url": "https://api.github.com/users/markshannon/followers",
          "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
          "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
          "organizations_url": "https://api.github.com/users/markshannon/orgs",
          "repos_url": "https://api.github.com/users/markshannon/repos",
          "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/markshannon/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-09-25T20:41:42Z",
      "updated_at": "2024-09-27T21:51:16Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nAdd to `test_class.py` in `TestInlineValues`:\n\n```python\n    def test_detach_materialized_dict_no_memory(self):\n        a = WithAttrs()\n        d = a.__dict__\n        _testcapi.set_nomemory(0)\n        del a\n        print(d[\"a\"])\n\n```\nThis will crash because the dictionary will no longer points to valid memory:\n```\n#0  Py_XINCREF (op=<unknown at remote 0xdddddddddddddddd>) at ./Include/refcount.h:456\n#1  _Py_XNewRef (obj=<unknown at remote 0xdddddddddddddddd>) at ./Include/refcount.h:488\n#2  _Py_dict_lookup_threadsafe (mp=mp@entry=0x7ffff778ff50, key=key@entry='a', hash=<optimized out>, value_addr=value_addr@entry=0x7fffffffb078) at Objects/dictobject.c:1544\n#3  0x0000000000518457 in dict_subscript (self={'b': <unknown at remote 0xdddddddddddddddd>, 'd': <unknown at remote 0xdddddddddddddddd>, 'a': <unknown at remote 0xdddddddddddddddd>, 'c': <unknown at remote 0xdddddddddddddddd>}, key='a')\n    at Objects/dictobject.c:3325\n#4  0x000000000049d8c6 in PyObject_GetItem (o=o@entry={'b': <unknown at remote 0xdddddddddddddddd>, 'd': <unknown at remote 0xdddddddddddddddd>, 'a': <unknown at remote 0xdddddddddddddddd>, 'c': <unknown at remote 0xdddddddddddddddd>},\n    key=key@entry='a') at Objects/abstract.c:158\n```\n\n### CPython versions tested on:\n\nCPython main branch\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124627\n* gh-124714\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/124547/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/124547/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/124470",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/124470/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/124470/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/124470/events",
      "html_url": "https://github.com/python/cpython/issues/124470",
      "id": 2546379911,
      "node_id": "I_kwDOBN0Z8c6XxqyH",
      "number": 124470,
      "title": "Crash when assigning to instance dictionary from multiple threads while reading",
      "user": {
        "login": "DinoV",
        "id": 320265,
        "node_id": "MDQ6VXNlcjMyMDI2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/320265?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DinoV",
        "html_url": "https://github.com/DinoV",
        "followers_url": "https://api.github.com/users/DinoV/followers",
        "following_url": "https://api.github.com/users/DinoV/following{/other_user}",
        "gists_url": "https://api.github.com/users/DinoV/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DinoV/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DinoV/subscriptions",
        "organizations_url": "https://api.github.com/users/DinoV/orgs",
        "repos_url": "https://api.github.com/users/DinoV/repos",
        "events_url": "https://api.github.com/users/DinoV/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DinoV/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "DinoV",
        "id": 320265,
        "node_id": "MDQ6VXNlcjMyMDI2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/320265?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DinoV",
        "html_url": "https://github.com/DinoV",
        "followers_url": "https://api.github.com/users/DinoV/followers",
        "following_url": "https://api.github.com/users/DinoV/following{/other_user}",
        "gists_url": "https://api.github.com/users/DinoV/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DinoV/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DinoV/subscriptions",
        "organizations_url": "https://api.github.com/users/DinoV/orgs",
        "repos_url": "https://api.github.com/users/DinoV/repos",
        "events_url": "https://api.github.com/users/DinoV/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DinoV/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "DinoV",
          "id": 320265,
          "node_id": "MDQ6VXNlcjMyMDI2NQ==",
          "avatar_url": "https://avatars.githubusercontent.com/u/320265?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/DinoV",
          "html_url": "https://github.com/DinoV",
          "followers_url": "https://api.github.com/users/DinoV/followers",
          "following_url": "https://api.github.com/users/DinoV/following{/other_user}",
          "gists_url": "https://api.github.com/users/DinoV/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/DinoV/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/DinoV/subscriptions",
          "organizations_url": "https://api.github.com/users/DinoV/orgs",
          "repos_url": "https://api.github.com/users/DinoV/repos",
          "events_url": "https://api.github.com/users/DinoV/events{/privacy}",
          "received_events_url": "https://api.github.com/users/DinoV/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-09-24T20:55:19Z",
      "updated_at": "2024-09-24T21:17:42Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\n```python\n\nclass C: pass\n\nf = C()\n# Reader code:\nf.foo\n# Writer code:\nf.__dict__ = {}\n```\n\nWhen there's a thread reading from an object and another thread replacing the dictionary we can crash. This is because the read has a borrowed reference to the dictionary which gets simultaneously decref'd when the writer replaces it.\n\nExpected behavior: No crashes\n\n### CPython versions tested on:\n\nCPython main branch\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-122489\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/124470/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/124470/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/124451",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/124451/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/124451/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/124451/events",
      "html_url": "https://github.com/python/cpython/issues/124451",
      "id": 2545948296,
      "node_id": "I_kwDOBN0Z8c6XwBaI",
      "number": 124451,
      "title": "IDLE doesn't know where to start parsing",
      "user": {
        "login": "ujan-r",
        "id": 116058173,
        "node_id": "U_kgDOBuroPQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/116058173?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ujan-r",
        "html_url": "https://github.com/ujan-r",
        "followers_url": "https://api.github.com/users/ujan-r/followers",
        "following_url": "https://api.github.com/users/ujan-r/following{/other_user}",
        "gists_url": "https://api.github.com/users/ujan-r/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ujan-r/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ujan-r/subscriptions",
        "organizations_url": "https://api.github.com/users/ujan-r/orgs",
        "repos_url": "https://api.github.com/users/ujan-r/repos",
        "events_url": "https://api.github.com/users/ujan-r/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ujan-r/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018676472,
          "node_id": "LA_kwDOBN0Z8c7viCL4",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-IDLE",
          "name": "topic-IDLE",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-09-24T17:17:47Z",
      "updated_at": "2024-09-25T22:06:27Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nAfter making a typo in IDLE, I noticed some unexpected calltips and incorrectly matched parentheses. These seem to be caused by the parser not knowing where the current prompt begins. I'll try to send in a PR tonight.\n\n## Examples\n\nParentheses are incorrectly matched:\n\n```python\n>>> (1 2\n...\nSyntaxError: '(' was never closed\n>>> ) # IDLE highlights this as the closing paren\n```\n\nMatching parentheses aren't detected (from #85560):\n\n```python\n>>> (1 if 0\n     else 0) # IDLE beeps here, not detecting the opening paren\n```\n\nCalltip appears unexpectedly (Python 3.12; a new error message hides this issue in the latest version):\n```python\n>>> (1 2\n...\nSyntaxError: incomplete input\n>>> ( # this opens the calltip for `input`\n```\n\n### CPython versions tested on:\n\n3.12, CPython main branch\n\n### Operating systems tested on:\n\nmacOS\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124554\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "terryjreedy",
        "id": 19036496,
        "node_id": "MDQ6VXNlcjE5MDM2NDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/19036496?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/terryjreedy",
        "html_url": "https://github.com/terryjreedy",
        "followers_url": "https://api.github.com/users/terryjreedy/followers",
        "following_url": "https://api.github.com/users/terryjreedy/following{/other_user}",
        "gists_url": "https://api.github.com/users/terryjreedy/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/terryjreedy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/terryjreedy/subscriptions",
        "organizations_url": "https://api.github.com/users/terryjreedy/orgs",
        "repos_url": "https://api.github.com/users/terryjreedy/repos",
        "events_url": "https://api.github.com/users/terryjreedy/events{/privacy}",
        "received_events_url": "https://api.github.com/users/terryjreedy/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/124451/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/124451/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/124405",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/124405/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/124405/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/124405/events",
      "html_url": "https://github.com/python/cpython/issues/124405",
      "id": 2544134233,
      "node_id": "I_kwDOBN0Z8c6XpGhZ",
      "number": 124405,
      "title": "NameError in `openpty` after #118826",
      "user": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "sobolevn",
          "id": 4660275,
          "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sobolevn",
          "html_url": "https://github.com/sobolevn",
          "followers_url": "https://api.github.com/users/sobolevn/followers",
          "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
          "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
          "organizations_url": "https://api.github.com/users/sobolevn/orgs",
          "repos_url": "https://api.github.com/users/sobolevn/repos",
          "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sobolevn/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-09-24T02:36:04Z",
      "updated_at": "2024-09-24T02:38:50Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n`result` jere is not defined https://github.com/python/cpython/blob/ad7c7785461fffba04f5a36cd6d062e92b0fda16/Lib/pty.py#L36-L43\r\n\r\nIt should be `slave_fd`.\r\nCaused by #118826\r\n\r\nThanks to @ambv for finding this.\r\nI have a fix ready.\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124406\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/124405/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/124405/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/124234",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/124234/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/124234/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/124234/events",
      "html_url": "https://github.com/python/cpython/issues/124234",
      "id": 2535597763,
      "node_id": "I_kwDOBN0Z8c6XIibD",
      "number": 124234,
      "title": "Improve `mock.reset_mock` docs: clarify that `return_value` and `side_effects` are booleans",
      "user": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "sobolevn",
          "id": 4660275,
          "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sobolevn",
          "html_url": "https://github.com/sobolevn",
          "followers_url": "https://api.github.com/users/sobolevn/followers",
          "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
          "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
          "organizations_url": "https://api.github.com/users/sobolevn/orgs",
          "repos_url": "https://api.github.com/users/sobolevn/repos",
          "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sobolevn/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-09-19T08:04:44Z",
      "updated_at": "2024-09-26T12:07:25Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Requested here: https://github.com/python/cpython/pull/124038\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124237\n* gh-124592\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/124234/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/124234/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/124212",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/124212/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/124212/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/124212/events",
      "html_url": "https://github.com/python/cpython/issues/124212",
      "id": 2534129226,
      "node_id": "I_kwDOBN0Z8c6XC75K",
      "number": 124212,
      "title": "Invalid variable name in `venv` code for symlink failure handling on Windows",
      "user": {
        "login": "JacekDuszenko",
        "id": 24210015,
        "node_id": "MDQ6VXNlcjI0MjEwMDE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/24210015?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JacekDuszenko",
        "html_url": "https://github.com/JacekDuszenko",
        "followers_url": "https://api.github.com/users/JacekDuszenko/followers",
        "following_url": "https://api.github.com/users/JacekDuszenko/following{/other_user}",
        "gists_url": "https://api.github.com/users/JacekDuszenko/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JacekDuszenko/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JacekDuszenko/subscriptions",
        "organizations_url": "https://api.github.com/users/JacekDuszenko/orgs",
        "repos_url": "https://api.github.com/users/JacekDuszenko/repos",
        "events_url": "https://api.github.com/users/JacekDuszenko/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JacekDuszenko/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6061458900,
          "node_id": "LA_kwDOBN0Z8c8AAAABaUqF1A",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-venv",
          "name": "topic-venv",
          "color": "0052cc",
          "default": false,
          "description": "Related to the venv module"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-09-18T16:00:23Z",
      "updated_at": "2024-09-18T22:05:34Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\nThe `dst` variable in https://github.com/python/cpython/blob/main/Lib/venv/__init__.py#L396 should be named `dest`. Otherwise it throws  the `UnboundLocalError: cannot access local variable 'dst' where it is not associated with a value`.\r\n\r\nI have a PR that fixes this and also adds a test covering this code path.\r\nThis is occurring on Python 3.13 and 3.14.\r\n\r\n### CPython versions tested on:\r\n\r\nCPython main branch\r\n\r\n### Operating systems tested on:\r\n\r\nWindows\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-124211\r\n* gh-124226\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/124212/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/124212/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/124188",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/124188/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/124188/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/124188/events",
      "html_url": "https://github.com/python/cpython/issues/124188",
      "id": 2531882444,
      "node_id": "I_kwDOBN0Z8c6W6XXM",
      "number": 124188,
      "title": "Take into account encoding of source file for syntax error",
      "user": {
        "login": "serhiy-storchaka",
        "id": 3659035,
        "node_id": "MDQ6VXNlcjM2NTkwMzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/serhiy-storchaka",
        "html_url": "https://github.com/serhiy-storchaka",
        "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
        "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
        "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
        "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
        "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4019060898,
          "node_id": "LA_kwDOBN0Z8c7vjgCi",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-C-API",
          "name": "topic-C-API",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-09-17T19:02:59Z",
      "updated_at": "2024-09-24T08:37:48Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Currently most syntax errors raised in the compiler (except these raised in the parser) use `PyErr_ProgramTextObject()` to get the line of the code. It does not know the encoding of the source file and interpret it as UTF-8 (failing if it contain non-UTF-8 sequences). The parser uses `_PyErr_ProgramDecodedTextObject()`.\r\n\r\nThere are two ways to solve this issue:\r\n* Pass the source file encoding from the parser to the code generator. This may require changing some data structures. But this is more efficient.\r\n* Detect the encoding in `PyErr_ProgramTextObject()`. Since the latter is in the public C API, this can also affect the third-party code.\r\n\r\nThere are other issues with `PyErr_ProgramTextObject()`:\r\n\r\n* It leave the BOM in the first line if the source line contains it. This is not consistent with offsets.\r\n* For very long lines, it returns the tail of the line that exceeds 1000 bytes. It can be short, it can start with invalid character, it is not consistent with offsets. If return incomplete line, it is better to return the head.\r\n\r\nThis all applies to `PyErr_ProgramText()` as well.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124189\n* gh-124423\n* gh-124426\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/124188/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/124188/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/124044",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/124044/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/124044/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/124044/events",
      "html_url": "https://github.com/python/cpython/issues/124044",
      "id": 2524530091,
      "node_id": "I_kwDOBN0Z8c6WeUWr",
      "number": 124044,
      "title": "Tracker: protect macros expansions using `do { ... } while (0)` constructions or via `static inline` equivalents when possible",
      "user": {
        "login": "picnixz",
        "id": 10796600,
        "node_id": "MDQ6VXNlcjEwNzk2NjAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/picnixz",
        "html_url": "https://github.com/picnixz",
        "followers_url": "https://api.github.com/users/picnixz/followers",
        "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
        "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
        "organizations_url": "https://api.github.com/users/picnixz/orgs",
        "repos_url": "https://api.github.com/users/picnixz/repos",
        "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/picnixz/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018672955,
          "node_id": "LA_kwDOBN0Z8c7viBU7",
          "url": "https://api.github.com/repos/python/cpython/labels/extension-modules",
          "name": "extension-modules",
          "color": "09fc59",
          "default": false,
          "description": "C modules in the Modules dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "picnixz",
        "id": 10796600,
        "node_id": "MDQ6VXNlcjEwNzk2NjAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/picnixz",
        "html_url": "https://github.com/picnixz",
        "followers_url": "https://api.github.com/users/picnixz/followers",
        "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
        "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
        "organizations_url": "https://api.github.com/users/picnixz/orgs",
        "repos_url": "https://api.github.com/users/picnixz/repos",
        "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/picnixz/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "picnixz",
          "id": 10796600,
          "node_id": "MDQ6VXNlcjEwNzk2NjAw",
          "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/picnixz",
          "html_url": "https://github.com/picnixz",
          "followers_url": "https://api.github.com/users/picnixz/followers",
          "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
          "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
          "organizations_url": "https://api.github.com/users/picnixz/orgs",
          "repos_url": "https://api.github.com/users/picnixz/repos",
          "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
          "received_events_url": "https://api.github.com/users/picnixz/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 7,
      "created_at": "2024-09-13T10:48:42Z",
      "updated_at": "2024-09-14T10:22:01Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Fortifying Macros Expansion\r\n\r\n## The Problem\r\n\r\nIn C, using a macro allows to reduce code duplication. However, depending on the macro's body, the moment they are expanded by the C preprocessor, the obtained C code may not be syntactally correct (or could have an unexpected execution flow).\r\n\r\nIn #123842, I saw that there are many files that have macros that could wrongly expand at compile time depending on how they are being used. Most of the time it's harmless but we never know how contributors use the macros themselves (they may not be aware of PEP-7 and could end up with dangling `else` in some cases). I will continue working on that draft PR but it's really hard to find a good regex for finding the macros to protect :') (well, I could do something with some analyzer but I'm too lazy).\r\n\r\nSince I'm tired of creating separate issues for each module and macro to protect, I will use this single issue to organize and track the progress.\r\n\r\n> [!IMPORTANT] \r\n> We only touch **source files** (`.c`). We do **NOT** change the macros in header files (`.h`). Those files can be included by anyone and the macros could be used by some downstream projects. Since we do not know how they actually use them, we don't want to break them (and there is no way we can notify them of the change except via commits). We will have dedicated issues to fix those macros as a wider discussion could be needed, but this specific issue only focuses on source files.\r\n\r\n## The Good News\r\n\r\nGood news is that we have not one but **two** approaches for fixing this. \r\n\r\n### Solution 1: converting the macro into a `static inline` function\r\n\r\nWhen possible, prefer converting macros into `static inline` functions. Similar work has been achieved in PEP-670 for the C API and the overhead is not that much. Smart compilers would anyway inline the function, making it (almost) assembly-equivalent to a macro.\r\n\r\nNot all macros can be converted into `static inline` functions. Macros that simply compute, say the addition of two `double` as `ADD_DOUBLE(x, y) (x) + (y)` should be rewritten as\r\n\r\n```C\r\nstatic inline double\r\nadd_double(double x, double y)\r\n{ \r\n    return x + y;\r\n}\r\n```\r\n\r\nThere are various pitfalls when using macros (those pitfalls are explained in detail in PEP-670) so converting macros into `static inline` functions should be preferred. On the other hand, macros that have a `return` or a `goto` instruction cannot be easily converted into `static inline` functions. \r\n\r\n> [!IMPORTANT] \r\n> I'd advise to  carefully read PEP-670 to see when to convert a macro into a `static inline` function.\r\n\r\n> [!NOTE]\r\n> When converting macros into `static inline` functions, the case of the name can be changed. Most macros have uppercase names, but functions are lowercased. I'd suggest having a different commit for the rename so that it could easily be reverted if needed.\r\n\r\n### Solution 2: using `do { ... } while (0)` constructions\r\n\r\nIn addition to the arguments exposed in https://www.quora.com/What-is-the-purpose-of-using-do-while-0-in-macros, the reason why we use `do { <body> } while (0)` is that the compiler is smart enough to optimize it as `{ <body> }` but after having expanded the macro (we can neither use `#define MACRO(...) if (1) { <body> }` nor `#define MACRO(...) { <body> }` because we could create dangling `else` if we were to use `MACRO();` instead of `MACRO()`). Now, I will lay down the convention I took for solving those issues.\r\n\r\nWhen possible, apply [PEP 7](https://peps.python.org/pep-0007/), namely, align line continuations and put `do` on a separate column. For instance, we change:\r\n\r\n```C\r\n#define MACRO(...) \\\r\n    <FIRST LINE> \\\r\n    <SECOND LINE> \\\r\n    <LAST LINE>\r\n// OR\r\n#define MACRO(...) { \\\r\n    <FIRST LINE> \\\r\n    <SECOND LINE> \\\r\n    <LAST LINE> \\\r\n}\r\n// OR\r\n#define MACRO(...) \\\r\n{ \\\r\n    <FIRST LINE> \\\r\n    <SECOND LINE> \\\r\n    <LAST LINE> \\\r\n}\r\n```\r\n\r\ninto\r\n\r\n```C\r\n#define MACRO(...)      \\\r\n    do {                \\\r\n        <FIRST LINE>    \\\r\n        <SECOND LINE>   \\\r\n        <LAST LINE>     \\\r\n    } while (0)\r\n```\r\n\r\nBy convention, I put `do` on a separate line and indent it so that we don't have `} while (0)` stick to left margin. If other macros in the file are already using the `do { ... } while (0)` construction, either I keep the same style (which is probably preferred) or I change them if they are in minority (but using a separate commit so that I can easily revert it if a core-dev does not want this kind of cosmetic change).[^1]\r\n\r\n> [!TIP]\r\n> To align line continuations easily, take the longest line after adding the `do { ... } while (0)` construction and press TAB. Most of the time, this will align the `\\` on the next multiple of 4. Then either enter vertical mode to edit the line continuations or put tabs before every other `\\` until getting aligned line continuations.\r\n\r\nI personally avoid adding a semicolon after `while (0)`. One reason is that it convenes the intention for the usage to behave like a C statement. This is also in line with what PEP 7 suggests (but does not enforce). We could add it but then both `MACRO(...)` and `MACRO(...);` could be found in the code and I think it's better to have something uniform (ideally `MACRO(...);`).\r\n\r\n> [!NOTE]\r\n> The modules that will be touched may be very old and they could have their own coding style. I don't have a strong opinion on whether we should PEP-7-ize the macro body if the rest of the code is not PEP-7 compliant, but I think that aligning the line continuations should be preferred because it makes the macro easier to read.\r\n\r\n<!---\r\n### The Even Better News \r\n\r\nAn even better news is that this task is a good introductory task for anyone interested in contributing to CPython (additional hands are always welcomed). Future contributors may inspect any commit in #123842 since each commit is dedicated to fix a single module (e.g., https://github.com/python/cpython/pull/123842/commits/5c90db8206a4dfeffdbdfdf5712df6d92995cad6) or a macro spread across multiple modules (e.g., https://github.com/python/cpython/pull/123842/commits/8fe006fc40e29a67e0ec9d2986612544185576e2). \r\n--->\r\n\r\n> [!IMPORTANT]\r\n> Avoid touching other places of the code. If we believe there is a bug in the macro, we open a separate issue. In addition, each fix should only focus on a **single** file (or a single macro that is duplicated across modules). Ideally, we should only make PRs one by one because this could create conflicts on other branches and our work usually has a lower priority. For that reason, we also don't backports the changes.\r\n\r\n[^1]:  Consistency beats purity but sometimes consistency could be forced (if there are 50 macros for which we add `do { ... } while (0)` but there is only 1 macro that is putting the `do` at the same level as the `#define`, we simply change that single macro).\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-124045\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/124044/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/124044/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/124030",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/124030/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/124030/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/124030/events",
      "html_url": "https://github.com/python/cpython/issues/124030",
      "id": 2523657828,
      "node_id": "I_kwDOBN0Z8c6Wa_Zk",
      "number": 124030,
      "title": "test_termios.test_tcsendbreak fails with 'Inappropriate ioctl for device' error on NetBSD",
      "user": {
        "login": "furkanonder",
        "id": 24194934,
        "node_id": "MDQ6VXNlcjI0MTk0OTM0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24194934?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furkanonder",
        "html_url": "https://github.com/furkanonder",
        "followers_url": "https://api.github.com/users/furkanonder/followers",
        "following_url": "https://api.github.com/users/furkanonder/following{/other_user}",
        "gists_url": "https://api.github.com/users/furkanonder/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/furkanonder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/furkanonder/subscriptions",
        "organizations_url": "https://api.github.com/users/furkanonder/orgs",
        "repos_url": "https://api.github.com/users/furkanonder/repos",
        "events_url": "https://api.github.com/users/furkanonder/events{/privacy}",
        "received_events_url": "https://api.github.com/users/furkanonder/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-09-13T01:16:15Z",
      "updated_at": "2024-09-13T16:29:18Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\n```\n$ ./python -m test test_termios -m test_tcsendbreak -v\n== CPython 3.14.0a0 (heads/main:3bd942f106a, Sep 13 2024, 03:20:13) [GCC 10.5.0]\n== NetBSD-10.0-amd64-x86_64-64bit-ELF little-endian\n== Python build: debug\n== cwd: /home/blue/cpython/build/test_python_worker_6492\u00e6\n== CPU count: 6\n== encodings: locale=UTF-8 FS=utf-8\n== resources: all test resources are disabled, use -u option to unskip tests\n\nUsing random seed: 3084653998\n0:00:00 load avg: 3.05 Run 1 test sequentially in a single process\n0:00:00 load avg: 3.05 [1/1] test_termios\ntest_tcsendbreak (test.test_termios.TestFunctions.test_tcsendbreak) ... ERROR\n\n======================================================================\nERROR: test_tcsendbreak (test.test_termios.TestFunctions.test_tcsendbreak)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/blue/cpython/Lib/test/test_termios.py\", line 95, in test_tcsendbreak\n    termios.tcsendbreak(self.fd, 1)\n    ~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^\ntermios.error: (25, 'Inappropriate ioctl for device')\n\n----------------------------------------------------------------------\nRan 1 test in 0.008s\n\nFAILED (errors=1)\ntest test_termios failed\ntest_termios failed (1 error)\n\n== Tests result: FAILURE ==\n\n1 test failed:\n    test_termios\n\nTotal duration: 154 ms\nTotal tests: run=1 (filtered)\nTotal test files: run=1/1 (filtered) failed=1\nResult: FAILURE\n```\nOS: `NetBSD 10.0 amd64`\n\n### CPython versions tested on:\n\nCPython main branch\n\n### Operating systems tested on:\n\nOther\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124031\n* gh-124062\n* gh-124063\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/124030/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/124030/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/123978",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/123978/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/123978/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/123978/events",
      "html_url": "https://github.com/python/cpython/issues/123978",
      "id": 2520767377,
      "node_id": "I_kwDOBN0Z8c6WP9uR",
      "number": 123978,
      "title": "test_thread_time fails on NetBSD: time difference exceeds expected threshold",
      "user": {
        "login": "furkanonder",
        "id": 24194934,
        "node_id": "MDQ6VXNlcjI0MTk0OTM0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24194934?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furkanonder",
        "html_url": "https://github.com/furkanonder",
        "followers_url": "https://api.github.com/users/furkanonder/followers",
        "following_url": "https://api.github.com/users/furkanonder/following{/other_user}",
        "gists_url": "https://api.github.com/users/furkanonder/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/furkanonder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/furkanonder/subscriptions",
        "organizations_url": "https://api.github.com/users/furkanonder/orgs",
        "repos_url": "https://api.github.com/users/furkanonder/repos",
        "events_url": "https://api.github.com/users/furkanonder/events{/privacy}",
        "received_events_url": "https://api.github.com/users/furkanonder/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "serhiy-storchaka",
        "id": 3659035,
        "node_id": "MDQ6VXNlcjM2NTkwMzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/serhiy-storchaka",
        "html_url": "https://github.com/serhiy-storchaka",
        "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
        "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
        "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
        "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
        "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "serhiy-storchaka",
          "id": 3659035,
          "node_id": "MDQ6VXNlcjM2NTkwMzU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/serhiy-storchaka",
          "html_url": "https://github.com/serhiy-storchaka",
          "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
          "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
          "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
          "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
          "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
          "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
          "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 7,
      "created_at": "2024-09-11T21:03:09Z",
      "updated_at": "2024-10-03T10:09:46Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\n```\n$ ./python -m test test_time -m test_thread_time\nUsing random seed: 4026164953\n0:00:00 load avg: 2.27 Run 1 test sequentially in a single process\n0:00:00 load avg: 2.27 [1/1] test_time\ntest test_time failed -- Traceback (most recent call last):\n  File \"/home/blue/cpython/Lib/test/test_time.py\", line 535, in test_thread_time\n    self.assertLess(stop - start, 0.2)\n    ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^\nAssertionError: 0.26 not less than 0.2\n\ntest_time failed (1 failure)\n\n== Tests result: FAILURE ==\n\n1 test failed:\n    test_time\n```\n\nOS: `NetBSD 10.0 amd64`\n\n### CPython versions tested on:\n\nCPython main branch\n\n### Operating systems tested on:\n\nOther\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-123979\n* gh-124116\n* gh-124196\n* gh-124425\n* gh-124427\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/123978/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/123978/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/123976",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/123976/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/123976/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/123976/events",
      "html_url": "https://github.com/python/cpython/issues/123976",
      "id": 2520675004,
      "node_id": "I_kwDOBN0Z8c6WPnK8",
      "number": 123976,
      "title": "Expand documentation for importlib.metadata custom providers to include caveats regarding backports",
      "user": {
        "login": "jaraco",
        "id": 308610,
        "node_id": "MDQ6VXNlcjMwODYxMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/308610?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jaraco",
        "html_url": "https://github.com/jaraco",
        "followers_url": "https://api.github.com/users/jaraco/followers",
        "following_url": "https://api.github.com/users/jaraco/following{/other_user}",
        "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions",
        "organizations_url": "https://api.github.com/users/jaraco/orgs",
        "repos_url": "https://api.github.com/users/jaraco/repos",
        "events_url": "https://api.github.com/users/jaraco/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jaraco/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4095883204,
          "node_id": "LA_kwDOBN0Z8c70IjfE",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-importlib",
          "name": "topic-importlib",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "jaraco",
        "id": 308610,
        "node_id": "MDQ6VXNlcjMwODYxMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/308610?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jaraco",
        "html_url": "https://github.com/jaraco",
        "followers_url": "https://api.github.com/users/jaraco/followers",
        "following_url": "https://api.github.com/users/jaraco/following{/other_user}",
        "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions",
        "organizations_url": "https://api.github.com/users/jaraco/orgs",
        "repos_url": "https://api.github.com/users/jaraco/repos",
        "events_url": "https://api.github.com/users/jaraco/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jaraco/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "jaraco",
          "id": 308610,
          "node_id": "MDQ6VXNlcjMwODYxMA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/308610?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jaraco",
          "html_url": "https://github.com/jaraco",
          "followers_url": "https://api.github.com/users/jaraco/followers",
          "following_url": "https://api.github.com/users/jaraco/following{/other_user}",
          "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions",
          "organizations_url": "https://api.github.com/users/jaraco/orgs",
          "repos_url": "https://api.github.com/users/jaraco/repos",
          "events_url": "https://api.github.com/users/jaraco/events{/privacy}",
          "received_events_url": "https://api.github.com/users/jaraco/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2024-09-11T20:13:27Z",
      "updated_at": "2024-09-15T20:45:51Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Documentation\r\n\r\nAs `importlib_metadata` provides a backport of `importlib.metadata` and asserts primacy when imported, for consumers of the API, it provides a consistent interface, except when a custom provider serves objects as imported from `importlib.metadata` (not using the backport). For example:\r\n\r\n- project A implements and installs a DistributionFinder to `sys.meta_path` providing `importlib.metadata.Distribution` instances.\r\n- project B calls `importlib_metadata.distributions()` to return all distributions, including that of project A.\r\n- A user installs project A and project B.\r\n- When project B queries for the distributions, expecting it to return `Iterable[importlib_metadata.Distribution]` objects, their expectation is violated when the `DistributionFinder` installed by project A emits `importlib.metadata.Distribution` objects.\r\n\r\npython/importlib_metadata#486 captures this concern. python/importlib_metadata#505 promises to correct this concern by wrapping and transforming any objects from custom providers referencing `importlib.metadata` to instead use objects from `importlib_metadata`.\r\n\r\nHowever, for `importlib.metadata.Distribution` objects, it's not possible to replace safely the objects of an arbitrary custom provider, so the proposed implementation [emits a warning](https://github.com/python/importlib_metadata/blob/4a350a53b8e83d12db595dc3fb3f511bea4a4993/importlib_metadata/_compat/localize.py#L26) when such an object is encountered.\r\n\r\nTherefore, we'd like to add some documentation to the [custom provider docs](https://docs.python.org/3/library/importlib.metadata.html#extending-the-search-algorithm) to advise custom providers on what to do to avoid their users encountering the warning. In particular:\r\n\r\n> - Custom providers should emit `importlib_metadata.Distribution` objects when `importlib_metadata` is present, or\r\n> - Custom providers should register their objects with `importlib_metadata` to bypass the warning.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-123977\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/123976/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/123976/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/123935",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/123935/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/123935/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/123935/events",
      "html_url": "https://github.com/python/cpython/issues/123935",
      "id": 2519058976,
      "node_id": "I_kwDOBN0Z8c6WJcog",
      "number": 123935,
      "title": "Incorrect slot check: typo in `__dictoffset__`",
      "user": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 7334604047,
          "node_id": "LA_kwDOBN0Z8c8AAAABtS0tDw",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-dataclasses",
          "name": "topic-dataclasses",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "sobolevn",
          "id": 4660275,
          "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sobolevn",
          "html_url": "https://github.com/sobolevn",
          "followers_url": "https://api.github.com/users/sobolevn/followers",
          "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
          "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
          "organizations_url": "https://api.github.com/users/sobolevn/orgs",
          "repos_url": "https://api.github.com/users/sobolevn/repos",
          "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sobolevn/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-09-11T08:52:50Z",
      "updated_at": "2024-09-12T07:29:26Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\nI made a typo that made it into the final code: https://github.com/python/cpython/blob/00ffdf27367fb9aef247644a96f1a9ffb5be1efe/Lib/dataclasses.py#L1211-L1212\n\nIt should had been `__dictoffset__` not `__dictrefoffset__`.\n\nFixing plan:\n- Add tests for C types with `__dictoffset__`, so it won't happen again :)\n- Fix the typo\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-123941\n* gh-123991\n* gh-123992\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/123935/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/123935/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/123934",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/123934/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/123934/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/123934/events",
      "html_url": "https://github.com/python/cpython/issues/123934",
      "id": 2518940046,
      "node_id": "I_kwDOBN0Z8c6WI_mO",
      "number": 123934,
      "title": "`reset_mock` resets `MagicMock`'s magic methods in an unexpected way",
      "user": {
        "login": "mentalAdventurer",
        "id": 73528467,
        "node_id": "MDQ6VXNlcjczNTI4NDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73528467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mentalAdventurer",
        "html_url": "https://github.com/mentalAdventurer",
        "followers_url": "https://api.github.com/users/mentalAdventurer/followers",
        "following_url": "https://api.github.com/users/mentalAdventurer/following{/other_user}",
        "gists_url": "https://api.github.com/users/mentalAdventurer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mentalAdventurer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mentalAdventurer/subscriptions",
        "organizations_url": "https://api.github.com/users/mentalAdventurer/orgs",
        "repos_url": "https://api.github.com/users/mentalAdventurer/repos",
        "events_url": "https://api.github.com/users/mentalAdventurer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mentalAdventurer/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "sobolevn",
          "id": 4660275,
          "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sobolevn",
          "html_url": "https://github.com/sobolevn",
          "followers_url": "https://api.github.com/users/sobolevn/followers",
          "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
          "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
          "organizations_url": "https://api.github.com/users/sobolevn/orgs",
          "repos_url": "https://api.github.com/users/sobolevn/repos",
          "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sobolevn/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2024-09-11T08:12:37Z",
      "updated_at": "2024-11-18T17:19:47Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\nThe `reset_mock(return_value=True)` method behaves in a wrong/inconsistent way.\r\nWhen used with `MagicMock`, the method `reset_mock(return_value=True)` does not reset the return values of the magic methods.  Only if you call for example `__str__` and then call the reset_mock function, the return value will be reset, but not to the default value. \r\n\r\n```python\r\nfrom unittest import mock\r\n\r\nmm = mock.MagicMock()\r\nprint(type(mm.__str__()))\r\nmm.reset_mock(return_value=True)\r\nprint(type(mm.__str__()))\r\nprint(type(mm.__hash__()))\r\nmm.reset_mock(return_value=True)\r\nprint(type(mm.__hash__()))\r\n```\r\n#### Output\r\n```sh\r\n<class 'str'>\r\n<class 'unittest.mock.MagicMock'>\r\n<class 'int'>\r\n<class 'unittest.mock.MagicMock'>\r\n```\r\nSince Python 3.9 [PR](https://github.com/python/cpython/issues/83113) `reset_mock` now also resets child mocks. This explains the behaviour. Calling the `__str__` method creates a child `MagicMock` with a set return value.  Since this child mock now exists, its return value is reset when reset_mock(return_value=True) is called. \r\nAlthough this can be logically explained, it's counter-intuitive and annoying as I'm never sure which values are being reset. \r\n\r\nI would expect the same behaviour as `Mock`.  The return value of `__str__` and other magic methods should not be effected.\r\n\r\n```python\r\nfrom unittest import mock\r\n\r\nm = mock.Mock()\r\nprint(type(m.__str__()))\r\nm.reset_mock(return_value=True)\r\nprint(type(m.__str__()))\r\nprint(type(m.__hash__()))\r\nm.reset_mock(return_value=True)\r\nprint(type(m.__hash__()))\r\n```\r\n#### Output\r\n```sh\r\n<class 'str'>\r\n<class 'str'>\r\n<class 'int'>\r\n<class 'int'>\r\n```\r\n\r\n### CPython versions tested on:\r\n\r\n3.10\r\n\r\n### Operating systems tested on:\r\n\r\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124038\n* gh-124231\n* gh-124232\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/123934/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/123934/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/123560",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/123560/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/123560/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/123560/events",
      "html_url": "https://github.com/python/cpython/issues/123560",
      "id": 2499296117,
      "node_id": "I_kwDOBN0Z8c6U-Dt1",
      "number": 123560,
      "title": "Invalid description for '' (None) formatting type for floats",
      "user": {
        "login": "skirpichev",
        "id": 2155800,
        "node_id": "MDQ6VXNlcjIxNTU4MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2155800?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skirpichev",
        "html_url": "https://github.com/skirpichev",
        "followers_url": "https://api.github.com/users/skirpichev/followers",
        "following_url": "https://api.github.com/users/skirpichev/following{/other_user}",
        "gists_url": "https://api.github.com/users/skirpichev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/skirpichev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/skirpichev/subscriptions",
        "organizations_url": "https://api.github.com/users/skirpichev/orgs",
        "repos_url": "https://api.github.com/users/skirpichev/repos",
        "events_url": "https://api.github.com/users/skirpichev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/skirpichev/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-09-01T08:03:47Z",
      "updated_at": "2024-09-26T12:40:51Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Docs [says](https://docs.python.org/3.12/library/string.html#format-specification-mini-language), that if format type is not specified:\r\n\"For [float](https://docs.python.org/3.12/library/functions.html#float) this is the same as 'g', except that when fixed-point notation is used to format the result, it always includes at least one digit past the decimal point. The precision used is as large as needed to represent the given value faithfully.\r\n\r\n[...]\r\n\r\nThe overall effect is to match the output of [str()](https://docs.python.org/3.12/library/stdtypes.html#str) as altered by the other format modifiers.\"\r\n\r\nOn another hand, for 'g' presentation type it says:\r\n\"General format. For a given precision p >= 1, this rounds the number to p significant digits and then formats the result in either fixed-point format or in scientific notation, depending on its magnitude. A precision of 0 is treated as equivalent to a precision of 1.\r\n\r\nThe precise rules are as follows: suppose that the result formatted with presentation type 'e' and precision p-1 would have exponent exp. Then, if ``-4 <= exp < p`` [...], the number is formatted with presentation type 'f' and precision ``p-1-exp``. Otherwise, the number is formatted with presentation type 'e' and precision ``p-1``. In both cases insignificant trailing zeros are removed from the significand, and the decimal point is also removed if there are no remaining digits following it, unless the '#' option is used.\r\n\r\nWith no precision given, uses a precision of 6 significant digits for [float](https://docs.python.org/3.12/library/functions.html#float).\"\r\n\r\nLets consider case, when precision is specified.  Obviously, it's not \"same as 'g':\r\n```pycon\r\nPython 3.14.0a0 (heads/main:58ce131037, Aug 29 2024, 16:19:25) [GCC 12.2.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> format(1.0, '.1')\r\n'1e+00'\r\n>>> format(1.0, '.1g')\r\n'1'\r\n>>> format(12.34, '.2')\r\n'1.2e+01'\r\n>>> format(12.34, '.2g')\r\n'12'\r\n```\r\nHere exponential format is used instead of fixed-point, as for 'g' type.  IIUC, this coming from https://github.com/python/cpython/issues/50114.  It seems, that 'g' type comparison should be changed here (for '' presentation type) to ``-4 <= exp < p-1`` instead.  I'll work on a patch.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-123561\n* gh-124596\n* gh-124597\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/123560/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/123560/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/123441",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/123441/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/123441/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/123441/events",
      "html_url": "https://github.com/python/cpython/issues/123441",
      "id": 2492831936,
      "node_id": "I_kwDOBN0Z8c6UlZjA",
      "number": 123441,
      "title": "docs: fix codecs table data",
      "user": {
        "login": "mr-bronson",
        "id": 122595269,
        "node_id": "U_kgDOB06nxQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/122595269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mr-bronson",
        "html_url": "https://github.com/mr-bronson",
        "followers_url": "https://api.github.com/users/mr-bronson/followers",
        "following_url": "https://api.github.com/users/mr-bronson/following{/other_user}",
        "gists_url": "https://api.github.com/users/mr-bronson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mr-bronson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mr-bronson/subscriptions",
        "organizations_url": "https://api.github.com/users/mr-bronson/orgs",
        "repos_url": "https://api.github.com/users/mr-bronson/repos",
        "events_url": "https://api.github.com/users/mr-bronson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mr-bronson/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 7,
      "created_at": "2024-08-28T19:24:16Z",
      "updated_at": "2024-08-29T12:13:16Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Documentation\r\n\r\nISO-8859-4 is NOT for Baltic languages. (see [Wikipedia](https://en.wikipedia.org/wiki/ISO/IEC_8859-4) and [spec preview](https://www.iso.org/obp/ui/en/#iso:std:iso-iec:8859:-4:ed-1:v1:en))\r\n\r\nAlso, use new English spelling of Belarusian. (see [Wikipedia](https://en.wikipedia.org/wiki/Belarusian_language#Names) and [Google Ngram Viewer](https://books.google.com/ngrams/graph?content=Belarusian%2CBelarussian%2CByelorussian&year_start=1800&year_end=2022&corpus=en&smoothing=3))\r\n\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-123439\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/123441/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/123441/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/123339",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/123339/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/123339/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/123339/events",
      "html_url": "https://github.com/python/cpython/issues/123339",
      "id": 2487075072,
      "node_id": "I_kwDOBN0Z8c6UPcEA",
      "number": 123339,
      "title": "Python's help utility crashes when `collections.abc` module is asked.",
      "user": {
        "login": "taaaf11",
        "id": 109919009,
        "node_id": "U_kgDOBo07IQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/109919009?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/taaaf11",
        "html_url": "https://github.com/taaaf11",
        "followers_url": "https://api.github.com/users/taaaf11/followers",
        "following_url": "https://api.github.com/users/taaaf11/following{/other_user}",
        "gists_url": "https://api.github.com/users/taaaf11/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/taaaf11/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/taaaf11/subscriptions",
        "organizations_url": "https://api.github.com/users/taaaf11/orgs",
        "repos_url": "https://api.github.com/users/taaaf11/repos",
        "events_url": "https://api.github.com/users/taaaf11/events{/privacy}",
        "received_events_url": "https://api.github.com/users/taaaf11/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 10,
      "created_at": "2024-08-26T14:55:31Z",
      "updated_at": "2024-09-28T17:57:25Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\nI am running `Python 3.13.0-b2` on `Debian 12 i386`. When `collections.abc` is entered into python interactive help utility, the interpreter crashes.\r\n\r\n```python\r\n>>> help\r\n>>> collections.abc\r\n(Python interpreter crashes)\r\n```\r\n\r\nThe traceback is indented. So I am attaching video.\r\n\r\nhttps://github.com/user-attachments/assets/fd953250-abd4-41f8-964d-294393924f11\r\n\r\n\r\n\r\n\r\n### CPython versions tested on:\r\n\r\n3.13\r\n\r\n### Operating systems tested on:\r\n\r\nLinux\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-123347\r\n* gh-123613\n* gh-124735\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/123339/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/123339/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/123321",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/123321/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/123321/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/123321/events",
      "html_url": "https://github.com/python/cpython/issues/123321",
      "id": 2485469636,
      "node_id": "I_kwDOBN0Z8c6UJUHE",
      "number": 123321,
      "title": "`PyOS_Readline` crashes in a multi-threaded race",
      "user": {
        "login": "bharel",
        "id": 742359,
        "node_id": "MDQ6VXNlcjc0MjM1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/742359?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bharel",
        "html_url": "https://github.com/bharel",
        "followers_url": "https://api.github.com/users/bharel/followers",
        "following_url": "https://api.github.com/users/bharel/following{/other_user}",
        "gists_url": "https://api.github.com/users/bharel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bharel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bharel/subscriptions",
        "organizations_url": "https://api.github.com/users/bharel/orgs",
        "repos_url": "https://api.github.com/users/bharel/repos",
        "events_url": "https://api.github.com/users/bharel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bharel/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018848914,
          "node_id": "LA_kwDOBN0Z8c7visSS",
          "url": "https://api.github.com/repos/python/cpython/labels/type-crash",
          "name": "type-crash",
          "color": "b60205",
          "default": false,
          "description": "A hard crash of the interpreter, possibly with a core dump"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 8,
      "created_at": "2024-08-25T21:20:41Z",
      "updated_at": "2024-09-06T19:07:35Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Crash report\n\n### What happened?\n\nThe second breakpoint segfaults on Windows (==access violation).\n\n```python\nimport asyncio\nasync def main():\n    def inner():\n        breakpoint()\n        pass\n    asyncio.create_task(asyncio.to_thread(inner))\n    asyncio.create_task(asyncio.to_thread(inner))\n\nasyncio.ensure_future(main())\nasyncio.get_event_loop().run_forever()\n```\n\nCore of the problem is in the myreadline.c module.\nImplementing a fix...\n\n### CPython versions tested on:\n\n3.12, CPython main branch\n\n### Operating systems tested on:\n\nWindows\n\n### Output from running 'python -VV' on the command line:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-123323\n* gh-123676\n* gh-123677\n* gh-123690\n* gh-123798\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/123321/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/123321/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/123299",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/123299/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/123299/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/123299/events",
      "html_url": "https://github.com/python/cpython/issues/123299",
      "id": 2484815239,
      "node_id": "I_kwDOBN0Z8c6UG0WH",
      "number": 123299,
      "title": "What's New in Python 3.14 (copyediting)",
      "user": {
        "login": "AA-Turner",
        "id": 9087854,
        "node_id": "MDQ6VXNlcjkwODc4NTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9087854?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AA-Turner",
        "html_url": "https://github.com/AA-Turner",
        "followers_url": "https://api.github.com/users/AA-Turner/followers",
        "following_url": "https://api.github.com/users/AA-Turner/following{/other_user}",
        "gists_url": "https://api.github.com/users/AA-Turner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/AA-Turner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AA-Turner/subscriptions",
        "organizations_url": "https://api.github.com/users/AA-Turner/orgs",
        "repos_url": "https://api.github.com/users/AA-Turner/repos",
        "events_url": "https://api.github.com/users/AA-Turner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/AA-Turner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-08-24T19:17:51Z",
      "updated_at": "2024-11-19T17:21:13Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Documentation\r\n\r\nThis is a meta-issue to capture PRs for copyedits to What's New in Python 3.14.\r\n\r\nOther meta-issues:\r\n\r\n* 3.13: #109975\r\n* 3.12: #109190\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-123300\r\n* gh-125438\n* gh-127028\n<!-- /gh-linked-prs -->\r\n\r\nA\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/123299/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/123299/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/123232",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/123232/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/123232/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/123232/events",
      "html_url": "https://github.com/python/cpython/issues/123232",
      "id": 2481001678,
      "node_id": "I_kwDOBN0Z8c6T4RTO",
      "number": 123232,
      "title": "\"Deferred by Instruction\" stats don't add up.",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2024-08-22T14:54:54Z",
      "updated_at": "2024-08-27T08:57:54Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nThe \"Deferred by instruction\" [stats](https://github.com/faster-cpython/benchmarking-public/blob/main/results/bm-20240819-3.14.0a0-e077b20-PYTHON_UOPS/bm-20240819-azure-x86_64-python-e077b201f49a6007ddad-3.14.0a0-e077b20-pystats.md#deferred-by-instruction) should add up to the total \"Not specialized\" total in [Specialization effectiveness](https://github.com/faster-cpython/benchmarking-public/blob/main/results/bm-20240819-3.14.0a0-e077b20-PYTHON_UOPS/bm-20240819-azure-x86_64-python-e077b201f49a6007ddad-3.14.0a0-e077b20-pystats.md#specialization-effectiveness) but they don't come close.\n\nIn the current latest stats \"Not specialized\" total is ~8.8 billion, but the \"deferred by instruction\" adds up to only ~4 billion.\n\n\n\n### CPython versions tested on:\n\nCPython main branch\n\n### Operating systems tested on:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-123236\n* gh-123381\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/123232/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/123232/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122985",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122985/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122985/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122985/events",
      "html_url": "https://github.com/python/cpython/issues/122985",
      "id": 2464190350,
      "node_id": "I_kwDOBN0Z8c6S4I-O",
      "number": 122985,
      "title": "Improve interface between compiler and symtable",
      "user": {
        "login": "iritkatriel",
        "id": 1055913,
        "node_id": "MDQ6VXNlcjEwNTU5MTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1055913?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/iritkatriel",
        "html_url": "https://github.com/iritkatriel",
        "followers_url": "https://api.github.com/users/iritkatriel/followers",
        "following_url": "https://api.github.com/users/iritkatriel/following{/other_user}",
        "gists_url": "https://api.github.com/users/iritkatriel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/iritkatriel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/iritkatriel/subscriptions",
        "organizations_url": "https://api.github.com/users/iritkatriel/orgs",
        "repos_url": "https://api.github.com/users/iritkatriel/repos",
        "events_url": "https://api.github.com/users/iritkatriel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/iritkatriel/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-08-13T20:47:17Z",
      "updated_at": "2024-09-27T20:05:41Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "\r\nIn this issue I want to try and improve the interface between the compiler and the symtable. \r\n\r\nProblems I see are:\r\n\r\n- the compiler modifies the symtable\r\n- the compiler performs calculations that the symtable could do (such as in ``push_inlined_comprehension_state``)\r\n- the symtable is actually not a correct representation of some scopes, like those of inlined comprehensions (the comprehension scope it removed from the symtable tree, but is still access from the compiler via the symtable dict). Exception handlers are another example of scope changes that the compiler does, which are not reflected in the symtable.\r\n\r\n \n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-122986\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122985/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122985/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122907",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122907/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122907/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122907/events",
      "html_url": "https://github.com/python/cpython/issues/122907",
      "id": 2459704251,
      "node_id": "I_kwDOBN0Z8c6SnBu7",
      "number": 122907,
      "title": "Compilation is broken with `HAVE_DYNAMIC_LOADING=0`",
      "user": {
        "login": "tritao",
        "id": 602268,
        "node_id": "MDQ6VXNlcjYwMjI2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602268?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tritao",
        "html_url": "https://github.com/tritao",
        "followers_url": "https://api.github.com/users/tritao/followers",
        "following_url": "https://api.github.com/users/tritao/following{/other_user}",
        "gists_url": "https://api.github.com/users/tritao/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tritao/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tritao/subscriptions",
        "organizations_url": "https://api.github.com/users/tritao/orgs",
        "repos_url": "https://api.github.com/users/tritao/repos",
        "events_url": "https://api.github.com/users/tritao/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tritao/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4095883204,
          "node_id": "LA_kwDOBN0Z8c70IjfE",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-importlib",
          "name": "topic-importlib",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        },
        {
          "id": 7679165194,
          "node_id": "LA_kwDOBN0Z8c8AAAABybbDCg",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-emscripten",
          "name": "OS-emscripten",
          "color": "d4c5f9",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "ericsnowcurrently",
          "id": 1152074,
          "node_id": "MDQ6VXNlcjExNTIwNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ericsnowcurrently",
          "html_url": "https://github.com/ericsnowcurrently",
          "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
          "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
          "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
          "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
          "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
          "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2024-08-11T18:16:27Z",
      "updated_at": "2024-10-30T21:01:32Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nWhen compiling for Wasm with `--disable-wasm-dynamic-linking`, we end up with `HAVE_DYNAMIC_LOADING=0`, which is currently broken with the following linking errors:\n\n```\nwasm-ld: error: Python/import.o: undefined symbol: _Py_ext_module_loader_info_init_for_builtin\nwasm-ld: error: Python/import.o: undefined symbol: _PyImport_RunModInitFunc\nwasm-ld: error: Python/import.o: undefined symbol: _Py_ext_module_loader_result_apply_error\nwasm-ld: error: Python/import.o: undefined symbol: _Py_ext_module_loader_result_clear\nwasm-ld: error: Python/import.o: undefined symbol: _Py_ext_module_loader_result_clear\nwasm-ld: error: Python/import.o: undefined symbol: _Py_ext_module_loader_info_clear\nwasm-ld: error: Python/import.o: undefined symbol: _PyImport_RunModInitFunc\nwasm-ld: error: Python/import.o: undefined symbol: _Py_ext_module_loader_result_apply_error\nwasm-ld: error: Python/import.o: undefined symbol: _Py_ext_module_loader_result_clear\n```\n\nI believe its a regression introduced in https://github.com/python/cpython/commit/529a160be6733e04d2a44051d3f42f6ada8c1015.\n\n@ericsnowcurrently, would you be able to take a look into fixing this?\n\n\n### CPython versions tested on:\n\nCPython main branch\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-122952\n* gh-122984\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122907/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122907/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122838",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122838/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122838/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122838/events",
      "html_url": "https://github.com/python/cpython/issues/122838",
      "id": 2456514623,
      "node_id": "I_kwDOBN0Z8c6Sa3A_",
      "number": 122838,
      "title": "Several Python 3.13 opcodes are not documented",
      "user": {
        "login": "MatthieuDartiailh",
        "id": 4481740,
        "node_id": "MDQ6VXNlcjQ0ODE3NDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4481740?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MatthieuDartiailh",
        "html_url": "https://github.com/MatthieuDartiailh",
        "followers_url": "https://api.github.com/users/MatthieuDartiailh/followers",
        "following_url": "https://api.github.com/users/MatthieuDartiailh/following{/other_user}",
        "gists_url": "https://api.github.com/users/MatthieuDartiailh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/MatthieuDartiailh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MatthieuDartiailh/subscriptions",
        "organizations_url": "https://api.github.com/users/MatthieuDartiailh/orgs",
        "repos_url": "https://api.github.com/users/MatthieuDartiailh/repos",
        "events_url": "https://api.github.com/users/MatthieuDartiailh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/MatthieuDartiailh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-08-08T19:49:58Z",
      "updated_at": "2024-11-06T12:16:34Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Documentation\r\n\r\nThe following opcodes which can appear in the output of dis, do not appear in the documentation https://docs.python.org/3.13/library/dis.html:\r\n- LOAD_FAST_LOAD_FAST\r\n- LOAD_FROM_DICT_OR_DEREF\r\n- LOAD_FROM_DICT_OR_GLOBAL\r\n- STORE_FAST_STORE_FAST\r\n- STORE_FAST_LOAD_FAST\r\n- STORE_FAST_STORE_FAST\r\n- ENTER_EXECUTOR\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-123073\n* gh-126492\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122838/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122838/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122821",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122821/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122821/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122821/events",
      "html_url": "https://github.com/python/cpython/issues/122821",
      "id": 2455254225,
      "node_id": "I_kwDOBN0Z8c6SWDTR",
      "number": 122821,
      "title": "Inconsistent locations for conditional branches in `while` statements",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "markshannon",
          "id": 9448417,
          "node_id": "MDQ6VXNlcjk0NDg0MTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/markshannon",
          "html_url": "https://github.com/markshannon",
          "followers_url": "https://api.github.com/users/markshannon/followers",
          "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
          "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
          "organizations_url": "https://api.github.com/users/markshannon/orgs",
          "repos_url": "https://api.github.com/users/markshannon/repos",
          "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/markshannon/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-08-08T08:58:17Z",
      "updated_at": "2024-08-12T10:48:13Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nReported here: https://github.com/python/cpython/issues/122762#issuecomment-2273809777\n\nThe locations for branches in while statements are not consistent. The first iteration shows different locations from the second and later iterations.\n\nI've not check earlier versions, but this could be an issue for 3.12 as well.\n\n### CPython versions tested on:\n\n3.13, CPython main branch\n\n### Operating systems tested on:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-122934\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122821/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122821/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122767",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122767/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122767/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122767/events",
      "html_url": "https://github.com/python/cpython/issues/122767",
      "id": 2452801829,
      "node_id": "I_kwDOBN0Z8c6SMskl",
      "number": 122767,
      "title": "Documentation doesn't specify how \"new style\" formatting works for complex numbers",
      "user": {
        "login": "skirpichev",
        "id": 2155800,
        "node_id": "MDQ6VXNlcjIxNTU4MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2155800?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skirpichev",
        "html_url": "https://github.com/skirpichev",
        "followers_url": "https://api.github.com/users/skirpichev/followers",
        "following_url": "https://api.github.com/users/skirpichev/following{/other_user}",
        "gists_url": "https://api.github.com/users/skirpichev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/skirpichev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/skirpichev/subscriptions",
        "organizations_url": "https://api.github.com/users/skirpichev/orgs",
        "repos_url": "https://api.github.com/users/skirpichev/repos",
        "events_url": "https://api.github.com/users/skirpichev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/skirpichev/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-08-07T07:43:27Z",
      "updated_at": "2024-10-29T14:36:47Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "[Old string formatting](https://docs.python.org/3/tutorial/inputoutput.html#old-string-formatting) has no support for complex numbers:\r\n```pycon\r\n>>> \"%f\" % (1+0j)\r\nTraceback (most recent call last):\r\n  File \"<python-input-0>\", line 1, in <module>\r\n    \"%f\" % (1+0j)\r\n    ~~~~~^~~~~~~~\r\nTypeError: must be real number, not complex\r\n```\r\n\r\nBut formatted string literals and str.format() have:\r\n```pycon\r\n>>> f\"{1+0j:f}\"\r\n'1.000000+0.000000j'\r\n>>> f\"{1+0j:}\"\r\n'(1+0j)'\r\n>>> f\"{1.:}\"  # default formatting slightly different than for floats\r\n'1.0'\r\n```\r\n\r\nUnfortunately, formatting rules for complexes aren't documented in the [Format Specification Mini-Language](https://docs.python.org/3/library/string.html#formatspec) section.  I'll work on a patch.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-122848\n* gh-126128\n* gh-126129\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122767/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122767/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122688",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122688/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122688/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122688/events",
      "html_url": "https://github.com/python/cpython/issues/122688",
      "id": 2448168522,
      "node_id": "I_kwDOBN0Z8c6R7BZK",
      "number": 122688,
      "title": "Fix support of var-positional parameter in Argument Clinic",
      "user": {
        "login": "serhiy-storchaka",
        "id": 3659035,
        "node_id": "MDQ6VXNlcjM2NTkwMzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/serhiy-storchaka",
        "html_url": "https://github.com/serhiy-storchaka",
        "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
        "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
        "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
        "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
        "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4019554242,
          "node_id": "LA_kwDOBN0Z8c7vlYfC",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-argument-clinic",
          "name": "topic-argument-clinic",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-08-05T10:13:09Z",
      "updated_at": "2024-08-11T07:55:24Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Currently Argument Clinic with a var-positional parameter is only used in few functions (`print()`, the `TypeVar` constructor (see  #118814) and several `set` methods), so this is not well tested.\r\n\r\nThere are several bugs here:\r\n\r\n* _Keyword-only_ parameters after the var-positional parameter are marked as _positional-or-keyword_ parameters.\r\n* The number of required arguments for _keyword-only_ parameters was calculated incorrectly.\r\n* Some invalid combination of the var-positional parameter with `/`, `*` and deprecation markers are not forbidden or produce unrelated errors.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-122689\n* gh-122852\n* gh-122900\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122688/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122688/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122575",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122575/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122575/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122575/events",
      "html_url": "https://github.com/python/cpython/issues/122575",
      "id": 2443126282,
      "node_id": "I_kwDOBN0Z8c6RnyYK",
      "number": 122575,
      "title": "`sys.flags.gil` should be a \"sequence\" attribute",
      "user": {
        "login": "colesbury",
        "id": 655866,
        "node_id": "MDQ6VXNlcjY1NTg2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/colesbury",
        "html_url": "https://github.com/colesbury",
        "followers_url": "https://api.github.com/users/colesbury/followers",
        "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
        "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
        "organizations_url": "https://api.github.com/users/colesbury/orgs",
        "repos_url": "https://api.github.com/users/colesbury/repos",
        "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
        "received_events_url": "https://api.github.com/users/colesbury/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 8,
      "created_at": "2024-08-01T18:30:30Z",
      "updated_at": "2024-10-16T11:12:05Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\n`sys.flags` is a [`PyStructSequence`](https://docs.python.org/3/c-api/tuple.html#struct-sequence-objects). `PyStructSequence`  is similar to a named tuple, but it can have attributes that are not part of the sequence.\n\nCurrently, `sys.flags.gil` is not a \"sequence\" attribute:\n\n```python\n>>> import sys\n>>> sys.flags\nsys.flags(debug=0, inspect=0, interactive=0, optimize=0, dont_write_bytecode=0, no_user_site=0, no_site=0, ignore_environment=0, verbose=0, bytes_warning=0, quiet=0, hash_randomization=1, isolated=0, dev_mode=False, utf8_mode=0, warn_default_encoding=0, safe_path=False, int_max_str_digits=4300)\n```\n\nI think this was an oversight. We forgot to update the `n_in_sequence` field from 18 to 19 in gh-116338:\n\nhttps://github.com/python/cpython/blob/fda6bd842a2b93a501526f1b830eb900d935ac73/Python/sysmodule.c#L3123-L3128\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-122576\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122575/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122575/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122548",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122548/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122548/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122548/events",
      "html_url": "https://github.com/python/cpython/issues/122548",
      "id": 2441924480,
      "node_id": "I_kwDOBN0Z8c6RjM-A",
      "number": 122548,
      "title": "Add BRANCH_TAKEN and BRANCH_NOT_TAKEN events to sys.monitoring",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 8,
      "created_at": "2024-08-01T09:12:26Z",
      "updated_at": "2024-12-31T14:27:27Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\nProposal:\n\n* Add `BRANCH_TAKEN` and `BRANCH_NOT_TAKEN` events to `sys.monitoring`\n* Deprecate the old `BRANCH` event (as it will be redundant)\n* Monitoring `BRANCH` events implicitly monitors both the  `BRANCH_TAKEN` and `BRANCH_NOT_TAKEN` events\n* Disabling a `BRANCH_TAKEN` event will implicitly disable the matching `BRANCH` event, but only for the taken branch\n* Disabling a `BRANCH_NOT_TAKEN` event will implicitly disable the matching `BRANCH` event, but only for the not-taken branch\n* Disabling a `BRANCH` event will implicitly disable the both the matching `BRANCH_TAKEN` and `BRANCH_NOT_TAKEN` events\n\nThis is fully backwards compatible.\n\n\n### Has this already been discussed elsewhere?\n\nI have already discussed this feature proposal on Discourse\n\n### Links to previous discussion of this feature:\n\n\n[Discussion](https://discuss.python.org/t/updating-sys-monitoring-how-branch-events-are-disabled/59527) which also links to prior discussions.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-122564\n* gh-128115\n<!-- /gh-linked-prs -->\n\n```[tasklist]\n### Tasks\n- [ ] https://github.com/python/cpython/issues/123044\n- [ ] https://github.com/python/cpython/issues/123048\n- [ ] https://github.com/python/cpython/issues/123050\n- [ ] https://github.com/python/cpython/issues/128375\n```\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122548/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122548/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122525",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122525/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122525/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122525/events",
      "html_url": "https://github.com/python/cpython/issues/122525",
      "id": 2440307137,
      "node_id": "I_kwDOBN0Z8c6RdCHB",
      "number": 122525,
      "title": "platform.node() does not return the latest hostname value",
      "user": {
        "login": "kashav",
        "id": 8116382,
        "node_id": "MDQ6VXNlcjgxMTYzODI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8116382?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kashav",
        "html_url": "https://github.com/kashav",
        "followers_url": "https://api.github.com/users/kashav/followers",
        "following_url": "https://api.github.com/users/kashav/following{/other_user}",
        "gists_url": "https://api.github.com/users/kashav/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kashav/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kashav/subscriptions",
        "organizations_url": "https://api.github.com/users/kashav/orgs",
        "repos_url": "https://api.github.com/users/kashav/repos",
        "events_url": "https://api.github.com/users/kashav/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kashav/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2024-07-31T15:14:20Z",
      "updated_at": "2024-08-01T09:07:41Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nI think it's because of how cache is implemented for the uname() helper: https://github.com/python/cpython/blob/5377f55b4e022041b7b57b5489c66c9b3c046c7e/Lib/platform.py#L890-L905.\\\n\nGiven socket.gethostname() exists as well and respects the latest hostname value, maybe this issue is wontfix. Thought I would file it anyhow.\n\n### CPython versions tested on:\n\n3.12\n\n### Operating systems tested on:\n\nmacOS\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-122547\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122525/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122525/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122494",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122494/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122494/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122494/events",
      "html_url": "https://github.com/python/cpython/issues/122494",
      "id": 2439035815,
      "node_id": "I_kwDOBN0Z8c6RYLun",
      "number": 122494,
      "title": "Question on doc of __getattribute__",
      "user": {
        "login": "Kevvvvvvin",
        "id": 25028513,
        "node_id": "MDQ6VXNlcjI1MDI4NTEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25028513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kevvvvvvin",
        "html_url": "https://github.com/Kevvvvvvin",
        "followers_url": "https://api.github.com/users/Kevvvvvvin/followers",
        "following_url": "https://api.github.com/users/Kevvvvvvin/following{/other_user}",
        "gists_url": "https://api.github.com/users/Kevvvvvvin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Kevvvvvvin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Kevvvvvvin/subscriptions",
        "organizations_url": "https://api.github.com/users/Kevvvvvvin/orgs",
        "repos_url": "https://api.github.com/users/Kevvvvvvin/repos",
        "events_url": "https://api.github.com/users/Kevvvvvvin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Kevvvvvvin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 11,
      "created_at": "2024-07-31T03:32:51Z",
      "updated_at": "2024-08-12T16:10:20Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Documentation\r\n\r\nIn [`object.__getattribute__`](https://docs.python.org/3/reference/datamodel.html#object.__getattribute__):\r\n\r\n> For certain sensitive attribute accesses, raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `object.__getattr__` with arguments `obj` and `name`.\r\n\r\nCause getattr is called when the default attribute access fails, I think it should be `obj.__getattribute__` for this auditing event.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-122498\n* gh-122501\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122494/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122494/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122478",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122478/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122478/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122478/events",
      "html_url": "https://github.com/python/cpython/issues/122478",
      "id": 2438519783,
      "node_id": "I_kwDOBN0Z8c6RWNvn",
      "number": 122478,
      "title": "The new REPL outputs different tracebeck when custom sys.excepthook is used",
      "user": {
        "login": "serhiy-storchaka",
        "id": 3659035,
        "node_id": "MDQ6VXNlcjM2NTkwMzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/serhiy-storchaka",
        "html_url": "https://github.com/serhiy-storchaka",
        "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
        "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
        "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
        "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
        "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 6933214501,
          "node_id": "LA_kwDOBN0Z8c8AAAABnUB1JQ",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-repl",
          "name": "topic-repl",
          "color": "0052cc",
          "default": false,
          "description": "Related to the interactive shell"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2024-07-30T19:22:28Z",
      "updated_at": "2024-08-22T13:47:04Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\nIf `sys.systemhook` is not `sys.__systemhook__`, the new REPL outputs the line in the code module in the traceback:\n```pycon\n>>> xxx\nTraceback (most recent call last):\n  File \"<python-input-0>\", line 1, in <module>\n    xxx\nNameError: name 'xxx' is not defined\n>>> import sys; sys.excepthook = lambda *args: sys.__excepthook__(*args)\n>>> xxx\nTraceback (most recent call last):\n  File \"/home/serhiy/py/cpython/Lib/code.py\", line 91, in runcode\n    exec(code, self.locals)\n    ~~~~^^^^^^^^^^^^^^^^^^^\n  File \"<python-input-2>\", line 1, in <module>\n    xxx\nNameError: name 'xxx' is not defined\n```\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-122528\n* gh-122816\n* gh-122817\n* gh-123227\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122478/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122478/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122298",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122298/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122298/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122298/events",
      "html_url": "https://github.com/python/cpython/issues/122298",
      "id": 2431311630,
      "node_id": "I_kwDOBN0Z8c6Q6t8O",
      "number": 122298,
      "title": "gc.DEBUG_STATS no longer print out anything",
      "user": {
        "login": "user202729",
        "id": 25191436,
        "node_id": "MDQ6VXNlcjI1MTkxNDM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/25191436?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/user202729",
        "html_url": "https://github.com/user202729",
        "followers_url": "https://api.github.com/users/user202729/followers",
        "following_url": "https://api.github.com/users/user202729/following{/other_user}",
        "gists_url": "https://api.github.com/users/user202729/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/user202729/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/user202729/subscriptions",
        "organizations_url": "https://api.github.com/users/user202729/orgs",
        "repos_url": "https://api.github.com/users/user202729/repos",
        "events_url": "https://api.github.com/users/user202729/events{/privacy}",
        "received_events_url": "https://api.github.com/users/user202729/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "markshannon",
          "id": 9448417,
          "node_id": "MDQ6VXNlcjk0NDg0MTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/markshannon",
          "html_url": "https://github.com/markshannon",
          "followers_url": "https://api.github.com/users/markshannon/followers",
          "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
          "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
          "organizations_url": "https://api.github.com/users/markshannon/orgs",
          "repos_url": "https://api.github.com/users/markshannon/repos",
          "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/markshannon/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-07-26T02:55:41Z",
      "updated_at": "2024-08-23T15:39:24Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nThe command `gc.set_debug(gc.DEBUG_STATS)` no longer prints out any statistics, even though `gc.set_debug(gc.DEBUG_COLLECTABLE)` shows that the `gc` is still being run.\n\n(Probably caused by the incremental GC implementation, #116206 .)\n\nFor testing you can use the following code --- in previous Python versions the `collecting generation 0` text is printed, now it's not\n\n```python\nimport gc\nimport sys\nfrom time import sleep\ngc.set_debug(gc.DEBUG_STATS | gc.DEBUG_COLLECTABLE)\n\nfor __ in range(3000):\n\ta=[1]\n\ta[0]=a\n\tdel a\n\tprint(__)\n\tsleep(0.001)\n\nsys.exit()\n```\n\n### CPython versions tested on:\n\nCPython main branch\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-123261\n* gh-123268\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122298/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122298/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122294",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122294/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122294/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122294/events",
      "html_url": "https://github.com/python/cpython/issues/122294",
      "id": 2430827279,
      "node_id": "I_kwDOBN0Z8c6Q43sP",
      "number": 122294,
      "title": "Improve the efficiency of trace stitching",
      "user": {
        "login": "brandtbucher",
        "id": 40968415,
        "node_id": "MDQ6VXNlcjQwOTY4NDE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brandtbucher",
        "html_url": "https://github.com/brandtbucher",
        "followers_url": "https://api.github.com/users/brandtbucher/followers",
        "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
        "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
        "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
        "repos_url": "https://api.github.com/users/brandtbucher/repos",
        "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2024-07-25T19:17:27Z",
      "updated_at": "2024-07-27T14:35:43Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "From the way benchmarks have been responding to recent PRs, it certainly *seems* like side exits could be made more efficient, especially in the happy path. This is especially true of `_DYNAMIC_EXIT`, which needs to do quite a bit of work for a successful stitch... perhaps the best option here is to just reduce the number of `_DYNAMIC_EXIT`s that we run.\r\n\r\nThis could also include recompiling stitched traces together into the same executor to essentially remove stitching overhead, too.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-122295\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122294/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122294/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122199",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122199/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122199/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122199/events",
      "html_url": "https://github.com/python/cpython/issues/122199",
      "id": 2426096522,
      "node_id": "I_kwDOBN0Z8c6Qm0uK",
      "number": 122199,
      "title": "test_types Leaks References When Channels or Queues Used",
      "user": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018993468,
          "node_id": "LA_kwDOBN0Z8c7vjPk8",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-subinterpreters",
          "name": "topic-subinterpreters",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "ericsnowcurrently",
          "id": 1152074,
          "node_id": "MDQ6VXNlcjExNTIwNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ericsnowcurrently",
          "html_url": "https://github.com/ericsnowcurrently",
          "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
          "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
          "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
          "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
          "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
          "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-07-23T20:45:16Z",
      "updated_at": "2024-07-23T21:27:31Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\ngh-122192 incidentally identified an existing refleak related to using channels (or queues).\r\n\r\n### CPython versions tested on:\r\n\r\n3.13, CPython main branch\r\n\r\n### Operating systems tested on:\r\n\r\n_No response_\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-122200\r\n* gh-122202\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122199/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122199/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122153",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122153/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122153/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122153/events",
      "html_url": "https://github.com/python/cpython/issues/122153",
      "id": 2424668085,
      "node_id": "I_kwDOBN0Z8c6QhX-1",
      "number": 122153,
      "title": "Implementing sendmsg()/recvmsg() methods on Windows",
      "user": {
        "login": "artiomn",
        "id": 16290132,
        "node_id": "MDQ6VXNlcjE2MjkwMTMy",
        "avatar_url": "https://avatars.githubusercontent.com/u/16290132?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/artiomn",
        "html_url": "https://github.com/artiomn",
        "followers_url": "https://api.github.com/users/artiomn/followers",
        "following_url": "https://api.github.com/users/artiomn/following{/other_user}",
        "gists_url": "https://api.github.com/users/artiomn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/artiomn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/artiomn/subscriptions",
        "organizations_url": "https://api.github.com/users/artiomn/orgs",
        "repos_url": "https://api.github.com/users/artiomn/repos",
        "events_url": "https://api.github.com/users/artiomn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/artiomn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 570103914,
          "node_id": "MDU6TGFiZWw1NzAxMDM5MTQ=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-windows",
          "name": "OS-windows",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 4018672955,
          "node_id": "LA_kwDOBN0Z8c7viBU7",
          "url": "https://api.github.com/repos/python/cpython/labels/extension-modules",
          "name": "extension-modules",
          "color": "09fc59",
          "default": false,
          "description": "C modules in the Modules dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-07-23T09:06:44Z",
      "updated_at": "2024-10-08T11:39:15Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\nMethods socket.sendmsg() and socket.recvmsg() are implemented only for Unix-like systems.\nBut Windows OS has similar API too: https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsasendmsg\n\nImplementing these methods for WinSock2 will improve Python code portability.\n\n### Has this already been discussed elsewhere?\n\nThis is a minor feature, which does not need previous discussion elsewhere\n\n### Links to previous discussion of this feature:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-125100\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122153/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122153/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122136",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122136/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122136/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122136/events",
      "html_url": "https://github.com/python/cpython/issues/122136",
      "id": 2423537908,
      "node_id": "I_kwDOBN0Z8c6QdED0",
      "number": 122136,
      "title": "test.test_asyncio.test_server.TestServer2.test_abort_clients consistently fails on Linux 6.10.x",
      "user": {
        "login": "hroncok",
        "id": 2401856,
        "node_id": "MDQ6VXNlcjI0MDE4NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2401856?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hroncok",
        "html_url": "https://github.com/hroncok",
        "followers_url": "https://api.github.com/users/hroncok/followers",
        "following_url": "https://api.github.com/users/hroncok/following{/other_user}",
        "gists_url": "https://api.github.com/users/hroncok/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hroncok/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hroncok/subscriptions",
        "organizations_url": "https://api.github.com/users/hroncok/orgs",
        "repos_url": "https://api.github.com/users/hroncok/repos",
        "events_url": "https://api.github.com/users/hroncok/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hroncok/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 557226369,
          "node_id": "MDU6TGFiZWw1NTcyMjYzNjk=",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-asyncio",
          "name": "topic-asyncio",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 17,
      "created_at": "2024-07-22T18:40:13Z",
      "updated_at": "2024-09-02T12:04:42Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\nHello, we run the testsuite of the optimized and debug builds of Python in Fedora CI. Since the addition in https://github.com/python/cpython/commit/415964417771946dcb7a163951913adf84644b6d the test has constantly failed like this on Fedora Rawhide / Fedora Linux 41 (the development version). It passes on Fedora 40 and 39.\r\n\r\n```pytb\r\n======================================================================\r\nFAIL: test_abort_clients (test.test_asyncio.test_server.TestServer2.test_abort_clients)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib64/python3.13/unittest/async_case.py\", line 93, in _callTestMethod\r\n    if self._callMaybeAsync(method) is not None:\r\n       ~~~~~~~~~~~~~~~~~~~~^^^^^^^^\r\n  File \"/usr/lib64/python3.13/unittest/async_case.py\", line 115, in _callMaybeAsync\r\n    return self._asyncioRunner.run(\r\n           ~~~~~~~~~~~~~~~~~~~~~~~^\r\n        func(*args, **kwargs),\r\n        ^^^^^^^^^^^^^^^^^^^^^^\r\n        context=self._asyncioTestContext,\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    )\r\n    ^\r\n  File \"/usr/lib64/python3.13/asyncio/runners.py\", line 118, in run\r\n    return self._loop.run_until_complete(task)\r\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^\r\n  File \"/usr/lib64/python3.13/asyncio/base_events.py\", line 721, in run_until_complete\r\n    return future.result()\r\n           ~~~~~~~~~~~~~^^\r\n  File \"/usr/lib64/python3.13/test/test_asyncio/test_server.py\", line 249, in test_abort_clients\r\n    self.assertNotEqual(s_wr.transport.get_write_buffer_size(), 0)\r\n    ~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nAssertionError: 0 == 0\r\n\r\n----------------------------------------------------------------------\r\n```\r\n\r\nI was unable to reproduce this outside of Fedora CI. Perhaps this has to do with how the network is configured, no idea.\r\n\r\nThis is the output of `python3.13 -m test.pythoninfo`:\r\n\r\n<details>\r\n\r\n```\r\nPython debug information\r\n========================\r\n\r\nCC.version: gcc (GCC) 14.1.1 20240701 (Red Hat 14.1.1-7)\r\n_decimal.__libmpdec_version__: 2.5.1\r\n_testcapi.LONG_MAX: 9223372036854775807\r\n_testcapi.PY_SSIZE_T_MAX: 9223372036854775807\r\n_testcapi.Py_C_RECURSION_LIMIT: 10000\r\n_testcapi.SIZEOF_TIME_T: 8\r\n_testcapi.SIZEOF_WCHAR_T: 4\r\n_testinternalcapi.SIZEOF_PYGC_HEAD: 16\r\n_testinternalcapi.SIZEOF_PYOBJECT: 16\r\nbuild.NDEBUG: ignore assertions (macro defined)\r\nbuild.Py_DEBUG: No (sys.gettotalrefcount() missing)\r\nbuild.Py_TRACE_REFS: No (sys.getobjects() missing)\r\nbuild.WITH_DOC_STRINGS: Yes\r\nbuild.WITH_DTRACE: Yes\r\nbuild.WITH_FREELISTS: Yes\r\nbuild.WITH_MIMALLOC: Yes\r\nbuild.WITH_PYMALLOC: Yes\r\nbuild.WITH_VALGRIND: Yes\r\nbuiltins.float.double_format: IEEE, little-endian\r\nbuiltins.float.float_format: IEEE, little-endian\r\nconfig[_config_init]: 2\r\nconfig[_init_main]: True\r\nconfig[_install_importlib]: True\r\nconfig[_is_python_build]: False\r\nconfig[argv]: ['-m']\r\nconfig[base_exec_prefix]: '/usr'\r\nconfig[base_executable]: '/usr/bin/python3.13'\r\nconfig[base_prefix]: '/usr'\r\nconfig[buffered_stdio]: True\r\nconfig[bytes_warning]: 0\r\nconfig[check_hash_pycs_mode]: 'default'\r\nconfig[code_debug_ranges]: True\r\nconfig[configure_c_stdio]: True\r\nconfig[cpu_count]: -1\r\nconfig[dev_mode]: False\r\nconfig[dump_refs]: False\r\nconfig[dump_refs_file]: None\r\nconfig[exec_prefix]: '/usr'\r\nconfig[executable]: '/usr/bin/python3.13'\r\nconfig[faulthandler]: False\r\nconfig[filesystem_encoding]: 'utf-8'\r\nconfig[filesystem_errors]: 'surrogateescape'\r\nconfig[hash_seed]: 0\r\nconfig[home]: None\r\nconfig[import_time]: False\r\nconfig[inspect]: False\r\nconfig[install_signal_handlers]: True\r\nconfig[int_max_str_digits]: 4300\r\nconfig[interactive]: False\r\nconfig[isolated]: False\r\nconfig[malloc_stats]: False\r\nconfig[module_search_paths]: ['/usr/lib64/python313.zip', '/usr/lib64/python3.13', '/usr/lib64/python3.13/lib-dynload']\r\nconfig[module_search_paths_set]: True\r\nconfig[optimization_level]: 0\r\nconfig[orig_argv]: ['python3.13', '-m', 'test.pythoninfo']\r\nconfig[parse_argv]: True\r\nconfig[parser_debug]: False\r\nconfig[pathconfig_warnings]: True\r\nconfig[perf_profiling]: 0\r\nconfig[platlibdir]: 'lib64'\r\nconfig[prefix]: '/usr'\r\nconfig[program_name]: 'python3.13'\r\nconfig[pycache_prefix]: None\r\nconfig[pythonpath_env]: None\r\nconfig[quiet]: False\r\nconfig[run_command]: None\r\nconfig[run_filename]: None\r\nconfig[run_module]: 'test.pythoninfo'\r\nconfig[safe_path]: False\r\nconfig[show_ref_count]: False\r\nconfig[site_import]: True\r\nconfig[skip_source_first_line]: False\r\nconfig[stdio_encoding]: 'utf-8'\r\nconfig[stdio_errors]: 'strict'\r\nconfig[stdlib_dir]: '/usr/lib64/python3.13'\r\nconfig[sys_path_0]: '/var/str/python/selftest'\r\nconfig[tracemalloc]: 0\r\nconfig[use_environment]: True\r\nconfig[use_frozen_modules]: True\r\nconfig[use_hash_seed]: False\r\nconfig[user_site_directory]: True\r\nconfig[verbose]: 0\r\nconfig[warn_default_encoding]: False\r\nconfig[warnoptions]: []\r\nconfig[write_bytecode]: True\r\nconfig[xoptions]: []\r\ncurses.ncurses_version: curses.ncurses_version(major=6, minor=4, patch=20240127)\r\ndatetime.datetime.now: 2024-07-22 16:05:29.258162\r\nexpat.EXPAT_VERSION: expat_2.6.2\r\nfips.linux_crypto_fips_enabled: 0\r\nfips.openssl_fips_mode: 0\r\ngdb_version: GNU gdb (Fedora Linux) 14.2-14.fc41\r\ngdbm.GDBM_VERSION: 1.23.0\r\nglobal_config[Py_BytesWarningFlag]: 0\r\nglobal_config[Py_DebugFlag]: 0\r\nglobal_config[Py_DontWriteBytecodeFlag]: 0\r\nglobal_config[Py_FileSystemDefaultEncodeErrors]: 'surrogateescape'\r\nglobal_config[Py_FileSystemDefaultEncoding]: 'utf-8'\r\nglobal_config[Py_FrozenFlag]: 0\r\nglobal_config[Py_HasFileSystemDefaultEncoding]: 0\r\nglobal_config[Py_HashRandomizationFlag]: 1\r\nglobal_config[Py_IgnoreEnvironmentFlag]: 0\r\nglobal_config[Py_InspectFlag]: 0\r\nglobal_config[Py_InteractiveFlag]: 0\r\nglobal_config[Py_IsolatedFlag]: 0\r\nglobal_config[Py_NoSiteFlag]: 0\r\nglobal_config[Py_NoUserSiteDirectory]: 0\r\nglobal_config[Py_OptimizeFlag]: 0\r\nglobal_config[Py_QuietFlag]: 0\r\nglobal_config[Py_UTF8Mode]: 0\r\nglobal_config[Py_UnbufferedStdioFlag]: 0\r\nglobal_config[Py_VerboseFlag]: 0\r\nglobal_config[_Py_HasFileSystemDefaultEncodeErrors]: 0\r\nlibregrtests.build_info: release shared LTO+PGO valgrind dtrace\r\nlocale.getencoding: UTF-8\r\nos.cpu_count: 2\r\nos.environ[HOME]: /root\r\nos.environ[LANG]: en_US.UTF-8\r\nos.environ[PATH]: /root/.local/bin:/root/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/var/str/python/selftest\r\nos.environ[SHELL]: /bin/bash\r\nos.environ[TERM]: xterm\r\nos.getcwd: /var/str/python/selftest\r\nos.getegid: 0\r\nos.geteuid: 0\r\nos.getgid: 0\r\nos.getgrouplist: 0\r\nos.getgroups: 0\r\nos.getloadavg: (1.19873046875, 0.60791015625, 0.2412109375)\r\nos.getrandom: ready (initialized)\r\nos.getresgid: (0, 0, 0)\r\nos.getresuid: (0, 0, 0)\r\nos.getuid: 0\r\nos.login: root\r\nos.name: posix\r\nos.process_cpu_count: 2\r\nos.supports_bytes_environ: True\r\nos.supports_effective_ids: ['access']\r\nos.supports_fd: ['chdir', 'chmod', 'chown', 'execve', 'listdir', 'pathconf', 'scandir', 'stat', 'statvfs', 'truncate', 'utime']\r\nos.supports_follow_symlinks: ['access', 'chown', 'link', 'stat', 'utime']\r\nos.umask: 0o022\r\nos.uname: posix.uname_result(sysname='Linux', nodename='ip-172-31-17-184.us-east-2.compute.internal', release='6.11.0-0.rc0.20240719git720261cfc732.7.fc41.x86_64', version='#1 SMP PREEMPT_DYNAMIC Fri Jul 19 16:59:06 UTC 2024', machine='x86_64')\r\nplatform.architecture: 64bit ELF\r\nplatform.freedesktop_os_release[ID]: fedora\r\nplatform.freedesktop_os_release[NAME]: Fedora Linux\r\nplatform.freedesktop_os_release[VARIANT_ID]: cloud\r\nplatform.freedesktop_os_release[VERSION]: 41 (Cloud Edition Prerelease)\r\nplatform.freedesktop_os_release[VERSION_ID]: 41\r\nplatform.libc_ver: glibc 2.39.9000\r\nplatform.platform: Linux-6.11.0-0.rc0.20240719git720261cfc732.7.fc41.x86_64-x86_64-with-glibc2.39.9000\r\nplatform.python_implementation: CPython\r\npre_config[_config_init]: 2\r\npre_config[allocator]: 0\r\npre_config[coerce_c_locale]: 0\r\npre_config[coerce_c_locale_warn]: 0\r\npre_config[configure_locale]: 1\r\npre_config[dev_mode]: 0\r\npre_config[isolated]: 0\r\npre_config[parse_argv]: 1\r\npre_config[use_environment]: 1\r\npre_config[utf8_mode]: 0\r\npwd.getpwuid(0): pwd.struct_passwd(pw_name='root', pw_passwd='x', pw_uid=0, pw_gid=0, pw_gecos='Super User', pw_dir='/root', pw_shell='/bin/bash')\r\npymem.allocator: pymalloc\r\nreadline._READLINE_LIBRARY_VERSION: 8.2\r\nreadline._READLINE_RUNTIME_VERSION: 0x802\r\nreadline._READLINE_VERSION: 0x802\r\nresource.RLIMIT_AS: (-1, -1)\r\nresource.RLIMIT_CORE: (-1, -1)\r\nresource.RLIMIT_CPU: (-1, -1)\r\nresource.RLIMIT_DATA: (-1, -1)\r\nresource.RLIMIT_FSIZE: (-1, -1)\r\nresource.RLIMIT_MEMLOCK: (8388608, 8388608)\r\nresource.RLIMIT_MSGQUEUE: (819200, 819200)\r\nresource.RLIMIT_NICE: (0, 0)\r\nresource.RLIMIT_NOFILE: (1024, 524288)\r\nresource.RLIMIT_NPROC: (15042, 15042)\r\nresource.RLIMIT_OFILE: (1024, 524288)\r\nresource.RLIMIT_RSS: (-1, -1)\r\nresource.RLIMIT_RTPRIO: (0, 0)\r\nresource.RLIMIT_RTTIME: (-1, -1)\r\nresource.RLIMIT_SIGPENDING: (15042, 15042)\r\nresource.RLIMIT_STACK: (8388608, -1)\r\nresource.pagesize: 4096\r\nsocket.hostname: ip-172-31-17-184.us-east-2.compute.internal\r\nsqlite3.sqlite_version: 3.46.0\r\nssl.HAS_SNI: True\r\nssl.OPENSSL_VERSION: OpenSSL 3.2.2 4 Jun 2024\r\nssl.OPENSSL_VERSION_INFO: (3, 2, 0, 2, 0)\r\nssl.OP_ALL: 0x80000050\r\nssl.OP_NO_TLSv1_1: 0x10000000\r\nssl.SSLContext.maximum_version: -1\r\nssl.SSLContext.minimum_version: -2\r\nssl.SSLContext.options: 2186412112\r\nssl.SSLContext.protocol: 16\r\nssl.SSLContext.verify_mode: 2\r\nssl.default_https_context.maximum_version: -1\r\nssl.default_https_context.minimum_version: -2\r\nssl.default_https_context.options: 2186412112\r\nssl.default_https_context.protocol: 16\r\nssl.default_https_context.verify_mode: 2\r\nssl.environ[OPENSSL_CONF]: /non-existing-file\r\nssl.stdlib_context.maximum_version: -1\r\nssl.stdlib_context.minimum_version: -2\r\nssl.stdlib_context.options: 2186412112\r\nssl.stdlib_context.protocol: 16\r\nssl.stdlib_context.verify_mode: 0\r\nsubprocess._USE_POSIX_SPAWN: True\r\nsupport.MS_WINDOWS: False\r\nsupport._is_gui_available: False\r\nsupport.check_sanitizer(address=True): False\r\nsupport.check_sanitizer(memory=True): False\r\nsupport.check_sanitizer(ub=True): False\r\nsupport.has_fork_support: True\r\nsupport.has_socket_support: True\r\nsupport.has_strftime_extensions: True\r\nsupport.has_subprocess_support: True\r\nsupport.is_android: False\r\nsupport.is_emscripten: False\r\nsupport.is_jython: False\r\nsupport.is_wasi: False\r\nsupport.python_is_optimized: True\r\nsupport_os_helper.can_chmod: True\r\nsupport_os_helper.can_dac_override: True\r\nsupport_os_helper.can_symlink: True\r\nsupport_os_helper.can_xattr: True\r\nsupport_socket_helper.IPV6_ENABLED: True\r\nsupport_socket_helper.has_gethostname: True\r\nsupport_socket_helper.tcp_blackhole: False\r\nsupport_threading_helper.can_start_thread: True\r\nsys._is_gil_enabled: True\r\nsys.api_version: 1013\r\nsys.builtin_module_names: ('_abc', '_ast', '_codecs', '_collections', '_functools', '_imp', '_io', '_locale', '_operator', '_signal', '_sre', '_stat', '_string', '_suggestions', '_symtable', '_sysconfig', '_thread', '_tokenize', '_tracemalloc', '_typing', '_warnings', '_weakref', 'atexit', 'builtins', 'errno', 'faulthandler', 'gc', 'itertools', 'marshal', 'posix', 'pwd', 'sys', 'time')\r\nsys.byteorder: little\r\nsys.dont_write_bytecode: False\r\nsys.executable: /usr/bin/python3.13\r\nsys.filesystem_encoding: utf-8/surrogateescape\r\nsys.flags: sys.flags(debug=0, inspect=0, interactive=0, optimize=0, dont_write_bytecode=0, no_user_site=0, no_site=0, ignore_environment=0, verbose=0, bytes_warning=0, quiet=0, hash_randomization=1, isolated=0, dev_mode=False, utf8_mode=0, warn_default_encoding=0, safe_path=False, int_max_str_digits=4300)\r\nsys.float_info: sys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)\r\nsys.float_repr_style: short\r\nsys.getrecursionlimit: 1000\r\nsys.hash_info: sys.hash_info(width=64, modulus=2305843009213693951, inf=314159, nan=0, imag=1000003, algorithm='siphash13', hash_bits=64, seed_bits=128, cutoff=0)\r\nsys.hexversion: 51183796\r\nsys.implementation: namespace(name='cpython', cache_tag='cpython-313', version=sys.version_info(major=3, minor=13, micro=0, releaselevel='beta', serial=4), hexversion=51183796, _multiarch='x86_64-linux-gnu')\r\nsys.int_info: sys.int_info(bits_per_digit=30, sizeof_digit=4, default_max_str_digits=4300, str_digits_check_threshold=640)\r\nsys.maxsize: 9223372036854775807\r\nsys.maxunicode: 1114111\r\nsys.path: ['/var/str/python/selftest', '/usr/lib64/python313.zip', '/usr/lib64/python3.13', '/usr/lib64/python3.13/lib-dynload', '/usr/lib64/python3.13/site-packages', '/usr/lib/python3.13/site-packages']\r\nsys.platform: linux\r\nsys.platlibdir: lib64\r\nsys.prefix: /usr\r\nsys.stderr.encoding: utf-8/backslashreplace\r\nsys.stdin.encoding: utf-8/strict\r\nsys.stdout.encoding: utf-8/strict\r\nsys.thread_info: sys.thread_info(name='pthread', lock='semaphore', version='NPTL 2.39.9000')\r\nsys.version: 3.13.0b4 (main, Jul 19 2024, 00:00:00) [GCC 14.1.1 20240701 (Red Hat 14.1.1-7)]\r\nsys.version_info: sys.version_info(major=3, minor=13, micro=0, releaselevel='beta', serial=4)\r\nsysconfig.is_python_build: False\r\nsysconfig[CCSHARED]: -fPIC\r\nsysconfig[CC]: gcc\r\nsysconfig[CFLAGSFORSHARED]: -fPIC\r\nsysconfig[CFLAGS]: -fno-strict-overflow -Wsign-compare -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DNDEBUG -fcf-protection -fexceptions -fcf-protection -fexceptions -fcf-protection -fexceptions -O3\r\nsysconfig[CONFIG_ARGS]: '--build=x86_64-redhat-linux-gnu' '--host=x86_64-redhat-linux-gnu' '--program-prefix=' '--disable-dependency-tracking' '--prefix=/usr' '--exec-prefix=/usr' '--bindir=/usr/bin' '--sbindir=/usr/sbin' '--sysconfdir=/etc' '--datadir=/usr/share' '--includedir=/usr/include' '--libdir=/usr/lib64' '--libexecdir=/usr/libexec' '--localstatedir=/var' '--runstatedir=/run' '--sharedstatedir=/var/lib' '--mandir=/usr/share/man' '--infodir=/usr/share/info' '--with-platlibdir=lib64' '--enable-ipv6' '--enable-shared' '--with-computed-gotos=yes' '--with-dbmliborder=gdbm:ndbm:bdb' '--with-system-expat' '--with-system-ffi' '--with-system-libmpdec' '--enable-loadable-sqlite-extensions' '--with-dtrace' '--with-lto' '--with-ssl-default-suites=openssl' '--without-static-libpython' '--with-wheel-pkg-dir=/usr/share/python-wheels' '--with-valgrind' '--without-ensurepip' '--enable-experimental-jit=yes-off' '--enable-optimizations' 'build_alias=x86_64-redhat-linux-gnu' 'host_alias=x86_64-redhat-linux-gnu' 'PKG_CONFIG_PATH=:/usr/lib64/pkgconfig:/usr/share/pkgconfig' 'CC=gcc' 'CFLAGS=-fcf-protection -fexceptions ' 'LDFLAGS= ' 'CPPFLAGS='\r\nsysconfig[HOST_GNU_TYPE]: x86_64-redhat-linux-gnu\r\nsysconfig[MACHDEP]: linux\r\nsysconfig[MULTIARCH]: x86_64-linux-gnu\r\nsysconfig[OPT]: -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DNDEBUG -fcf-protection -fexceptions\r\nsysconfig[PGO_PROF_USE_FLAG]: -fprofile-use -fprofile-correction\r\nsysconfig[PY_CFLAGS]: -fno-strict-overflow -Wsign-compare -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DNDEBUG -fcf-protection -fexceptions -fcf-protection -fexceptions -fcf-protection -fexceptions -O3\r\nsysconfig[PY_CFLAGS_NODIST]: -flto=auto -ffat-lto-objects -fexceptions -g -grecord-gcc-switches -pipe -Wall -Wno-complain-wrong-lang -Werror=format-security -Wp,-U_FORTIFY_SOURCE,-D_FORTIFY_SOURCE=3 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -march=x86-64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -mtls-dialect=gnu2 -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -D_GNU_SOURCE -fPIC -fwrapv -D_Py_TIER2=3 -D_Py_JIT -fno-semantic-interposition -flto -fuse-linker-plugin -ffat-lto-objects -flto-partition=none -g -std=c11 -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -Wstrict-prototypes -Werror=implicit-function-declaration -fvisibility=hidden -flto=auto -ffat-lto-objects -fexceptions -g -grecord-gcc-switches -pipe -Wall -Wno-complain-wrong-lang -Werror=format-security -Wp,-U_FORTIFY_SOURCE,-D_FORTIFY_SOURCE=3 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -march=x86-64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -mtls-dialect=gnu2 -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -D_GNU_SOURCE -fPIC -fwrapv -O3 -fprofile-use -fprofile-correction -I/builddir/build/BUILD/python3.13-3.13.0_b4-build/Python-3.13.0b4/Include/internal -I/builddir/build/BUILD/python3.13-3.13.0_b4-build/Python-3.13.0b4/Include/internal/mimalloc\r\nsysconfig[PY_CORE_LDFLAGS]: -Wl,-z,relro -Wl,--as-needed -Wl,-z,pack-relative-relocs -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -Wl,--build-id=sha1 -specs=/usr/lib/rpm/redhat/redhat-package-notes -g -fno-semantic-interposition -flto -fuse-linker-plugin -ffat-lto-objects -flto-partition=none -g -Wl,-z,relro -Wl,--as-needed -Wl,-z,pack-relative-relocs -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -Wl,--build-id=sha1 -specs=/usr/lib/rpm/redhat/redhat-package-notes -g\r\nsysconfig[PY_LDFLAGS_NODIST]: -Wl,-z,relro -Wl,--as-needed -Wl,-z,pack-relative-relocs -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -Wl,--build-id=sha1 -specs=/usr/lib/rpm/redhat/redhat-package-notes -g -fno-semantic-interposition -flto -fuse-linker-plugin -ffat-lto-objects -flto-partition=none -g -Wl,-z,relro -Wl,--as-needed -Wl,-z,pack-relative-relocs -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -Wl,--build-id=sha1 -specs=/usr/lib/rpm/redhat/redhat-package-notes -g\r\nsysconfig[PY_STDMODULE_CFLAGS]: -fno-strict-overflow -Wsign-compare -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DNDEBUG -fcf-protection -fexceptions -fcf-protection -fexceptions -fcf-protection -fexceptions -O3 -flto=auto -ffat-lto-objects -fexceptions -g -grecord-gcc-switches -pipe -Wall -Wno-complain-wrong-lang -Werror=format-security -Wp,-U_FORTIFY_SOURCE,-D_FORTIFY_SOURCE=3 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -march=x86-64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -mtls-dialect=gnu2 -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -D_GNU_SOURCE -fPIC -fwrapv -D_Py_TIER2=3 -D_Py_JIT -fno-semantic-interposition -flto -fuse-linker-plugin -ffat-lto-objects -flto-partition=none -g -std=c11 -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -Wstrict-prototypes -Werror=implicit-function-declaration -fvisibility=hidden -flto=auto -ffat-lto-objects -fexceptions -g -grecord-gcc-switches -pipe -Wall -Wno-complain-wrong-lang -Werror=format-security -Wp,-U_FORTIFY_SOURCE,-D_FORTIFY_SOURCE=3 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -march=x86-64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -mtls-dialect=gnu2 -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -D_GNU_SOURCE -fPIC -fwrapv -O3 -fprofile-use -fprofile-correction -I/builddir/build/BUILD/python3.13-3.13.0_b4-build/Python-3.13.0b4/Include/internal -I/builddir/build/BUILD/python3.13-3.13.0_b4-build/Python-3.13.0b4/Include/internal/mimalloc -IObjects -IInclude -IPython -I. -I/builddir/build/BUILD/python3.13-3.13.0_b4-build/Python-3.13.0b4/Include -fPIC\r\nsysconfig[Py_DEBUG]: 0\r\nsysconfig[Py_ENABLE_SHARED]: 1\r\nsysconfig[Py_GIL_DISABLED]: 0\r\nsysconfig[SHELL]: /bin/sh -e\r\nsysconfig[SOABI]: cpython-313-x86_64-linux-gnu\r\nsysconfig[TEST_MODULES]: yes\r\nsysconfig[abs_builddir]: /builddir/build/BUILD/python3.13-3.13.0_b4-build/Python-3.13.0b4/build/optimized\r\nsysconfig[abs_srcdir]: /builddir/build/BUILD/python3.13-3.13.0_b4-build/Python-3.13.0b4\r\nsysconfig[prefix]: /usr\r\nsysconfig[srcdir]: /usr/lib64/python3.13/config-3.13-x86_64-linux-gnu\r\ntempfile.gettempdir: /tmp\r\ntest_socket.HAVE_SOCKET_ALG: True\r\ntest_socket.HAVE_SOCKET_BLUETOOTH: False\r\ntest_socket.HAVE_SOCKET_CAN: False\r\ntest_socket.HAVE_SOCKET_CAN_ISOTP: False\r\ntest_socket.HAVE_SOCKET_CAN_J1939: False\r\ntest_socket.HAVE_SOCKET_HYPERV: False\r\ntest_socket.HAVE_SOCKET_QIPCRTR: True\r\ntest_socket.HAVE_SOCKET_RDS: False\r\ntest_socket.HAVE_SOCKET_UDPLITE: True\r\ntest_socket.HAVE_SOCKET_VSOCK: True\r\ntime.altzone: 0\r\ntime.daylight: 0\r\ntime.get_clock_info(monotonic): namespace(implementation='clock_gettime(CLOCK_MONOTONIC)', monotonic=True, adjustable=False, resolution=1e-09)\r\ntime.get_clock_info(perf_counter): namespace(implementation='clock_gettime(CLOCK_MONOTONIC)', monotonic=True, adjustable=False, resolution=1e-09)\r\ntime.get_clock_info(process_time): namespace(implementation='clock_gettime(CLOCK_PROCESS_CPUTIME_ID)', monotonic=True, adjustable=False, resolution=1e-09)\r\ntime.get_clock_info(thread_time): namespace(implementation='clock_gettime(CLOCK_THREAD_CPUTIME_ID)', monotonic=True, adjustable=False, resolution=1e-09)\r\ntime.get_clock_info(time): namespace(implementation='clock_gettime(CLOCK_REALTIME)', monotonic=False, adjustable=True, resolution=1e-09)\r\ntime.time: 1721664329.3427575\r\ntime.timezone: 0\r\ntime.tzname: ('UTC', 'UTC')\r\ntkinter.TCL_VERSION: 8.6\r\ntkinter.TK_VERSION: 8.6\r\ntkinter.info_patchlevel: 8.6.14\r\nzlib.ZLIB_RUNTIME_VERSION: 1.3.1.zlib-ng\r\nzlib.ZLIB_VERSION: 1.3.1.zlib-ng\r\n```\r\n\r\n</details>\r\n\r\nWe invoke the installed tests like this:\r\n\r\n```\r\npython3.13 -m test -wW -j0 -i test_check_probes\r\n```\r\n\r\nI'd like to debug this and see if something is wrong with the test or perhaps in Fedora 41. But I don't know where to start.\r\n\r\n### CPython versions tested on:\r\n\r\n3.13\r\n\r\n### Operating systems tested on:\r\n\r\nLinux\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-123423\r\n* gh-123443\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122136/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122136/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122085",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122085/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122085/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122085/events",
      "html_url": "https://github.com/python/cpython/issues/122085",
      "id": 2421313411,
      "node_id": "I_kwDOBN0Z8c6QUk-D",
      "number": 122085,
      "title": "Docs: move deprecations into include files",
      "user": {
        "login": "hugovk",
        "id": 1324225,
        "node_id": "MDQ6VXNlcjEzMjQyMjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1324225?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugovk",
        "html_url": "https://github.com/hugovk",
        "followers_url": "https://api.github.com/users/hugovk/followers",
        "following_url": "https://api.github.com/users/hugovk/following{/other_user}",
        "gists_url": "https://api.github.com/users/hugovk/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hugovk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hugovk/subscriptions",
        "organizations_url": "https://api.github.com/users/hugovk/orgs",
        "repos_url": "https://api.github.com/users/hugovk/repos",
        "events_url": "https://api.github.com/users/hugovk/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hugovk/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2024-07-21T09:27:23Z",
      "updated_at": "2024-07-30T12:54:42Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Documentation\r\n\r\nRe: https://discuss.python.org/t/streamline-whats-new-by-moving-deprecations-and-removals-out-of-news/53997/8\r\n\r\nTo avoid needing to duplicate and sync the deprecation sections across What's New files, and ease backports, move them into include files.\r\n\r\n* Python:\r\n  * [x] Use include files for `whatsnew/3.12.rst` deprecations\r\n  * [x] Use include files for `whatsnew/3.13.rst` deprecations\r\n  * [x] Use include files for `whatsnew/3.14.rst` deprecations\r\n* C API:\r\n  * [x] Use include files for deprecations\r\n* [x] Create dedicated page to list deprecations using include files\r\n\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-121241\r\n* gh-122038\r\n* gh-122093\r\n* gh-122223\r\n* gh-122225\r\n* gh-122224\r\n* gh-122242\r\n* gh-122350\r\n* gh-122351\r\n* gh-109843\r\n* gh-122352\r\n* gh-122374\r\n* gh-122375\r\n* gh-122422\n* gh-122423\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122085/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 1,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122085/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122034",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122034/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122034/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122034/events",
      "html_url": "https://github.com/python/cpython/issues/122034",
      "id": 2419204603,
      "node_id": "I_kwDOBN0Z8c6QMiH7",
      "number": 122034,
      "title": "The use of `PyStackRef_AsPyObjectBorrow` makes it hard to track ownership of references, making analysis of escaping calls too difficult",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-07-19T15:23:30Z",
      "updated_at": "2024-07-20T09:29:45Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "The problem with `PyStackRef_AsPyObjectBorrow` is that it is not clear whether the reference is owned by the stack ref or the pointer.\r\n\r\nBorrowing references across calls is fine but in less structured code, it is error prone and very hard to analyze.\r\n\r\nThe solution is change most, ideally all, uses of `PyStackRef_AsPyObjectBorrow` to `PyStackRef_AsPyObjectSteal` so that the ownership of the reference is clear.\r\nE.g.\r\n```\r\n        inst(UNARY_NEGATIVE, (value -- res)) {\r\n            PyObject *val_o = PyStackRef_AsPyObjectBorrow(value);\r\n            PyObject *res_o = PyNumber_Negative(val_o);\r\n            PyStackRef_CLOSE(value);\r\n            ERROR_IF(res_o == NULL, error);\r\n            res = PyStackRef_FromPyObjectSteal(res_o);\r\n        }\r\n```\r\nwould become:\r\n```\r\n        inst(UNARY_NEGATIVE, (value -- res)) {\r\n            PyObject *val_o = PyStackRef_AsPyObjectSteal(value);\r\n            PyObject *res_o = PyNumber_Negative(val_o);\r\n            Py_DECREF(val_o);\r\n            ERROR_IF(res_o == NULL, error);\r\n            res = PyStackRef_FromPyObjectSteal(res_o);\r\n        }\r\n```\r\n\r\nThis ensures that during the escaping call to `PyNumber_Negative`, the reference to the `value` a `PyObject *`, so will not be reclaimed by the garbage collector.\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-122037\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122034/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122034/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122029",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122029/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122029/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122029/events",
      "html_url": "https://github.com/python/cpython/issues/122029",
      "id": 2418933660,
      "node_id": "I_kwDOBN0Z8c6QLf-c",
      "number": 122029,
      "title": "CPython profiler broken with TensorFlow 2.17.0 code in Python 3.12.1+",
      "user": {
        "login": "Yingqin-SU",
        "id": 57721746,
        "node_id": "MDQ6VXNlcjU3NzIxNzQ2",
        "avatar_url": "https://avatars.githubusercontent.com/u/57721746?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Yingqin-SU",
        "html_url": "https://github.com/Yingqin-SU",
        "followers_url": "https://api.github.com/users/Yingqin-SU/followers",
        "following_url": "https://api.github.com/users/Yingqin-SU/following{/other_user}",
        "gists_url": "https://api.github.com/users/Yingqin-SU/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Yingqin-SU/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Yingqin-SU/subscriptions",
        "organizations_url": "https://api.github.com/users/Yingqin-SU/orgs",
        "repos_url": "https://api.github.com/users/Yingqin-SU/repos",
        "events_url": "https://api.github.com/users/Yingqin-SU/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Yingqin-SU/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "gaogaotiantian",
        "id": 13121107,
        "node_id": "MDQ6VXNlcjEzMTIxMTA3",
        "avatar_url": "https://avatars.githubusercontent.com/u/13121107?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaogaotiantian",
        "html_url": "https://github.com/gaogaotiantian",
        "followers_url": "https://api.github.com/users/gaogaotiantian/followers",
        "following_url": "https://api.github.com/users/gaogaotiantian/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaogaotiantian/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaogaotiantian/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaogaotiantian/subscriptions",
        "organizations_url": "https://api.github.com/users/gaogaotiantian/orgs",
        "repos_url": "https://api.github.com/users/gaogaotiantian/repos",
        "events_url": "https://api.github.com/users/gaogaotiantian/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaogaotiantian/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "gaogaotiantian",
          "id": 13121107,
          "node_id": "MDQ6VXNlcjEzMTIxMTA3",
          "avatar_url": "https://avatars.githubusercontent.com/u/13121107?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/gaogaotiantian",
          "html_url": "https://github.com/gaogaotiantian",
          "followers_url": "https://api.github.com/users/gaogaotiantian/followers",
          "following_url": "https://api.github.com/users/gaogaotiantian/following{/other_user}",
          "gists_url": "https://api.github.com/users/gaogaotiantian/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/gaogaotiantian/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/gaogaotiantian/subscriptions",
          "organizations_url": "https://api.github.com/users/gaogaotiantian/orgs",
          "repos_url": "https://api.github.com/users/gaogaotiantian/repos",
          "events_url": "https://api.github.com/users/gaogaotiantian/events{/privacy}",
          "received_events_url": "https://api.github.com/users/gaogaotiantian/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 8,
      "created_at": "2024-07-19T13:31:19Z",
      "updated_at": "2024-07-23T22:50:21Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nLately, I've been testing IA code on various Python interpreters and their corresponding profilers across multiple platforms. After multiple attempts, I've noticed that CPython profilers consistently fail to analyze the following code.\n```python\nimport tensorflow as tf\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\nx_train = tf.keras.utils.normalize(x_train, axis=1)\nx_test = tf.keras.utils.normalize(x_test, axis=1)\n\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=2)\n\nval_loss, val_acc = model.evaluate(x_test, y_test)\nprint(val_loss, val_acc)\n\nmodel.save(\"epic_num_reader.keras\")\n\npredictions = model.predict([x_test])\n\nprint(predictions)\n```\nI've been testing an IA code on different Python interpreters and their respective profilers across multiple platforms. Specifically, I've been working with a simple TensorFlow+Keras code that classifies number image inputs. Interestingly, I found that the code works well with IntelPython, which uses Python 3.9.19 as its latest version. When I tested the code on multiple versions of CPython, I noticed that the profiler works well and returns information for CPython versions less than 3.12.1. However, since CPython 3.12.1, the code crashes with an error.\n\n```bash\n2024-07-19 14:53:51.996897: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.\n2024-07-19 14:53:51.997294: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.\n2024-07-19 14:53:51.999400: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.\n2024-07-19 14:53:52.005233: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-07-19 14:53:52.014843: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-07-19 14:53:52.017590: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n2024-07-19 14:53:52.025009: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\nTo enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\nTraceback (most recent call last):\n  File \"<frozen runpy>\", line 198, in _run_module_as_main\n  File \"<frozen runpy>\", line 88, in _run_code\n  File \"/home/user/.pyenv/versions/3.12.1/lib/python3.12/profile.py\", line 615, in <module>\n    main()\n  File \"/home/user/.pyenv/versions/3.12.1/lib/python3.12/profile.py\", line 604, in main\n    runctx(code, globs, None, options.outfile, options.sort)\n  File \"/home/user/.pyenv/versions/3.12.1/lib/python3.12/profile.py\", line 101, in runctx\n    return _Utils(Profile).runctx(statement, globals, locals, filename, sort)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/user/.pyenv/versions/3.12.1/lib/python3.12/profile.py\", line 64, in runctx\n    prof.runctx(statement, globals, locals)\n  File \"/home/user/.pyenv/versions/3.12.1/lib/python3.12/profile.py\", line 424, in runctx\n    exec(cmd, globals, locals)\n  File \"mnist_number.py\", line 1, in <module>\n    import tensorflow as tf\n  File \"/home/user/.pyenv/versions/3.12.1/lib/python3.12/site-packages/tensorflow/__init__.py\", line 47, in <module>\n    from tensorflow._api.v2 import __internal__\n  File \"/home/user/.pyenv/versions/3.12.1/lib/python3.12/site-packages/tensorflow/_api/v2/__internal__/__init__.py\", line 8, in <module>\n    from tensorflow._api.v2.__internal__ import autograph\n  File \"/home/user/.pyenv/versions/3.12.1/lib/python3.12/site-packages/tensorflow/_api/v2/__internal__/autograph/__init__.py\", line 8, in <module>\n    from tensorflow.python.autograph.core.ag_ctx import control_status_ctx # line: 34\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/user/.pyenv/versions/3.12.1/lib/python3.12/site-packages/tensorflow/python/autograph/core/ag_ctx.py\", line 21, in <module>\n    from tensorflow.python.autograph.utils import ag_logging\n  File \"/home/user/.pyenv/versions/3.12.1/lib/python3.12/site-packages/tensorflow/python/autograph/utils/__init__.py\", line 17, in <module>\n    from tensorflow.python.autograph.utils.context_managers import control_dependency_on_returns\n  File \"/home/user/.pyenv/versions/3.12.1/lib/python3.12/site-packages/tensorflow/python/autograph/utils/context_managers.py\", line 19, in <module>\n    from tensorflow.python.framework import ops\n  File \"/home/user/.pyenv/versions/3.12.1/lib/python3.12/site-packages/tensorflow/python/framework/ops.py\", line 50, in <module>\n    from tensorflow.python.eager import context\n  File \"/home/user/.pyenv/versions/3.12.1/lib/python3.12/site-packages/tensorflow/python/eager/context.py\", line 37, in <module>\n    from tensorflow.python.eager import execute\n  File \"/home/user/.pyenv/versions/3.12.1/lib/python3.12/site-packages/tensorflow/python/eager/execute.py\", line 21, in <module>\n    from tensorflow.python.framework import dtypes\n  File \"/home/user/.pyenv/versions/3.12.1/lib/python3.12/site-packages/tensorflow/python/framework/dtypes.py\", line 308, in <module>\n    resource = DType(types_pb2.DT_RESOURCE)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/user/.pyenv/versions/3.12.1/lib/python3.12/site-packages/tensorflow/python/framework/dtypes.py\", line 81, in __init__\n    self._handle_data = handle_data\n    ^^^^^^^^^^^^^^^^^\n  File \"/home/user/.pyenv/versions/3.12.1/lib/python3.12/profile.py\", line 209, in trace_dispatch_i\n    if self.dispatch[event](self, frame, t):\n       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/user/.pyenv/versions/3.12.1/lib/python3.12/profile.py\", line 293, in trace_dispatch_return\n    assert frame is self.cur[-2].f_back, (\"Bad return\", self.cur[-3])\nAssertionError: ('Bad return', ('/home/user/.pyenv/versions/3.12.1/lib/python3.12/site-packages/tensorflow/python/framework/dtypes.py', 1, '<module>'))\n```\n\nI ran the code on my laptop, which has a Tiger Lake architecture and no NVIDIA GPU or Tensor Cores. As I didn't recompile the TensorFlow library. Therefore, it's expected to see warning messages related to the lack of AVX512 and GPU acceleration.\n\nTest Environnement:\n  WSL2 Ubuntu 20.04 \n    - Python 3.12.4 \n  Manjaro \n    - Python 3.9.19\n    - PYthon 3.10.14\n    - Python 3.11.9\n    - Python 3.12.0\n    - Python 3.12.1\n    - Python 3.12.2\n    - Python 3.12.3\n    - Python 3.12.4\n  Fedora\n    - Python 3.12.4\n    \nFor Python versions prior to 3.12.1, I only received warning messages, and the profiler worked as expected. However, since upgrading to 3.12.1, I've started encountering AssertError issues. Interestingly, I've compared the profile.py file between versions 3.12.0 and 3.12.1, and they appear to be identical. It's possible that the introduction of PEP 695 in Python 3.12 is causing this occasional error.\n\nWhile waiting for your response, I wish you a good day.\n\nAaron SU\n\n\n### CPython versions tested on:\n\n3.9, 3.10, 3.11, 3.12\n\n### Operating systems tested on:\n\nLinux, Windows\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-122072\n* gh-122177\n* gh-122205\n* gh-122206\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122029/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122029/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/121970",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/121970/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/121970/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/121970/events",
      "html_url": "https://github.com/python/cpython/issues/121970",
      "id": 2416621377,
      "node_id": "I_kwDOBN0Z8c6QCrdB",
      "number": 121970,
      "title": "Improve and reorganise ``pyspecific``",
      "user": {
        "login": "AA-Turner",
        "id": 9087854,
        "node_id": "MDQ6VXNlcjkwODc4NTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9087854?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AA-Turner",
        "html_url": "https://github.com/AA-Turner",
        "followers_url": "https://api.github.com/users/AA-Turner/followers",
        "following_url": "https://api.github.com/users/AA-Turner/following{/other_user}",
        "gists_url": "https://api.github.com/users/AA-Turner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/AA-Turner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AA-Turner/subscriptions",
        "organizations_url": "https://api.github.com/users/AA-Turner/orgs",
        "repos_url": "https://api.github.com/users/AA-Turner/repos",
        "events_url": "https://api.github.com/users/AA-Turner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/AA-Turner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-07-18T14:42:28Z",
      "updated_at": "2024-10-10T09:08:55Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\nPython has several custom Sphinx extensions, many of which use older constructs and can be simplified and improved. This serves as a tracking issue for such PRs.\n\n### Has this already been discussed elsewhere?\n\nThis is a minor feature, which does not need previous discussion elsewhere\n\n### Links to previous discussion of this feature:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-121971\n* gh-121972\n* gh-121976\n* gh-121985\n* gh-121991\n* gh-121995\n* gh-122008\n* gh-122009\n* gh-122015\n* gh-122016\n* gh-122018\n* gh-122019\n* gh-122020\n* gh-122021\n* gh-122022\n* gh-122023\n* gh-122024\n* gh-122025\n* gh-122027\n* gh-122060\n* gh-122061\n* gh-122065\n* gh-122167\n* gh-122168\n* gh-122325\n* gh-122434\n* gh-122435\n* gh-122651\n* gh-122653\n* gh-122654\n* gh-125082\n* gh-125237\n* gh-125238\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/121970/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/121970/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/121966",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/121966/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/121966/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/121966/events",
      "html_url": "https://github.com/python/cpython/issues/121966",
      "id": 2416372571,
      "node_id": "I_kwDOBN0Z8c6QButb",
      "number": 121966,
      "title": "test_makefile_test_folders test failures on python 3.12",
      "user": {
        "login": "Krock21",
        "id": 14953722,
        "node_id": "MDQ6VXNlcjE0OTUzNzIy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14953722?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Krock21",
        "html_url": "https://github.com/Krock21",
        "followers_url": "https://api.github.com/users/Krock21/followers",
        "following_url": "https://api.github.com/users/Krock21/following{/other_user}",
        "gists_url": "https://api.github.com/users/Krock21/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Krock21/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Krock21/subscriptions",
        "organizations_url": "https://api.github.com/users/Krock21/orgs",
        "repos_url": "https://api.github.com/users/Krock21/repos",
        "events_url": "https://api.github.com/users/Krock21/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Krock21/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-07-18T13:21:14Z",
      "updated_at": "2024-09-28T17:22:29Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nHi!\n\nI try to build python 3.12 on Ubuntu 22.04 but `make test` fails for me\n\n```\n~/tmp/cpython/build-v3.12.3$ ../configure && make && make test\n...\n0:01:41 load avg: 14.84 [1/1/1] test_tools failed (16 failures)\nRe-running test_tools in verbose mode (matching: test_makefile_test_folders, test_makefile_test_folders, test_makefile_test_folders, test_makefile_test_folders, test_makefile_test_folders, test_makefile_test_folders, test_makefile_test_folders, test_makefile_test_folders, test_makefile_test_folders, test_makefile_test_folders, test_makefile_test_folders, test_makefile_test_folders, test_makefile_test_folders, test_makefile_test_folders, test_makefile_test_folders, test_makefile_test_folders)\ntest_makefile_test_folders (test.test_tools.test_makefile.TestMakefile.test_makefile_test_folders) ...\n  test_makefile_test_folders (test.test_tools.test_makefile.TestMakefile.test_makefile_test_folders) (relpath='test/test_import/data/package3') ... FAIL\n  test_makefile_test_folders (test.test_tools.test_makefile.TestMakefile.test_makefile_test_folders) (relpath='test/test_import/data/package4') ... FAIL\n  test_makefile_test_folders (test.test_tools.test_makefile.TestMakefile.test_makefile_test_folders) (relpath='test/test_importlib/zipdata02') ... FAIL\n  test_makefile_test_folders (test.test_tools.test_makefile.TestMakefile.test_makefile_test_folders) (relpath='test/test_importlib/zipdata01') ... FAIL\n  test_makefile_test_folders (test.test_tools.test_makefile.TestMakefile.test_makefile_test_folders) (relpath='test/test_importlib/data03') ... FAIL\n  test_makefile_test_folders (test.test_tools.test_makefile.TestMakefile.test_makefile_test_folders) (relpath='test/test_importlib/data02') ... FAIL\n  test_makefile_test_folders (test.test_tools.test_makefile.TestMakefile.test_makefile_test_folders) (relpath='test/test_importlib/data02/two') ... FAIL\n  test_makefile_test_folders (test.test_tools.test_makefile.TestMakefile.test_makefile_test_folders) (relpath='test/test_importlib/data02/one') ... FAIL\n  test_makefile_test_folders (test.test_tools.test_makefile.TestMakefile.test_makefile_test_folders) (relpath='test/test_importlib/data01') ... FAIL\n  test_makefile_test_folders (test.test_tools.test_makefile.TestMakefile.test_makefile_test_folders) (relpath='test/test_importlib/data01/subdirectory') ... FAIL\n  test_makefile_test_folders (test.test_tools.test_makefile.TestMakefile.test_makefile_test_folders) (relpath='test/test_tools/test_c_analyzer') ... FAIL\n  test_makefile_test_folders (test.test_tools.test_makefile.TestMakefile.test_makefile_test_folders) (relpath='test/test_tools/test_c_analyzer/test_common') ... FAIL\n  test_makefile_test_folders (test.test_tools.test_makefile.TestMakefile.test_makefile_test_folders) (relpath='test/test_tools/test_c_analyzer/test_symbols') ... FAIL\n  test_makefile_test_folders (test.test_tools.test_makefile.TestMakefile.test_makefile_test_folders) (relpath='test/test_tools/test_c_analyzer/test_parser') ... FAIL\n  test_makefile_test_folders (test.test_tools.test_makefile.TestMakefile.test_makefile_test_folders) (relpath='test/test_tools/test_c_analyzer/test_variables') ... FAIL\n  test_makefile_test_folders (test.test_tools.test_makefile.TestMakefile.test_makefile_test_folders) (relpath='test/test_tools/test_c_analyzer/test_cpython') ... FAIL\n\n======================================================================\nFAIL: test_makefile_test_folders (test.test_tools.test_makefile.TestMakefile.test_makefile_test_folders) (relpath='test/test_import/data/package3')\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/aleksandr.gaev/tmp/cpython/Lib/test/test_tools/test_makefile.py\", line 59, in test_makefile_test_folders\n    self.assertIn(\nAssertionError: 'test/test_import/data/package3' not found in ['idlelib/idle_test', 'test', 'test/audiodata', 'test/certdata', 'test/certdata/capath', 'test/cjkencodings', 'test/crashers', 'test/configdata', 'test/data', 'test/decimaltestdata', 'test/dtracedata', 'test/encoded_modules', 'test/imghdrdata', 'test/leakers', 'test/libregrtest', 'test/regrtestdata', 'test/regrtestdata/import_from_tests', 'test/regrtestdata/import_from_tests/test_regrtest_b', 'test/sndhdrdata', 'test/subprocessdata', 'test/support', 'test/support/_hypothesis_stubs', 'test/test_asyncio', 'test/test_capi', 'test/test_cppext', 'test/test_ctypes', 'test/test_dataclasses', 'test/test_doctest', 'test/test_email', 'test/test_email/data', 'test/test_future_stmt', 'test/test_gdb', 'test/test_inspect', 'test/test_import', 'test/test_import/data', 'test/test_import/data/circular_imports', 'test/test_import/data/circular_imports/subpkg', 'test/test_import/data/circular_imports/subpkg2', 'test/test_import/data/circular_imports/subpkg2/parent', 'test/test_import/data/package', 'test/test_import/data/package2', 'test/test_import/data/unwritable', 'test/test_importlib', 'test/test_importlib/builtin', 'test/test_importlib/data', 'test/test_importlib/extension', 'test/test_importlib/frozen', 'test/test_importlib/import_', 'test/test_importlib/namespace_pkgs', 'test/test_importlib/namespace_pkgs/both_portions', 'test/test_importlib/namespace_pkgs/both_portions/foo', 'test/test_importlib/namespace_pkgs/module_and_namespace_package', 'test/test_importlib/namespace_pkgs/module_and_namespace_package/a_test', 'test/test_importlib/namespace_pkgs/not_a_namespace_pkg', 'test/test_importlib/namespace_pkgs/not_a_namespace_pkg/foo', 'test/test_importlib/namespace_pkgs/portion1', 'test/test_importlib/namespace_pkgs/portion1/foo', 'test/test_importlib/namespace_pkgs/portion2', 'test/test_importlib/namespace_pkgs/portion2/foo', 'test/test_importlib/namespace_pkgs/project1', 'test/test_importlib/namespace_pkgs/project1/parent', 'test/test_importlib/namespace_pkgs/project1/parent/child', 'test/test_importlib/namespace_pkgs/project2', 'test/test_importlib/namespace_pkgs/project2/parent', 'test/test_importlib/namespace_pkgs/project2/parent/child', 'test/test_importlib/namespace_pkgs/project3', 'test/test_importlib/namespace_pkgs/project3/parent', 'test/test_importlib/namespace_pkgs/project3/parent/child', 'test/test_importlib/partial', 'test/test_importlib/resources', 'test/test_importlib/resources/data01', 'test/test_importlib/resources/data01/subdirectory', 'test/test_importlib/resources/data02', 'test/test_importlib/resources/data02/one', 'test/test_importlib/resources/data02/subdirectory', 'test/test_importlib/resources/data02/subdirectory/subsubdir', 'test/test_importlib/resources/data02/two', 'test/test_importlib/resources/data03', 'test/test_importlib/resources/data03/namespace', 'test/test_importlib/resources/data03/namespace/portion1', 'test/test_importlib/resources/data03/namespace/portion2', 'test/test_importlib/resources/namespacedata01', 'test/test_importlib/resources/zipdata01', 'test/test_importlib/resources/zipdata02', 'test/test_importlib/source', 'test/test_json', 'test/test_lib2to3', 'test/test_lib2to3/data', 'test/test_lib2to3/data/fixers', 'test/test_lib2to3/data/fixers/myfixes', 'test/test_module', 'test/test_peg_generator', 'test/test_pydoc', 'test/test_sqlite3', 'test/test_tkinter', 'test/test_tomllib', 'test/test_tomllib/data', 'test/test_tomllib/data/invalid', 'test/test_tomllib/data/invalid/array', 'test/test_tomllib/data/invalid/array-of-tables', 'test/test_tomllib/data/invalid/boolean', 'test/test_tomllib/data/invalid/dates-and-times', 'test/test_tomllib/data/invalid/dotted-keys', 'test/test_tomllib/data/invalid/inline-table', 'test/test_tomllib/data/invalid/keys-and-vals', 'test/test_tomllib/data/invalid/literal-str', 'test/test_tomllib/data/invalid/multiline-basic-str', 'test/test_tomllib/data/invalid/multiline-literal-str', 'test/test_tomllib/data/invalid/table', 'test/test_tomllib/data/valid', 'test/test_tomllib/data/valid/array', 'test/test_tomllib/data/valid/dates-and-times', 'test/test_tomllib/data/valid/multiline-basic-str', 'test/test_tools', 'test/test_ttk', 'test/test_unittest', 'test/test_unittest/testmock', 'test/test_warnings', 'test/test_warnings/data', 'test/test_zipfile', 'test/test_zipfile/_path', 'test/test_zoneinfo', 'test/test_zoneinfo/data', 'test/tokenizedata', 'test/tracedmodules', 'test/typinganndata', 'test/wheeldata', 'test/xmltestdata', 'test/xmltestdata/c14n-20', 'test/ziptestdata', 'test/test_concurrent_futures', 'test/test_multiprocessing_fork', 'test/test_multiprocessing_forkserver', 'test/test_multiprocessing_spawn'] : 'test/test_import/data/package3' is not included in the Makefile's list of test directories to install\n```\nAll tests fail with the following errors:\n\n```\n'test/test_import/data/package3' is not included in the Makefile's list of test directories to install\n'test/test_import/data/package4' is not included in the Makefile's list of test directories to install\n'test/test_importlib/zipdata02' is not included in the Makefile's list of test directories to install\n'test/test_importlib/zipdata01' is not included in the Makefile's list of test directories to install\n'test/test_importlib/data03' is not included in the Makefile's list of test directories to install\n'test/test_importlib/data02' is not included in the Makefile's list of test directories to install\n'test/test_importlib/data02/two' is not included in the Makefile's list of test directories to install\n'test/test_importlib/data02/one' is not included in the Makefile's list of test directories to install\n'test/test_importlib/data01' is not included in the Makefile's list of test directories to install\n'test/test_importlib/data01/subdirectory' is not included in the Makefile's list of test directories to install\n'test/test_tools/test_c_analyzer' is not included in the Makefile's list of test directories to install\n'test/test_tools/test_c_analyzer/test_common' is not included in the Makefile's list of test directories to install\n'test/test_tools/test_c_analyzer/test_symbols' is not included in the Makefile's list of test directories to install\n'test/test_tools/test_c_analyzer/test_parser' is not included in the Makefile's list of test directories to install\n'test/test_tools/test_c_analyzer/test_variables' is not included in the Makefile's list of test directories to install\n'test/test_tools/test_c_analyzer/test_cpython' is not included in the Makefile's list of test directories to install\n```\n\nI tried 3.12, v3.12.4, v3.12.3 and they all fail with the same\n\nFull logs:\nhttps://gist.github.com/Krock21/dfc5370d9a03a873f9c8e062185d7cc9\n\nDo you know what may be the reason and what can I do about it?\n\n### CPython versions tested on:\n\n3.12\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124732\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/121966/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/121966/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/121957",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/121957/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/121957/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/121957/events",
      "html_url": "https://github.com/python/cpython/issues/121957",
      "id": 2415994613,
      "node_id": "I_kwDOBN0Z8c6QASb1",
      "number": 121957,
      "title": "Missing audit events for `python -i` and `python -m asyncio`",
      "user": {
        "login": "ambv",
        "id": 55281,
        "node_id": "MDQ6VXNlcjU1Mjgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/55281?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ambv",
        "html_url": "https://github.com/ambv",
        "followers_url": "https://api.github.com/users/ambv/followers",
        "following_url": "https://api.github.com/users/ambv/following{/other_user}",
        "gists_url": "https://api.github.com/users/ambv/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ambv/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ambv/subscriptions",
        "organizations_url": "https://api.github.com/users/ambv/orgs",
        "repos_url": "https://api.github.com/users/ambv/repos",
        "events_url": "https://api.github.com/users/ambv/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ambv/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 544837556,
          "node_id": "MDU6TGFiZWw1NDQ4Mzc1NTY=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-security",
          "name": "type-security",
          "color": "b60205",
          "default": false,
          "description": "A security issue"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018772048,
          "node_id": "LA_kwDOBN0Z8c7viZhQ",
          "url": "https://api.github.com/repos/python/cpython/labels/3.10",
          "name": "3.10",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018772049,
          "node_id": "LA_kwDOBN0Z8c7viZhR",
          "url": "https://api.github.com/repos/python/cpython/labels/3.9",
          "name": "3.9",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018775327,
          "node_id": "LA_kwDOBN0Z8c7viaUf",
          "url": "https://api.github.com/repos/python/cpython/labels/3.8%20(EOL)",
          "name": "3.8 (EOL)",
          "color": "888888",
          "default": false,
          "description": "end of life"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        },
        {
          "id": 6933214501,
          "node_id": "LA_kwDOBN0Z8c8AAAABnUB1JQ",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-repl",
          "name": "topic-repl",
          "color": "0052cc",
          "default": false,
          "description": "Related to the interactive shell"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "ambv",
        "id": 55281,
        "node_id": "MDQ6VXNlcjU1Mjgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/55281?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ambv",
        "html_url": "https://github.com/ambv",
        "followers_url": "https://api.github.com/users/ambv/followers",
        "following_url": "https://api.github.com/users/ambv/following{/other_user}",
        "gists_url": "https://api.github.com/users/ambv/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ambv/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ambv/subscriptions",
        "organizations_url": "https://api.github.com/users/ambv/orgs",
        "repos_url": "https://api.github.com/users/ambv/repos",
        "events_url": "https://api.github.com/users/ambv/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ambv/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "ambv",
          "id": 55281,
          "node_id": "MDQ6VXNlcjU1Mjgx",
          "avatar_url": "https://avatars.githubusercontent.com/u/55281?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ambv",
          "html_url": "https://github.com/ambv",
          "followers_url": "https://api.github.com/users/ambv/followers",
          "following_url": "https://api.github.com/users/ambv/following{/other_user}",
          "gists_url": "https://api.github.com/users/ambv/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ambv/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ambv/subscriptions",
          "organizations_url": "https://api.github.com/users/ambv/orgs",
          "repos_url": "https://api.github.com/users/ambv/repos",
          "events_url": "https://api.github.com/users/ambv/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ambv/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-07-18T10:24:27Z",
      "updated_at": "2024-07-22T20:15:59Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "`Modules/main.c:pymain_repl` should fire `cpython.run_stdin` like `Modules/main.c:pymain_run_stdin` to allow administrators to log/block interactive use. Maybe that event firing should be moved all the way to `_PyRun_InteractiveLoopObject`, but its only other use is with `PyRun_InteractiveLoopFlags`, which is embedded, so not clear we want that. Therefore, `pymain_repl` is now the clear choice. Affected versions: Python 3.8+.\r\n\r\nSimilarly, the asyncio REPL didn't emit any audit events related to interactive use. Affected versions: Python 3.8+.\r\n\r\nNote that `code.InteractiveConsole` also doesn't fire interactive use audit events, but my thinking here is that this is an end-user API, so the user can choose to fire that event if they want to. Similar case to `PyRun_InteractiveLoopFlags`.\r\n\r\nThis will require a separate fix for 3.8 - 3.12.\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-121958\r\n* gh-122115\n* gh-122117\n* gh-122118\n* gh-122119\n* gh-122120\n* gh-122121\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/121957/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/121957/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/121946",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/121946/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/121946/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/121946/events",
      "html_url": "https://github.com/python/cpython/issues/121946",
      "id": 2415162265,
      "node_id": "I_kwDOBN0Z8c6P9HOZ",
      "number": 121946,
      "title": "Thread sanitizer tests failing in GitHub actions",
      "user": {
        "login": "colesbury",
        "id": 655866,
        "node_id": "MDQ6VXNlcjY1NTg2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/colesbury",
        "html_url": "https://github.com/colesbury",
        "followers_url": "https://api.github.com/users/colesbury/followers",
        "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
        "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
        "organizations_url": "https://api.github.com/users/colesbury/orgs",
        "repos_url": "https://api.github.com/users/colesbury/repos",
        "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
        "received_events_url": "https://api.github.com/users/colesbury/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 9,
      "created_at": "2024-07-18T03:55:23Z",
      "updated_at": "2024-07-30T23:35:51Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "**EDIT**: The cause was due to a change in LLVM's Ubuntu package.\r\n\r\nI think this is due to a ~~change in GitHub actions~~, not any particular commit. Commits that previously succeeded are now failing. I cannot reproduce the issue locally.\r\n\r\nThe only difference I see is in the reported `clang` build:\r\n\r\n`CC.version: Ubuntu clang version 18.1.8 (++20240717045746+3b5b5c1ec4a3-1~exp1~20240717165903.140)` (bad)\r\n`CC.version: Ubuntu clang version 18.1.8 (++20240714071213+3b5b5c1ec4a3-1~exp1~20240714191314.138)` (good)\r\n\r\nHowever, the runner `IMAGE_VERSION` doesn't look like it's changed:\r\n\r\n`IMAGE_VERSION: 20240714.1.0`\r\n\r\nNearly every test is failing:\r\n\r\nhttps://github.com/python/cpython/actions/runs/9982293102/job/27587742397\r\n\r\n```\r\n0:00:00 load avg: 2.83 Run 22 tests in parallel using 4 worker processes\r\n0:00:01 load avg: 2.93 [ 1/22/1] test_capi.test_pyatomic worker non-zero exit code (Exit code 66)\r\n0:00:03 load avg: 2.93 [ 2/22/2] test_code worker non-zero exit code (Exit code 66)\r\n0:00:06 load avg: 3.01 [ 3/22/3] test_functools worker non-zero exit code (Exit code 66)\r\n0:00:11 load avg: 3.01 [ 4/22/4] test_capi.test_mem worker non-zero exit code (Exit code 66)\r\n0:00:12 load avg: 3.01 [ 5/22/5] test_httpservers worker non-zero exit code (Exit code 66)\r\n0:00:16 load avg: 3.01 [ 6/22/6] test_enum worker non-zero exit code (Exit code 66)\r\n0:00:21 load avg: 3.01 [ 7/22/7] test_imaplib worker non-zero exit code (Exit code 66)\r\n0:00:39 load avg: 3.83 [ 8/22/8] test_importlib worker non-zero exit code (Exit code 66)\r\n0:00:41 load avg: 4.01 [ 9/22/9] test_logging worker non-zero exit code (Exit code 66)\r\n0:01:03 load avg: 3.79 [10/22/10] test_io worker non-zero exit code (Exit code 66) -- running (1): test_queue (42.2 sec)\r\n0:01:08 load avg: 4.21 [11/22/11] test_signal worker non-zero exit code (Exit code 66) -- running (1): test_queue (47.1 sec)\r\n0:01:09 load avg: 4.21 [12/22/12] test_sqlite3 worker non-zero exit code (Exit code 66) -- running (1): test_queue (48.0 sec)\r\n0:01:11 load avg: 4.11 [13/22/13] test_syslog worker non-zero exit code (Exit code 66) -- running (2): test_queue (50.3 sec), test_socket (30.1 sec)\r\n0:01:15 load avg: 4.82 [14/22/14] test_thread worker non-zero exit code (Exit code 66) -- running (2): test_queue (54.4 sec), test_socket (34.3 sec)\r\n0:01:17 load avg: 4.82 [15/22/15] test_threadedtempfile worker non-zero exit code (Exit code 66) -- running (2): test_queue (56.2 sec), test_socket (36.1 sec)\r\n0:01:20 load avg: 4.82 [16/22/16] test_queue worker non-zero exit code (Exit code 66) -- running (1): test_socket (39.0 sec)\r\n0:01:23 load avg: 4.68 [17/22/17] test_threading_local worker non-zero exit code (Exit code 66) -- running (1): test_socket (41.8 sec)\r\n0:01:24 load avg: 4.68 [18/22/18] test_ssl worker non-zero exit code (Exit code 66) -- running (1): test_socket (43.3 sec)\r\n0:01:29 load avg: 4.54 [19/22/19] test_threadsignals worker non-zero exit code (Exit code 66) -- running (1): test_socket (48.1 sec)\r\n0:01:50 load avg: 3.91 [20/22/20] test_weakref worker non-zero exit code (Exit code 66) -- running (2): test_threading (32.6 sec), test_socket (1 min 8 sec)\r\n0:01:53 load avg: 3.68 [21/22/21] test_socket worker non-zero exit code (Exit code 66) -- running (1): test_threading (35.4 sec)\r\n0:01:56 load avg: 3.46 [22/22/22] test_threading worker non-zero exit code (Exit code 66)\r\n\r\n```\r\n\r\nTSan logs are useless:\r\n\r\n```\r\nWARNING: ThreadSanitizer: data race (pid=8535)\r\n  Write of size 8 at 0x56136380acd0 by main thread:\r\n    #0 <null> <null> (python+0x31a5ee) (BuildId: 243a59[16](https://github.com/python/cpython/actions/runs/9982293102/job/27587742397#step:13:17)b2751fda530fabbdb48342727b53c0b8)\r\n    #1 <null> <null> (python+0x31a4a6) (BuildId: 243a5916b2751fda530fabbdb48342727b53c0b8)\r\n    #2 <null> <null> (python+0x4f1242) (BuildId: 243a5916b2751fda530fabbdb48342727b53c0b8)\r\n    #3 <null> <null> (python+0x522ef7) (BuildId: 243a5916b2751fda530fabbdb48342727b53c0b8)\r\n...\r\n```\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-121975\r\n* gh-121981\n* gh-122032\n* gh-122131\n* gh-122466\n* gh-122467\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": {
        "login": "colesbury",
        "id": 655866,
        "node_id": "MDQ6VXNlcjY1NTg2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/colesbury",
        "html_url": "https://github.com/colesbury",
        "followers_url": "https://api.github.com/users/colesbury/followers",
        "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
        "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
        "organizations_url": "https://api.github.com/users/colesbury/orgs",
        "repos_url": "https://api.github.com/users/colesbury/repos",
        "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
        "received_events_url": "https://api.github.com/users/colesbury/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/121946/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/121946/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/121940",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/121940/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/121940/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/121940/events",
      "html_url": "https://github.com/python/cpython/issues/121940",
      "id": 2414681889,
      "node_id": "I_kwDOBN0Z8c6P7R8h",
      "number": 121940,
      "title": "Simplify Windows write I/O around consoles on Windows 8+",
      "user": {
        "login": "cmaloney",
        "id": 751088,
        "node_id": "MDQ6VXNlcjc1MTA4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/751088?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cmaloney",
        "html_url": "https://github.com/cmaloney",
        "followers_url": "https://api.github.com/users/cmaloney/followers",
        "following_url": "https://api.github.com/users/cmaloney/following{/other_user}",
        "gists_url": "https://api.github.com/users/cmaloney/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/cmaloney/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/cmaloney/subscriptions",
        "organizations_url": "https://api.github.com/users/cmaloney/orgs",
        "repos_url": "https://api.github.com/users/cmaloney/repos",
        "events_url": "https://api.github.com/users/cmaloney/events{/privacy}",
        "received_events_url": "https://api.github.com/users/cmaloney/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 570103914,
          "node_id": "MDU6TGFiZWw1NzAxMDM5MTQ=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-windows",
          "name": "OS-windows",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 4018834665,
          "node_id": "LA_kwDOBN0Z8c7viozp",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-IO",
          "name": "topic-IO",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-07-17T22:02:56Z",
      "updated_at": "2024-07-17T22:29:02Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\n### Proposal:\r\n\r\nIn bpo-11395 from 2011, Windows Python needed to check on every write if a write was to a tty / console object and limit the size of the write to avoid an OS error on write. With Windows 8 and above, the Windows subsystem has been updated and this check is no longer necessary. It is also not necessary to split the write into smaller pieces (which resulted in gh-110913 and gh-82052).\r\n\r\nBased on PEP 11, the last Windows 8 support ended in 2023, so the isatty + limited write size is no longer needed on any currently supported Windows platform (Pipes are still limited write size).\r\n\r\nThat large writes work is tested in `test_os`, `test_write_windows_console`\r\n\r\n### Has this already been discussed elsewhere?\r\n\r\nThis is a minor feature, which does not need previous discussion elsewhere\r\n\r\n### Links to previous discussion of this feature:\r\n\r\nhttps://github.com/python/cpython/issues/55604#issuecomment-1093537612\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-121941\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/121940/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/121940/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/121427",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/121427/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/121427/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/121427/events",
      "html_url": "https://github.com/python/cpython/issues/121427",
      "id": 2393528649,
      "node_id": "I_kwDOBN0Z8c6OqllJ",
      "number": 121427,
      "title": "Compiling 3.13 in MSYS2/UCRT64 causes a type error for _PyTime_AsTime_t",
      "user": {
        "login": "Paebbels",
        "id": 956109,
        "node_id": "MDQ6VXNlcjk1NjEwOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/956109?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Paebbels",
        "html_url": "https://github.com/Paebbels",
        "followers_url": "https://api.github.com/users/Paebbels/followers",
        "following_url": "https://api.github.com/users/Paebbels/following{/other_user}",
        "gists_url": "https://api.github.com/users/Paebbels/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Paebbels/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Paebbels/subscriptions",
        "organizations_url": "https://api.github.com/users/Paebbels/orgs",
        "repos_url": "https://api.github.com/users/Paebbels/repos",
        "events_url": "https://api.github.com/users/Paebbels/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Paebbels/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 570103914,
          "node_id": "MDU6TGFiZWw1NzAxMDM5MTQ=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-windows",
          "name": "OS-windows",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2024-07-06T11:34:53Z",
      "updated_at": "2024-11-08T14:57:11Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\nCompiling Python 3.13 on MSYS2/UCRT64 causes a type check error for `_PyTime_AsTime_t`'s second parameter.\r\n\r\n```gcc\r\nPython/pytime.c: In function 'pytime_as_timeval_struct':\r\nPython/pytime.c:815:37: error: passing argument 2 of '_PyTime_AsTime_t' from incompatible pointer type [-Wincompatible-pointer-types]\r\n  815 |     res2 = _PyTime_AsTime_t(tv_sec, &tv->tv_sec);\r\n      |                                     ^~~~~~~~~~~\r\n      |                                     |\r\n      |                                     long int *\r\nPython/pytime.c:245:38: note: expected 'time_t *' {aka 'long long int *'} but argument is of type 'long int *'\r\n  245 | _PyTime_AsTime_t(PyTime_t t, time_t *t2)\r\n      |                              ~~~~~~~~^~\r\n```\r\n\r\n**How to reproduce:**  \r\nEnvironment: MSYS2/UCRT64\r\nCommit: 4aa0c5ec34836a026d06e556784c41e0eeb807b3 (origin/3.13, 3.13)  \r\n```bash\r\nCXX=g++ ./configure --disable-gil --enable-optimizations --with-lto=full --with-ensurepip=install\r\nmake -j16\r\n```\r\n\r\n### CPython versions tested on:\r\n\r\n* 3.12\r\n* 3.13\r\n\r\n### Operating systems tested on:\r\n\r\nWindows\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-126355\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/121427/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/121427/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/121376",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/121376/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/121376/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/121376/events",
      "html_url": "https://github.com/python/cpython/issues/121376",
      "id": 2391339115,
      "node_id": "I_kwDOBN0Z8c6OiPBr",
      "number": 121376,
      "title": "Uses a higher granularity than seconds for `.pyc` file invalidation",
      "user": {
        "login": "nekopsykose",
        "id": 102837530,
        "node_id": "U_kgDOBiEtGg",
        "avatar_url": "https://avatars.githubusercontent.com/u/102837530?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nekopsykose",
        "html_url": "https://github.com/nekopsykose",
        "followers_url": "https://api.github.com/users/nekopsykose/followers",
        "following_url": "https://api.github.com/users/nekopsykose/following{/other_user}",
        "gists_url": "https://api.github.com/users/nekopsykose/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nekopsykose/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nekopsykose/subscriptions",
        "organizations_url": "https://api.github.com/users/nekopsykose/orgs",
        "repos_url": "https://api.github.com/users/nekopsykose/repos",
        "events_url": "https://api.github.com/users/nekopsykose/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nekopsykose/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 19,
      "created_at": "2024-07-04T18:47:40Z",
      "updated_at": "2024-07-11T09:36:06Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\nreproduction:\r\n\r\n```sh\r\n#!/bin/sh \r\n \r\nmkdir -p src \r\nrm -fr src/__pycache__ \r\nrm -fr __pycache__ \r\n \r\necho 'from src.test import f' > main.py \r\necho 'print(f())' >> main.py \r\n\r\necho 'def f():' > src/test.py \r\necho '    return \"Hello!\"' >> src/test.py \r\n# prints \"Hello!\"\r\npython3 main.py \r\n\r\necho 'def f():' > src/test.py \r\necho '    return \"Goodbye!\"' >> src/test.py \r\n# also prints \"Hello!\", but note the file does not say that anymore\r\npython3 main.py\r\n```\r\n(this is probably sensitive to how fast your computer is)\r\n\r\nthis seems to stem from (i guess) that the timestamps are 32-bit, and write the current second (unix time, as 32-bit). and then, when the file is edited and the python script runs again, it gets a cache hit (same timestamp as file 32-bit mtime) and yields the old content.\r\n\r\nis this known/intended? is there a mitigation that isn't just \"delete the pycache\"? i tried looking if anyone else ran into this and could not find anything.\r\n\r\ni ran into this as part of a workflow that first edited a python script via shell (edits mtime), then invoked python on it (updates pyc to that mtime), then that python invocation updates the same script a second time and those changes were weirdly lost and confused me for a while. after having to delete the pycache a few times, i looked into it and ended up at (seemingly) this issue.\r\n\r\nalso (not relevant), having not looked at the code, what happens in 2038 when 64-bit file timestamps go over the 32-bit value? will the pyc just wrap around or is there some other planned handling?\r\n\r\nmaybe this format should be updated to 64-bit milliseconds (this seems.. difficult, maybe a new magic?) (and technically milliseconds can also race, though python is usually not fast enough to hit that), or perhaps the pycache should be invalidated when the mtime matches (but this would loop a bunch of times when the script is ran multiple times on the same second until current time is 1 second later than the filetime)\r\n\r\n\r\n### CPython versions tested on:\r\n\r\n3.12\r\n\r\n### Operating systems tested on:\r\n\r\nLinux\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-121502\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/121376/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/121376/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/121065",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/121065/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/121065/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/121065/events",
      "html_url": "https://github.com/python/cpython/issues/121065",
      "id": 2376274868,
      "node_id": "I_kwDOBN0Z8c6NoxO0",
      "number": 121065,
      "title": "Thread sanitizer (free-threading) tests fail: test_signal raises RecursionError",
      "user": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2024-06-26T21:01:21Z",
      "updated_at": "2024-06-27T17:24:31Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\n```\n 0:02:53 load avg: 5.00 [ 9/22/1] test_signal failed (1 error) (1 min 1 sec) -- running (3): test_logging (2 min 13 sec), test_io (2 min 17 sec), test_queue (1 min 52 sec)\ntest test_signal failed -- Traceback (most recent call last):\n  File \"/home/runner/work/cpython/cpython/Lib/test/test_signal.py\", line 1384, in test_stress_modifying_handlers\n    cycle_handlers()\n    ~~~~~~~~~~~~~~^^\n  File \"/home/runner/work/cpython/cpython/Lib/test/test_signal.py\", line 1374, in cycle_handlers\n    signal.signal(signum, handler)\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/cpython/cpython/Lib/signal.py\", line 58, in signal\n    handler = _signal.signal(_enum_to_int(signalnum), _enum_to_int(handler))\n                             ~~~~~~~~~~~~^^^^^^^^^^^\n  File \"/home/runner/work/cpython/cpython/Lib/signal.py\", line 41, in _enum_to_int\n    return int(value)\n  File \"/home/runner/work/cpython/cpython/Lib/test/test_signal.py\", line 1359, in custom_handler\n    def custom_handler(signum, frame):\n    \n  File \"/home/runner/work/cpython/cpython/Lib/test/test_signal.py\", line 1359, in custom_handler\n    def custom_handler(signum, frame):\n    \n  File \"/home/runner/work/cpython/cpython/Lib/test/test_signal.py\", line 1359, in custom_handler\n    def custom_handler(signum, frame):\n    \n  [Previous line repeated 237 more times]\nRecursionError: maximum recursion depth exceeded\n```\n\nLink: https://github.com/python/cpython/actions/runs/9686054998/job/26727620578\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-121100\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/121065/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/121065/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/121058",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/121058/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/121058/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/121058/events",
      "html_url": "https://github.com/python/cpython/issues/121058",
      "id": 2376034432,
      "node_id": "I_kwDOBN0Z8c6Nn2iA",
      "number": 121058,
      "title": "Warn In PyThreadState_Clear() If the Thread State Still Has an Unhandled Exception",
      "user": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-06-26T18:40:43Z",
      "updated_at": "2024-07-03T17:43:23Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\nWhen `PyThreadState_Clear()` is called, the thread state could still have an exception set.  As a user, it would be helpful to know when that happens.  This is similar to how we already warn the user if the thread state was still running Python code (we check `tstate->current_frame`).\n\nFor unhandled exceptions, I'm pretty sure we'd check `tstate->exc_state` (or maybe `tstate->exc_info`), along with `tstate->current_exception`.  We could emit a warning, as well as print the traceback (or generally invoke `sys.excepthook()`).\n\nIt would probably make sense to separately warn about `tstate->async_exc` (and print that traceback).\n\n### Has this already been discussed elsewhere?\n\nNo response given\n\n### Links to previous discussion of this feature:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-121343\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/121058/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/121058/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/121039",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/121039/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/121039/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/121039/events",
      "html_url": "https://github.com/python/cpython/issues/121039",
      "id": 2374801727,
      "node_id": "I_kwDOBN0Z8c6NjJk_",
      "number": 121039,
      "title": "Add assertFloatsAreIdentical/assertComplexAreIdentical to unittest (or kwarg to assertEqual)?",
      "user": {
        "login": "skirpichev",
        "id": 2155800,
        "node_id": "MDQ6VXNlcjIxNTU4MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2155800?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skirpichev",
        "html_url": "https://github.com/skirpichev",
        "followers_url": "https://api.github.com/users/skirpichev/followers",
        "following_url": "https://api.github.com/users/skirpichev/following{/other_user}",
        "gists_url": "https://api.github.com/users/skirpichev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/skirpichev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/skirpichev/subscriptions",
        "organizations_url": "https://api.github.com/users/skirpichev/orgs",
        "repos_url": "https://api.github.com/users/skirpichev/repos",
        "events_url": "https://api.github.com/users/skirpichev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/skirpichev/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-06-26T09:13:28Z",
      "updated_at": "2024-09-09T14:11:39Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\n### Proposal:\r\n\r\nClones of assertFloatsAreIdentical() are scattered across the CPython tests:\r\nhttps://github.com/python/cpython/blob/d8f82432a36178a2376cc2d0984b02bb03f6d55f/Lib/test/test_complex.py#L74\r\nhttps://github.com/python/cpython/blob/d8f82432a36178a2376cc2d0984b02bb03f6d55f/Lib/test/test_cmath.py#L68\r\nhttps://github.com/python/cpython/blob/d8f82432a36178a2376cc2d0984b02bb03f6d55f/Lib/test/test_float.py#L1069\r\nhttps://github.com/python/cpython/blob/d8f82432a36178a2376cc2d0984b02bb03f6d55f/Lib/test/test_capi/test_getargs.py#L440\r\n\r\nMaybe it's worth to have a dedicated check?\r\n\r\nOr a special kwarg for the assertEqual method, to workaround ``NAN`` and ``-0.0`` values for floats/complexes.\r\n\r\nEdit:\r\n\r\nOr at least some support from Lib/test/support...  I was adding similar helper yet in another test file and that looks odd.\r\n\r\nNumpy has numpy.testing.assert_equal():\r\n```pycon\r\n>>> np.testing.assert_equal([0.0], [+0.0])\r\n>>> np.testing.assert_equal([0.0], [-0.0])\r\nTraceback (most recent call last):\r\n  ...\r\nAssertionError: \r\nItems are not equal:\r\nitem=0\r\n\r\n ACTUAL: 0.0\r\n DESIRED: -0.0\r\n>>> np.testing.assert_equal([np.nan], [np.nan])\r\n>>> np.testing.assert_equal([0.0], [np.nan])\r\nTraceback (most recent call last):\r\n  ...\r\nAssertionError: \r\nItems are not equal:\r\nitem=0\r\n\r\n ACTUAL: 0.0\r\n DESIRED: nan\r\n```\r\n\r\n### Has this already been discussed elsewhere?\r\n\r\nThis is a minor feature, which does not need previous discussion elsewhere\r\n\r\n### Links to previous discussion of this feature:\r\n\r\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-121071\n* gh-123840\n* gh-123841\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/121039/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/121039/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/121023",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/121023/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/121023/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/121023/events",
      "html_url": "https://github.com/python/cpython/issues/121023",
      "id": 2374310200,
      "node_id": "I_kwDOBN0Z8c6NhRk4",
      "number": 121023,
      "title": "Improve `_xxtestfuzz/README.rst`",
      "user": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "sobolevn",
          "id": 4660275,
          "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sobolevn",
          "html_url": "https://github.com/sobolevn",
          "followers_url": "https://api.github.com/users/sobolevn/followers",
          "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
          "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
          "organizations_url": "https://api.github.com/users/sobolevn/orgs",
          "repos_url": "https://api.github.com/users/sobolevn/repos",
          "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sobolevn/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-06-26T05:17:52Z",
      "updated_at": "2024-09-16T20:28:29Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\nRight now there are several points I would like to see improved in this file:\n1. We need to clarify that `$test_name` should be replaced with an actual test name: https://github.com/python/cpython/blob/82235449b85165add62c1b200299456a50a1d097/Modules/_xxtestfuzz/README.rst#L26-L29\n2. `_Py_FUZZ_YES` is not actually used in our code, docs: https://github.com/python/cpython/blob/82235449b85165add62c1b200299456a50a1d097/Modules/_xxtestfuzz/README.rst#L34 code: https://github.com/python/cpython/blob/7fb32e02092922b0256d7be91bbf80767eb2ca46/Modules/_xxtestfuzz/fuzzer.c#L699\n3. Why is `fuzz_builtin_float` is used in this example? https://github.com/python/cpython/blob/82235449b85165add62c1b200299456a50a1d097/Modules/_xxtestfuzz/README.rst#L34C9-L34C41 It is better to use `$test_name`. Or even better `$fuzz_test_name` to have a common prefix.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-121024\n* gh-124140\n* gh-124141\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/121023/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/121023/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/120882",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/120882/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/120882/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/120882/events",
      "html_url": "https://github.com/python/cpython/issues/120882",
      "id": 2367869962,
      "node_id": "I_kwDOBN0Z8c6NItQK",
      "number": 120882,
      "title": "shutil's move function fails to handle files opened by another process",
      "user": {
        "login": "Saqibs575",
        "id": 111361057,
        "node_id": "U_kgDOBqM8IQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/111361057?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Saqibs575",
        "html_url": "https://github.com/Saqibs575",
        "followers_url": "https://api.github.com/users/Saqibs575/followers",
        "following_url": "https://api.github.com/users/Saqibs575/following{/other_user}",
        "gists_url": "https://api.github.com/users/Saqibs575/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Saqibs575/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Saqibs575/subscriptions",
        "organizations_url": "https://api.github.com/users/Saqibs575/orgs",
        "repos_url": "https://api.github.com/users/Saqibs575/repos",
        "events_url": "https://api.github.com/users/Saqibs575/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Saqibs575/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 570103914,
          "node_id": "MDU6TGFiZWw1NzAxMDM5MTQ=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-windows",
          "name": "OS-windows",
          "color": "d4c5f9",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-06-22T15:13:46Z",
      "updated_at": "2024-06-24T13:56:14Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\n# Problem:\nWhen attempting to move a file using shutil.move from one location to another, if the file is opened by another process (if file is opened in other python script using `open` function), shutil.move raises an error (`WinError 32: The process cannot access the file because it is being used by another process`). Despite this error, the file is still copied to the destination directory, which is unexpected behavior.\n\n# Details:\nThe shutil.move function is designed to handle moving files or directories between locations. However, it does not check if the file is currently open by another process before attempting to move it. This results in an error being raised, but the file is still copied to destination regardless of the error condition.\n\n# Solution:\nTo address this issue, I modified the shutil.move function to include an additional check for OSError with errno.EACCES (Permission Denied) in the exception handling block. This ensures that if the file cannot be moved due to being opened by another process, the operation is aborted cleanly without copying the file to maintain the integrity of the move function as well as file system.\n\nHere is the modified part of the shutil.move function\n\n```python\n    except OSError as exc:\n        if exc.errno == errno.EACCES:\n            raise  # Propagate the PermissionError\n     # Existing code\n```\n\n# Proposal:\nI propose adding this error handling improvement to the shutil.move function in Python's standard library. This enhancement will make file operations more reliable in scenarios where files may be concurrently accessed by multiple processes\n\n# Steps to Reproduce:\n\n- Open a file (test.pdf) in any python script using `open` function in read mode.\n- Attempt to move the file using shutil.move to another directory.\n- Observe the WinError 32 exception and incorrect copying behavior.\n- Close the file (To avoid memory leakage).\n\n**NOTE:** Avoid to use context manager here for opening file to find the error.\nYou can also run the following script to get the error.\n\n```python\nimport shutil\n\nsrc = \"C://Users//Desktop//Downloads//test.pdf\" # Provide full file path of your system.\ndst_dir = \"D://Files\" # Provide destination directory path.\nf = open(src, \"r\")\ntry:\n    shutil.move(src, dst_dir)\nexcept Exception as e:\n    print(e)\nfinally:\n    f.close()\n```\n\n# Expected Behavior:\n\nWhen shutil.move encounters a situation where the source file is open in another process (WinError 32), it should raise an exception and abort the operation without performing any partial file copying to the destination.\n\n# Impact:\n\nThis issue affects users trying to use shutil.move to relocate files that are concurrently accessed by other processes. The proposed solution aims to improve the robustness and expected behavior of the function in such scenarios.\n\n### CPython versions tested on:\n\n3.10\n\n### Operating systems tested on:\n\nWindows\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-120883\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/120882/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/120882/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/120446",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/120446/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/120446/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/120446/events",
      "html_url": "https://github.com/python/cpython/issues/120446",
      "id": 2350771763,
      "node_id": "I_kwDOBN0Z8c6MHe4z",
      "number": 120446,
      "title": "Consider adding public PyLong_FlipSign() function",
      "user": {
        "login": "skirpichev",
        "id": 2155800,
        "node_id": "MDQ6VXNlcjIxNTU4MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2155800?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skirpichev",
        "html_url": "https://github.com/skirpichev",
        "followers_url": "https://api.github.com/users/skirpichev/followers",
        "following_url": "https://api.github.com/users/skirpichev/following{/other_user}",
        "gists_url": "https://api.github.com/users/skirpichev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/skirpichev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/skirpichev/subscriptions",
        "organizations_url": "https://api.github.com/users/skirpichev/orgs",
        "repos_url": "https://api.github.com/users/skirpichev/repos",
        "events_url": "https://api.github.com/users/skirpichev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/skirpichev/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4019060898,
          "node_id": "LA_kwDOBN0Z8c7vjgCi",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-C-API",
          "name": "topic-C-API",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2024-06-13T10:22:52Z",
      "updated_at": "2024-07-04T07:36:29Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\nCurrently there is only a slow way (i.e. ``PyNumber_Negative()``) to invert the sign of a big integer.  Direct manipulation of the sign value is available only via private function, e.g. ``_PyLong_SetSignAndDigitCount()``:\nhttps://github.com/aleaxit/gmpy/blob/1c0d4f38d4f1093df0e9460d82e4331d3d3946b6/src/gmpy2_convert_gmp.c#L153\n\nI propose this interface:\n```c\nint PyLong_FlipSign(PyObject *obj);\n```\nFor small integers it will fallback to ``PyLong_FromLong()`` (like ``_PyLong_Negate()`` does), for the rest - just ``_PyLong_FlipSign()`` to change sign in place.\n\nAlternatively, we could just expose a direct wrapper of ``_PyLong_FlipSign()`` and warn users to not use this function for small ints (that doesn't make sense for me anyway).\n\nIn both variants, on success - flip the sign of ``obj`` and return 0.  On failure - return -1 with exception set.  Shouldn't fail on PyLongObject or it's subtype.\n\nI'll work on a patch if this proposal does make sense.\n\n### Has this already been discussed elsewhere?\n\nThis is a minor feature, which does not need previous discussion elsewhere\n\n### Links to previous discussion of this feature:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-120489\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/120446/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/120446/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/120360",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/120360/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/120360/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/120360/events",
      "html_url": "https://github.com/python/cpython/issues/120360",
      "id": 2346920291,
      "node_id": "I_kwDOBN0Z8c6L4ylj",
      "number": 120360,
      "title": "`idlelib/help.html` is outdated",
      "user": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018676472,
          "node_id": "LA_kwDOBN0Z8c7viCL4",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-IDLE",
          "name": "topic-IDLE",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 7,
      "created_at": "2024-06-11T17:18:07Z",
      "updated_at": "2024-06-17T18:30:11Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\nThere are multiple problems with it:\n1. It mentions outdated Python version: https://github.com/python/cpython/blob/0335662fe1f663fe96e3e4acf0f34c5959d06b00/Lib/idlelib/help.html#L8 Right now it should be `Python 3.14a0`\n2. Is is not rebuilt / executed during release process\n3. It is not executed to check that generated files are up-to-date with the source ones (`Doc/library/idle.rst` in this case) in CI\n4. `help.html` does not contain a comment that it is generated (and from what)\n5. `help.html` is not marked as generated in `.gitattributes`\n\nCC @terryjreedy \n\nFound while reviewing https://github.com/python/cpython/pull/120338#pullrequestreview-2111016950\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-120571\n* gh-120576\n* gh-120577\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/120360/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/120360/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/120321",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/120321/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/120321/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/120321/events",
      "html_url": "https://github.com/python/cpython/issues/120321",
      "id": 2344146887,
      "node_id": "I_kwDOBN0Z8c6LuNfH",
      "number": 120321,
      "title": "SIGSEGV with generators in free-threaded build",
      "user": {
        "login": "rostan-t",
        "id": 30502549,
        "node_id": "MDQ6VXNlcjMwNTAyNTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/30502549?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rostan-t",
        "html_url": "https://github.com/rostan-t",
        "followers_url": "https://api.github.com/users/rostan-t/followers",
        "following_url": "https://api.github.com/users/rostan-t/following{/other_user}",
        "gists_url": "https://api.github.com/users/rostan-t/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rostan-t/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rostan-t/subscriptions",
        "organizations_url": "https://api.github.com/users/rostan-t/orgs",
        "repos_url": "https://api.github.com/users/rostan-t/repos",
        "events_url": "https://api.github.com/users/rostan-t/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rostan-t/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018848914,
          "node_id": "LA_kwDOBN0Z8c7visSS",
          "url": "https://api.github.com/repos/python/cpython/labels/type-crash",
          "name": "type-crash",
          "color": "b60205",
          "default": false,
          "description": "A hard crash of the interpreter, possibly with a core dump"
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2024-06-10T14:59:56Z",
      "updated_at": "2024-11-15T09:00:14Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Crash report\r\n\r\n### What happened?\r\n\r\nTrying to iterate on a generator from multiple threads under the free-threaded build results in a segmentation fault.\r\n\r\nHere is a minimal repro:\r\n```python\r\nimport concurrent.futures\r\n\r\n\r\ndef gen():\r\n    while True:\r\n        yield\r\n\r\n\r\nit = gen()\r\nwith concurrent.futures.ThreadPoolExecutor() as executor:\r\n    while True:\r\n        _ = executor.submit(lambda: next(it))\r\n```\r\n\r\nThe issue seems to be specific to generators as other kinds of iterators work well in parallel.\r\n\r\n### CPython versions tested on:\r\n\r\nCPython main branch\r\n\r\n### Operating systems tested on:\r\n\r\nLinux\r\n\r\n### Output from running 'python -VV' on the command line:\r\n\r\nPython 3.14.0a0 experimental free-threading build (heads/main:c3b6dbff2c, Jun 10 2024, 16:54:16) [GCC 11.4.0]\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-120327\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/120321/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/120321/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/120026",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/120026/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/120026/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/120026/events",
      "html_url": "https://github.com/python/cpython/issues/120026",
      "id": 2333174542,
      "node_id": "I_kwDOBN0Z8c6LEWsO",
      "number": 120026,
      "title": "Deprecate (soft) Py_HUGE_VAL macro",
      "user": {
        "login": "skirpichev",
        "id": 2155800,
        "node_id": "MDQ6VXNlcjIxNTU4MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2155800?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skirpichev",
        "html_url": "https://github.com/skirpichev",
        "followers_url": "https://api.github.com/users/skirpichev/followers",
        "following_url": "https://api.github.com/users/skirpichev/following{/other_user}",
        "gists_url": "https://api.github.com/users/skirpichev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/skirpichev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/skirpichev/subscriptions",
        "organizations_url": "https://api.github.com/users/skirpichev/orgs",
        "repos_url": "https://api.github.com/users/skirpichev/repos",
        "events_url": "https://api.github.com/users/skirpichev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/skirpichev/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-06-04T10:36:14Z",
      "updated_at": "2024-06-04T10:41:01Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\nNowadays, it's just an alias for ``Py_INFINITY``.  Using both macros in single codebase, probably, slightly confuse code readers.  I think it worth to replace all such cases to ``Py_INFINITY``, as mentioned in [this comment](https://github.com/python/cpython/pull/104202#discussion_r1187191082).\n\n### Has this already been discussed elsewhere?\n\nThis is a minor feature, which does not need previous discussion elsewhere\n\n### Links to previous discussion of this feature:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-120027\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/120026/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/120026/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/119726",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/119726/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/119726/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/119726/events",
      "html_url": "https://github.com/python/cpython/issues/119726",
      "id": 2323332877,
      "node_id": "I_kwDOBN0Z8c6Kez8N",
      "number": 119726,
      "title": "JIT: improve AArch64 code generation",
      "user": {
        "login": "diegorusso",
        "id": 342108,
        "node_id": "MDQ6VXNlcjM0MjEwOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/342108?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/diegorusso",
        "html_url": "https://github.com/diegorusso",
        "followers_url": "https://api.github.com/users/diegorusso/followers",
        "following_url": "https://api.github.com/users/diegorusso/following{/other_user}",
        "gists_url": "https://api.github.com/users/diegorusso/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/diegorusso/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/diegorusso/subscriptions",
        "organizations_url": "https://api.github.com/users/diegorusso/orgs",
        "repos_url": "https://api.github.com/users/diegorusso/repos",
        "events_url": "https://api.github.com/users/diegorusso/events{/privacy}",
        "received_events_url": "https://api.github.com/users/diegorusso/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 7018075156,
          "node_id": "LA_kwDOBN0Z8c8AAAABok9UFA",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-JIT",
          "name": "topic-JIT",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "diegorusso",
        "id": 342108,
        "node_id": "MDQ6VXNlcjM0MjEwOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/342108?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/diegorusso",
        "html_url": "https://github.com/diegorusso",
        "followers_url": "https://api.github.com/users/diegorusso/followers",
        "following_url": "https://api.github.com/users/diegorusso/following{/other_user}",
        "gists_url": "https://api.github.com/users/diegorusso/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/diegorusso/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/diegorusso/subscriptions",
        "organizations_url": "https://api.github.com/users/diegorusso/orgs",
        "repos_url": "https://api.github.com/users/diegorusso/repos",
        "events_url": "https://api.github.com/users/diegorusso/events{/privacy}",
        "received_events_url": "https://api.github.com/users/diegorusso/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "diegorusso",
          "id": 342108,
          "node_id": "MDQ6VXNlcjM0MjEwOA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/342108?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/diegorusso",
          "html_url": "https://github.com/diegorusso",
          "followers_url": "https://api.github.com/users/diegorusso/followers",
          "following_url": "https://api.github.com/users/diegorusso/following{/other_user}",
          "gists_url": "https://api.github.com/users/diegorusso/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/diegorusso/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/diegorusso/subscriptions",
          "organizations_url": "https://api.github.com/users/diegorusso/orgs",
          "repos_url": "https://api.github.com/users/diegorusso/repos",
          "events_url": "https://api.github.com/users/diegorusso/events{/privacy}",
          "received_events_url": "https://api.github.com/users/diegorusso/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2024-05-29T13:25:56Z",
      "updated_at": "2024-12-15T12:03:58Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\n### Proposal:\r\n\r\nThis is really a follow up of https://github.com/python/cpython/issues/115802 and more focused on the AArch64 improvements of the code generated for the JIT.\r\nThis has been discussed with @brandtbucher during PyCon 2024.\r\n\r\nThere are a series of incremental improvements that we could implement when generating AArch64 code:\r\n\r\n- [x] Remove duplication of trampoline section (movk) at the end of every micro op assembly code.\r\n\r\n```\r\n    // 0000000000000140:  R_AARCH64_MOVW_UABS_G0_NC    PyObject_Free\r\n    // 144: f2a00008      movk    x8, #0x0, lsl #16\r\n    // 0000000000000144:  R_AARCH64_MOVW_UABS_G1_NC    PyObject_Free\r\n    // 148: f2c00008      movk    x8, #0x0, lsl #32\r\n    // 0000000000000148:  R_AARCH64_MOVW_UABS_G2_NC    PyObject_Free\r\n    // 14c: f2e00008      movk    x8, #0x0, lsl #48\r\n    // 000000000000014c:  R_AARCH64_MOVW_UABS_G3       PyObject_Free\r\n    // 150: d61f0100      br      x8\r\n    // 154: 00 00 00 00\r\n    // 158: d2800008      mov     x8, #0x0\r\n    // 0000000000000158:  R_AARCH64_MOVW_UABS_G0_NC    PyObject_Free\r\n    // 15c: f2a00008      movk    x8, #0x0, lsl #16\r\n    // 000000000000015c:  R_AARCH64_MOVW_UABS_G1_NC    PyObject_Free\r\n    // 160: f2c00008      movk    x8, #0x0, lsl #32\r\n    // 0000000000000160:  R_AARCH64_MOVW_UABS_G2_NC    PyObject_Free\r\n    // 164: f2e00008      movk    x8, #0x0, lsl #48\r\n    // 0000000000000164:  R_AARCH64_MOVW_UABS_G3       PyObject_Free\r\n    // 168: d61f0100      br      x8\r\n```\r\n- [x] Implement trampoline with LDR of a PC relative literal (instead of movk). It saves 8bytes in code size.\r\n- [x] Move the trampolines from the \"code\" section of a micro-op to the \"data\" section, so it's out-of-line.\r\n- [x] Emit all of the trampolines at the end of every trace, so that each opcode doesn't need its own copy of the trampolines it uses. Also write a function to generate the trampoline.\r\n- [ ] Once we have a slab allocator from https://github.com/python/cpython/issues/119730, a PR use one set of trampolines per-slab rather than per-trace.\r\n\r\n\r\n### Has this already been discussed elsewhere?\r\n\r\nI have already discussed this feature proposal on Discourse\r\n\r\n### Links to previous discussion of this feature:\r\n\r\nThis has been discussed broadly at PyCon 2024 in person.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-120250\n* gh-121001\n* gh-121280\n* gh-123872\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/119726/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 1,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/119726/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/119671",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/119671/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/119671/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/119671/events",
      "html_url": "https://github.com/python/cpython/issues/119671",
      "id": 2321561401,
      "node_id": "I_kwDOBN0Z8c6KYDc5",
      "number": 119671,
      "title": "Some ntpath/posixpath functions unusable on foreign OS",
      "user": {
        "login": "barneygale",
        "id": 960340,
        "node_id": "MDQ6VXNlcjk2MDM0MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/barneygale",
        "html_url": "https://github.com/barneygale",
        "followers_url": "https://api.github.com/users/barneygale/followers",
        "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
        "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
        "organizations_url": "https://api.github.com/users/barneygale/orgs",
        "repos_url": "https://api.github.com/users/barneygale/repos",
        "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
        "received_events_url": "https://api.github.com/users/barneygale/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 9,
      "created_at": "2024-05-28T17:14:46Z",
      "updated_at": "2024-06-17T20:21:48Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "The [`os.path` docs intro](https://docs.python.org/3/library/os.path.html) includes:\r\n\r\n> Note: Since different operating systems have different path name conventions, there are several versions of this module in the standard library. The `os.path` module is always the path module suitable for the operating system Python is running on, and therefore usable for local paths. However, you can also import and use the individual modules if you want to manipulate a path that is *always* in one of the different formats. They all have the same interface:\r\n>\r\n> - `posixpath` for UNIX-style paths\r\n> - `ntpath` for Windows paths\r\n\r\nBut we don't explain that some of the functions in `ntpath` and `posixpath` aren't suitable for usage on a \"foreign\" OS, e.g. that using `ntpath.realpath()` from POSIX is a bad idea.\r\n\r\nThese functions are safe because they do purely lexical work:\r\n\r\n- `basename`\r\n- `commonpath`\r\n- `commonprefix`\r\n- `dirname`\r\n- `isabs`\r\n- `join`\r\n- `normcase`\r\n- `normpath`\r\n- `split`\r\n- `splitdrive`\r\n- `splitroot`\r\n- `splitext`\r\n\r\nThese functions are probably unsafe because they rely on details of the host OS (e.g. via the `os` module):\r\n\r\n- `abspath`\r\n- `exists`\r\n- `lexists`\r\n- `expanduser`\r\n- `expandvars`\r\n- `getatime`\r\n- `getmtime`\r\n- `getctime`\r\n- `getsize`\r\n- `isfile`\r\n- `isdir`\r\n- `isjunction`\r\n- `islink`\r\n- `ismount`\r\n- `isdevdrive`\r\n- `realpath`\r\n- `relpath`\r\n- `samefile`\r\n- `sameopenfile`\r\n- `samestat`\r\n- `supports_unicode_filenames`\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-119772\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/119671/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/119671/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/119496",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/119496/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/119496/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/119496/events",
      "html_url": "https://github.com/python/cpython/issues/119496",
      "id": 2314755360,
      "node_id": "I_kwDOBN0Z8c6J-F0g",
      "number": 119496,
      "title": "Improve handling of UTF-16-LE encoded .pth files ",
      "user": {
        "login": "ncoghlan",
        "id": 1026649,
        "node_id": "MDQ6VXNlcjEwMjY2NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1026649?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ncoghlan",
        "html_url": "https://github.com/ncoghlan",
        "followers_url": "https://api.github.com/users/ncoghlan/followers",
        "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}",
        "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions",
        "organizations_url": "https://api.github.com/users/ncoghlan/orgs",
        "repos_url": "https://api.github.com/users/ncoghlan/repos",
        "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ncoghlan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2024-05-24T08:27:22Z",
      "updated_at": "2024-10-08T11:08:44Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\nI just finished an extended Windows bug hunt that I eventually tracked down to a `.pth` file being encoded in UTF-16-LE rather than an ASCII-compatible encoding.\r\n\r\nI only figured it out by turning off frozen modules and hacking site.py to dump the output of `.pth` files as it tried to process them (at which point I checked the `.pth` file encoding in VSCode and sure enough, `UTF-16-LE` was down in the corner of the file window).\r\n\r\nI hit the bug by porting a Linux shell script to Windows PowerShell, not thinking about the fact that `| Out-File` on Windows Powershell 5.1 defaults to UTF-16-LE (newer versions of PowerShell that aren't the ones baked into the OS default to UTF-8 without a BOM).\r\n\r\nGiven the inevitable presence of NULLs in a UTF-16-LE file, while there shouldn't be any in a UTF-8 or locale encoding file, it seems to me we should be able to handle such situations more gracefully (at the very least logging an error if NULL bytes are present in the file, but potentially even just making UTF-16-LE encoded .pth files straight up work by checking for NULL bytes, and using UTF-16-LE instead of UTF-8 and the locale encoding if we find one, or else trying UTF-16-LE before trying the locale encoding on Windows)\r\n\r\n(This is somewhat related to #77102)\r\n\r\n### Has this already been discussed elsewhere?\r\n\r\nNo response given\r\n\r\n### Links to previous discussion of this feature:\r\n\r\n_No response_\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-119503\r\n* gh-119508\r\n* gh-119509\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/119496/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/119496/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/119400",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/119400/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/119400/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/119400/events",
      "html_url": "https://github.com/python/cpython/issues/119400",
      "id": 2310511925,
      "node_id": "I_kwDOBN0Z8c6Jt501",
      "number": 119400,
      "title": "make_ssl_certs: run at build time, update reference test data automatically",
      "user": {
        "login": "kanavin",
        "id": 1011938,
        "node_id": "MDQ6VXNlcjEwMTE5Mzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1011938?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kanavin",
        "html_url": "https://github.com/kanavin",
        "followers_url": "https://api.github.com/users/kanavin/followers",
        "following_url": "https://api.github.com/users/kanavin/following{/other_user}",
        "gists_url": "https://api.github.com/users/kanavin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kanavin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kanavin/subscriptions",
        "organizations_url": "https://api.github.com/users/kanavin/orgs",
        "repos_url": "https://api.github.com/users/kanavin/repos",
        "events_url": "https://api.github.com/users/kanavin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kanavin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-05-22T13:14:14Z",
      "updated_at": "2024-05-23T08:48:04Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\nAs discussed here:\r\nhttps://github.com/python/cpython/pull/107594\r\n\r\nmake_ssl_certs.py has a few shortcomings. In particular:\r\n- it generates certificates, but does not update reference data in tests that use them, instead asking the user to copy paste the data by hand (expiration dates and serial numbers in particular)\r\n- it is supposed to be run by hand and isn't executed in builds, which means its output has to be checked into git, cluttering the source tree, and complicating reviews of pull requests that change that output.\r\n- expiration dates are hardcoded into the tool and can't be passed in as parameters\r\n\r\n\r\n### CPython versions tested on:\r\n\r\nCPython main branch\r\n\r\n### Operating systems tested on:\r\n\r\nLinux\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-119401\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/119400/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/119400/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/119310",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/119310/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/119310/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/119310/events",
      "html_url": "https://github.com/python/cpython/issues/119310",
      "id": 2308452703,
      "node_id": "I_kwDOBN0Z8c6JmDFf",
      "number": 119310,
      "title": "'\\040' instead of space in repl history on macOS with 3.13 or main branch",
      "user": {
        "login": "aisk",
        "id": 699636,
        "node_id": "MDQ6VXNlcjY5OTYzNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/699636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aisk",
        "html_url": "https://github.com/aisk",
        "followers_url": "https://api.github.com/users/aisk/followers",
        "following_url": "https://api.github.com/users/aisk/following{/other_user}",
        "gists_url": "https://api.github.com/users/aisk/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aisk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aisk/subscriptions",
        "organizations_url": "https://api.github.com/users/aisk/orgs",
        "repos_url": "https://api.github.com/users/aisk/repos",
        "events_url": "https://api.github.com/users/aisk/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aisk/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6933214501,
          "node_id": "LA_kwDOBN0Z8c8AAAABnUB1JQ",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-repl",
          "name": "topic-repl",
          "color": "0052cc",
          "default": false,
          "description": "Related to the interactive shell"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "ambv",
        "id": 55281,
        "node_id": "MDQ6VXNlcjU1Mjgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/55281?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ambv",
        "html_url": "https://github.com/ambv",
        "followers_url": "https://api.github.com/users/ambv/followers",
        "following_url": "https://api.github.com/users/ambv/following{/other_user}",
        "gists_url": "https://api.github.com/users/ambv/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ambv/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ambv/subscriptions",
        "organizations_url": "https://api.github.com/users/ambv/orgs",
        "repos_url": "https://api.github.com/users/ambv/repos",
        "events_url": "https://api.github.com/users/ambv/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ambv/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "ambv",
          "id": 55281,
          "node_id": "MDQ6VXNlcjU1Mjgx",
          "avatar_url": "https://avatars.githubusercontent.com/u/55281?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ambv",
          "html_url": "https://github.com/ambv",
          "followers_url": "https://api.github.com/users/ambv/followers",
          "following_url": "https://api.github.com/users/ambv/following{/other_user}",
          "gists_url": "https://api.github.com/users/ambv/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ambv/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ambv/subscriptions",
          "organizations_url": "https://api.github.com/users/ambv/orgs",
          "repos_url": "https://api.github.com/users/ambv/repos",
          "events_url": "https://api.github.com/users/ambv/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ambv/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-05-21T14:31:22Z",
      "updated_at": "2024-09-06T13:40:46Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\nWhen using the version of Python (3.9.6) that comes with Apple at `/usr/bin/python`, or when installing the latest version of Python (3.12.3) via Homebrew, the readline functionality is based on libedit. There is a file ~/.python_history that stores the REPL history, and its content is similar to:\r\n\r\n```\r\n_HiStOrY_V2_\r\nimport\\040os\r\n```\r\n\r\nWhen using the latest version of Python built from the main branch, which includes the new REPL, pressing the up arrow key will display:\r\n\r\n```\r\n\u276f ./python.exe\r\nPython 3.14.0a0 experimental free-threading build (heads/main:73f4a58d36, May 21 2024, 21:12:51) [Clang 15.0.0 (clang-1500.3.9.4)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import\\040os\r\n```\r\n\r\nThe '\\04' is not converted to space character.\r\n\r\n### CPython versions tested on:\r\n\r\n3.13\r\n\r\n### Operating systems tested on:\r\n\r\nmacOS Sonoma 14.2\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-121779\n* gh-123784\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/119310/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/119310/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/119247",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/119247/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/119247/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/119247/events",
      "html_url": "https://github.com/python/cpython/issues/119247",
      "id": 2306604044,
      "node_id": "I_kwDOBN0Z8c6Je_wM",
      "number": 119247,
      "title": "PySequence_Fast needs new macros to be safe in a nogil world",
      "user": {
        "login": "MojoVampire",
        "id": 26495692,
        "node_id": "MDQ6VXNlcjI2NDk1Njky",
        "avatar_url": "https://avatars.githubusercontent.com/u/26495692?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MojoVampire",
        "html_url": "https://github.com/MojoVampire",
        "followers_url": "https://api.github.com/users/MojoVampire/followers",
        "following_url": "https://api.github.com/users/MojoVampire/following{/other_user}",
        "gists_url": "https://api.github.com/users/MojoVampire/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/MojoVampire/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MojoVampire/subscriptions",
        "organizations_url": "https://api.github.com/users/MojoVampire/orgs",
        "repos_url": "https://api.github.com/users/MojoVampire/repos",
        "events_url": "https://api.github.com/users/MojoVampire/events{/privacy}",
        "received_events_url": "https://api.github.com/users/MojoVampire/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "MojoVampire",
        "id": 26495692,
        "node_id": "MDQ6VXNlcjI2NDk1Njky",
        "avatar_url": "https://avatars.githubusercontent.com/u/26495692?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MojoVampire",
        "html_url": "https://github.com/MojoVampire",
        "followers_url": "https://api.github.com/users/MojoVampire/followers",
        "following_url": "https://api.github.com/users/MojoVampire/following{/other_user}",
        "gists_url": "https://api.github.com/users/MojoVampire/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/MojoVampire/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MojoVampire/subscriptions",
        "organizations_url": "https://api.github.com/users/MojoVampire/orgs",
        "repos_url": "https://api.github.com/users/MojoVampire/repos",
        "events_url": "https://api.github.com/users/MojoVampire/events{/privacy}",
        "received_events_url": "https://api.github.com/users/MojoVampire/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "MojoVampire",
          "id": 26495692,
          "node_id": "MDQ6VXNlcjI2NDk1Njky",
          "avatar_url": "https://avatars.githubusercontent.com/u/26495692?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/MojoVampire",
          "html_url": "https://github.com/MojoVampire",
          "followers_url": "https://api.github.com/users/MojoVampire/followers",
          "following_url": "https://api.github.com/users/MojoVampire/following{/other_user}",
          "gists_url": "https://api.github.com/users/MojoVampire/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/MojoVampire/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/MojoVampire/subscriptions",
          "organizations_url": "https://api.github.com/users/MojoVampire/orgs",
          "repos_url": "https://api.github.com/users/MojoVampire/repos",
          "events_url": "https://api.github.com/users/MojoVampire/events{/privacy}",
          "received_events_url": "https://api.github.com/users/MojoVampire/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2024-05-20T19:11:51Z",
      "updated_at": "2024-05-24T20:22:16Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\n### Proposal:\r\n\r\nRight now, most uses of `PySequence_Fast` are invalid in a nogil context when it is passed an existing `list`; `PySequence_FAST_ITEMS` returns a reference to the internal array of `PyObject*`s that can be resized at any time if other threads add or delete items, `PySequence_FAST_GET_SIZE` similarly reports a size that is invalid an instant after it's reported. Similarly, if individual items are replaced without changing size, you'd have similar issues.\r\n\r\nBut when the argument passed is a `tuple` (incref-ed and returned unchanged, but safe due to immutability) or any non-`list` type (converted to new `list`) no lock is needed. Per conversation with Dino, going to create macros, to be called after a call to `PySequence_Fast`, to conditionally lock and unlock the *original* `list` when applicable, while avoiding locks in all other cases, before any other `PySequence*` APIs are used.\r\n\r\nPreliminary (subject to bike-shedding) macro names are:\r\n\r\n`Py_BEGIN_CRITICAL_SECTION_SEQUENCE_FAST`\r\n`Py_END_CRITICAL_SECTION_SEQUENCE_FAST`\r\n\r\nboth defined in `pycore_critical_section.h`.\r\n\r\n### Has this already been discussed elsewhere?\r\n\r\nThis is a minor feature, which does not need previous discussion elsewhere\r\n\r\n### Links to previous discussion of this feature:\r\n\r\nDiscussion occurred with Dino during CPython core sprints.\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-119315\r\n* gh-119419\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/119247/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/119247/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/119180",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/119180/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/119180/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/119180/events",
      "html_url": "https://github.com/python/cpython/issues/119180",
      "id": 2304664735,
      "node_id": "I_kwDOBN0Z8c6JXmSf",
      "number": 119180,
      "title": "Implement PEP 649 and PEP 749",
      "user": {
        "login": "JelleZijlstra",
        "id": 906600,
        "node_id": "MDQ6VXNlcjkwNjYwMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/906600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JelleZijlstra",
        "html_url": "https://github.com/JelleZijlstra",
        "followers_url": "https://api.github.com/users/JelleZijlstra/followers",
        "following_url": "https://api.github.com/users/JelleZijlstra/following{/other_user}",
        "gists_url": "https://api.github.com/users/JelleZijlstra/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JelleZijlstra/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JelleZijlstra/subscriptions",
        "organizations_url": "https://api.github.com/users/JelleZijlstra/orgs",
        "repos_url": "https://api.github.com/users/JelleZijlstra/repos",
        "events_url": "https://api.github.com/users/JelleZijlstra/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JelleZijlstra/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4030784939,
          "node_id": "LA_kwDOBN0Z8c7wQOWr",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-typing",
          "name": "topic-typing",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "JelleZijlstra",
        "id": 906600,
        "node_id": "MDQ6VXNlcjkwNjYwMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/906600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JelleZijlstra",
        "html_url": "https://github.com/JelleZijlstra",
        "followers_url": "https://api.github.com/users/JelleZijlstra/followers",
        "following_url": "https://api.github.com/users/JelleZijlstra/following{/other_user}",
        "gists_url": "https://api.github.com/users/JelleZijlstra/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JelleZijlstra/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JelleZijlstra/subscriptions",
        "organizations_url": "https://api.github.com/users/JelleZijlstra/orgs",
        "repos_url": "https://api.github.com/users/JelleZijlstra/repos",
        "events_url": "https://api.github.com/users/JelleZijlstra/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JelleZijlstra/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "JelleZijlstra",
          "id": 906600,
          "node_id": "MDQ6VXNlcjkwNjYwMA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/906600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/JelleZijlstra",
          "html_url": "https://github.com/JelleZijlstra",
          "followers_url": "https://api.github.com/users/JelleZijlstra/followers",
          "following_url": "https://api.github.com/users/JelleZijlstra/following{/other_user}",
          "gists_url": "https://api.github.com/users/JelleZijlstra/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/JelleZijlstra/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/JelleZijlstra/subscriptions",
          "organizations_url": "https://api.github.com/users/JelleZijlstra/orgs",
          "repos_url": "https://api.github.com/users/JelleZijlstra/repos",
          "events_url": "https://api.github.com/users/JelleZijlstra/events{/privacy}",
          "received_events_url": "https://api.github.com/users/JelleZijlstra/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2024-05-19T15:34:32Z",
      "updated_at": "2024-12-30T17:24:02Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "PEP-649 has been accepted and should be implemented in Python 3.14. Let's use this issue to track the implementation:\r\n\r\n- [x] Decide on or clarify the adoption strategy (https://discuss.python.org/t/pep-649-deferred-evaluation-of-annotations-tentatively-accepted/21331/44)\r\n- [x] Add new `__annotate__` attributes #119209\r\n- [x] Implement core interpreter changes (e.g., new symbol table functionality) #119361\r\n- [x] Implement new Python-level APIs, like the new `format` argument to `inspect.get_annotations` #119891\r\n  - [x] (PEP-649 specifies that `inspect.AnnotationsFormat` should be a \"global enum\". Is that desirable? TBD. https://github.com/python/cpython/pull/119361/files#r1614753031)\r\n- [x] Document the new semantics #122235 \r\n  - [ ] Add higher-level documentation, e.g. a migration guide away from `from __future__ import annotations`; an introduction to annotationlib; an update to Larry's annotations HOWTO\r\n- [x] Make staticmethod and classmethod not force evaluation of annotations #119864\r\n- [ ] Adapt standard library code that uses annotations to work excellently with PEP 649\r\n  - [x] dataclasses #119891\r\n  - [x] typing.py: TypedDict, NamedTuple, try to remove dependency on `inspect`. (If it can't be removed, get rid of the awkward dance we do for `typing.Protocol` to import `inspect.getattr_static` lazily.)\r\n  - [x] singledispatch #119891\r\n    - [ ] Also make it only evaluate the relevant parameter, https://github.com/python/cpython/pull/119891#discussion_r1636397226\r\n  - [ ] functools.update_wrapper #119891, #124342\r\n- [x] Add PEP 649-like functionality to TypeAliasType, TypeVar, etc. (`pep649-typevar` branch in my fork)\r\n- [ ] Make sure the ecosystem is ready by testing third-party libraries like Pydantic\r\n  - [x] typing_extensions: needs changes similar to those in typing.py (python/typing_extensions#412)\r\n  - [ ] beartype: had various unrelated problems on 3.13 (beartype/beartype#387); a few additional tests fail on the PR branch due to direct manipulation of `__dict__`\r\n  - [ ] typeguard: some unrelated 3.13 problems (agronholm/typeguard#460); no test failures related to PEP 649\r\n  - [ ] pyanalyze: some unrelated 3.13 issues and a few changes necessary due to direct `__dict__` access (quora/pyanalyze#773)\r\n  - [ ] pydantic: failed to build for 3.14 so far\r\n- [ ] Optimize the implementation. Ideas:\r\n  - [ ] Avoid creation of function objects and store only code objects instead #124157\r\n  - [x] Avoid creation of AST nodes and use of eval() for ForwardRefs that are just names #124337\r\n\r\nThings to revisit:\r\n\r\n- [x] Should FORWARDREF be the default? https://github.com/beartype/beartype/pull/440#issuecomment-2373086020\r\n- [x] Add VALUE_WITH_FAKE_GLOBALS format\r\n- [x] Name of `__annotate__` parameter\r\n- [ ] Should setting `__annotations__` invalidate `__annotate__`?\r\n- [ ] Rename SOURCE to STRING?\r\n\r\nI am planning to work on the interpreter core first.\r\n\r\ncc @larryhastings @carljm @samuelcolvin \r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-119209\r\n* gh-119321\r\n* gh-119361\r\n* gh-119397\r\n* gh-119864\r\n* gh-119891\r\n* gh-120719\r\n* gh-120816\r\n* gh-122074\r\n* gh-122210\r\n* gh-122212\r\n* gh-122235\r\n* gh-122365\r\n* gh-122366\r\n* gh-124326\r\n* gh-124337\r\n* gh-124393\r\n* gh-124415\r\n* gh-124461\r\n* gh-124479\r\n* gh-124561\r\n* gh-124620\n* gh-124634\n* gh-124730\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/119180/reactions",
        "total_count": 9,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 7,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/119180/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/119154",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/119154/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/119154/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/119154/events",
      "html_url": "https://github.com/python/cpython/issues/119154",
      "id": 2304290807,
      "node_id": "I_kwDOBN0Z8c6JWK_3",
      "number": 119154,
      "title": "Add `asyncio.Queue.__aiter__`",
      "user": {
        "login": "Zac-HD",
        "id": 12229877,
        "node_id": "MDQ6VXNlcjEyMjI5ODc3",
        "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Zac-HD",
        "html_url": "https://github.com/Zac-HD",
        "followers_url": "https://api.github.com/users/Zac-HD/followers",
        "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}",
        "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions",
        "organizations_url": "https://api.github.com/users/Zac-HD/orgs",
        "repos_url": "https://api.github.com/users/Zac-HD/repos",
        "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Zac-HD/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 557226369,
          "node_id": "MDU6TGFiZWw1NTcyMjYzNjk=",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-asyncio",
          "name": "topic-asyncio",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 22,
      "created_at": "2024-05-18T19:57:00Z",
      "updated_at": "2024-09-25T06:59:01Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\n### Proposal:\r\n\r\nOver the last few years, Trio and AnyIO users have proven out several design patterns using [channels as async iterables](https://trio.readthedocs.io/en/stable/reference-core.html#using-channels-to-pass-values-between-tasks).  For example, having a context manager yield an async iterable avoids the motivating problems of both PEP-533 and PEP-789.\r\n\r\nAn `asyncio.Queue` is almost identical to a channel-pair, especially with the `.shutdown()` method added in Python 3.13.  I therefore propose that we add an `.__aiter__` method, to more support such design patterns without subclassing or a generator helper function, with an implementation as described in https://github.com/python/cpython/issues/119154#issuecomment-2120692346\r\n\r\n### Links to previous discussion of this feature:\r\n\r\nhttps://github.com/python/peps/pull/3782#pullrequestreview-2059307313 suggested that `queue.Queue` could also be iterable.  If we're extending this to synchronous classes I'd also include `multiprocessing.Queue` and `multiprocessing.SimpleQueue`.  I'd omit `multiprocessing.connection.Connection`, due to the byte-level send/recv methods, and `queue.SimpleQueue` because without a `.close()` or `.shutdown()` method there's no clean way to shut down.\r\n\r\n### Limitations\r\n\r\nMaking `Queue` aiterable reaches API parity for single-producer, single-consumer patterns.  In multi-producer and/or multi-consumer patterns, without [a `.clone()` method](https://anyio.readthedocs.io/en/stable/streams.html#memory-object-streams) it is the user's responsibility to shut down the queue when the _last_ task is done.  I do not propose to add `.clone()`, but we could include that link in the docs as an option for multi-producer patterns if desired.\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-120491\r\n* gh-120925\r\n* gh-120503\r\n<!-- /gh-linked-prs -->\r\n\r\n## Decision\r\n\r\nhttps://github.com/python/cpython/pull/120925#issuecomment-2370151879 explains the decision not to add `*.Queue.iter()`, and https://github.com/python/cpython/pull/120491#issuecomment-2372889253 that `asyncio.Queue.__aiter__` was rejected for the same reasons.  Instead, the docs will show how users can write a wrapper like this.",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/119154/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/119154/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/118986",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/118986/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/118986/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/118986/events",
      "html_url": "https://github.com/python/cpython/issues/118986",
      "id": 2292122090,
      "node_id": "I_kwDOBN0Z8c6InwHq",
      "number": 118986,
      "title": "socket.IP{,V6}_RECVERR not exposed",
      "user": {
        "login": "chrysn",
        "id": 442326,
        "node_id": "MDQ6VXNlcjQ0MjMyNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/442326?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chrysn",
        "html_url": "https://github.com/chrysn",
        "followers_url": "https://api.github.com/users/chrysn/followers",
        "following_url": "https://api.github.com/users/chrysn/following{/other_user}",
        "gists_url": "https://api.github.com/users/chrysn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/chrysn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chrysn/subscriptions",
        "organizations_url": "https://api.github.com/users/chrysn/orgs",
        "repos_url": "https://api.github.com/users/chrysn/repos",
        "events_url": "https://api.github.com/users/chrysn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/chrysn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-05-13T08:07:49Z",
      "updated_at": "2024-06-24T21:24:32Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\nThe IPV6_RECVERR socket option, which is needed to make good use of the MSG_ERRQUEUE recvmsg flag, is not exposed through socket, just through the private `IN` module.\n\n```python\nsock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_RECVERR, 1)\ndata, ancdata, flags, addr = my_socket.recvmsg(2048, 1024, sock.MSG_ERRQUEUE)\n```\n\n\n### Has this already been discussed elsewhere?\n\nThis is a minor feature, which does not need previous discussion elsewhere\n\n### Links to previous discussion of this feature:\n\nPeople who want to use this only find [some stackoverflow post](https://stackoverflow.com/questions/15036522/receiving-icmp-host-unreachable-message-on-udp-socket-in-python) that points them to the internal `IN` module, which thus makes its way into production code rather than just exposing two more socket option names.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-118987\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/118986/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/118986/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/118974",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/118974/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/118974/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/118974/events",
      "html_url": "https://github.com/python/cpython/issues/118974",
      "id": 2291404615,
      "node_id": "I_kwDOBN0Z8c6IlA9H",
      "number": 118974,
      "title": "Add `dataclass_factory` argument to `dataclasses.make_dataclass` for custom dataclass transformation support",
      "user": {
        "login": "XuehaiPan",
        "id": 16078332,
        "node_id": "MDQ6VXNlcjE2MDc4MzMy",
        "avatar_url": "https://avatars.githubusercontent.com/u/16078332?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/XuehaiPan",
        "html_url": "https://github.com/XuehaiPan",
        "followers_url": "https://api.github.com/users/XuehaiPan/followers",
        "following_url": "https://api.github.com/users/XuehaiPan/following{/other_user}",
        "gists_url": "https://api.github.com/users/XuehaiPan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/XuehaiPan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/XuehaiPan/subscriptions",
        "organizations_url": "https://api.github.com/users/XuehaiPan/orgs",
        "repos_url": "https://api.github.com/users/XuehaiPan/repos",
        "events_url": "https://api.github.com/users/XuehaiPan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/XuehaiPan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 7334604047,
          "node_id": "LA_kwDOBN0Z8c8AAAABtS0tDw",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-dataclasses",
          "name": "topic-dataclasses",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-05-12T16:23:35Z",
      "updated_at": "2024-08-16T08:55:11Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\n### Proposal:\r\n\r\n[`typing.dataclass_transform`](https://typing.readthedocs.io/en/latest/spec/dataclasses.html#the-dataclass-transform-decorator) ([PEP 681 \u2013 Data Class Transforms](https://peps.python.org/pep-0681)) allows users define their own `dataclass` decorator that can be recognized by the type checker.\r\n\r\nHere is a real-world example use case:\r\n\r\n- [`flax.struct.dataclass`](https://flax.readthedocs.io/en/latest/_modules/flax/struct.html#dataclass)\r\n\r\nAlso, [`dataclasses.asdict`](https://docs.python.org/3/library/dataclasses.html#dataclasses.asdict) and [`dataclasses.astuple`](https://docs.python.org/3/library/dataclasses.html#dataclasses.astuple) allow users pass an extra argument for the factory of the returned instance.\r\n\r\nhttps://github.com/python/cpython/blob/0fb18b02c8ad56299d6a2910be0bab8ad601ef24/Lib/dataclasses.py#L1299-L1317\r\n\r\nhttps://github.com/python/cpython/blob/0fb18b02c8ad56299d6a2910be0bab8ad601ef24/Lib/dataclasses.py#L1380-L1397\r\n\r\nHowever, the `make_dataclass` function does not support third-party `dataclass` factory (e.g., [`flax.struct.dataclass`](https://flax.readthedocs.io/en/latest/_modules/flax/struct.html#dataclass)):\r\n\r\nhttps://github.com/python/cpython/blob/0fb18b02c8ad56299d6a2910be0bab8ad601ef24/Lib/dataclasses.py#L1441-L1528\r\n\r\nIt can only apply `dataclasses.dataclass` (see the `return` statement above).\r\n\r\nThis feature request issue will discuss the possibility of adding a new `dataclass_factory` argument to the [`dataclasses.make_dataclass`](https://docs.python.org/3/library/dataclasses.html#dataclasses.make_dataclass) to support third-party dataclasss transformation, similar to `dict_factory` for [`dataclasses.asdict`](https://docs.python.org/3/library/dataclasses.html#dataclasses.asdict).\r\n\r\n```python\r\n# dataclasses.py\r\n\r\ndef make_dataclass(cls_name, fields, *, bases=(), namespace=None, init=True,\r\n                   repr=True, eq=True, order=False, unsafe_hash=False,\r\n                   frozen=False, match_args=True, kw_only=False, slots=False,\r\n                   weakref_slot=False, module=None,\r\n                   dataclass_factory=dataclass):\r\n    ...\r\n\r\n    # Apply the normal decorator.\r\n    return dataclass_factory(cls, init=init, repr=repr, eq=eq, order=order,\r\n                             unsafe_hash=unsafe_hash, frozen=frozen,\r\n                             match_args=match_args, kw_only=kw_only, slots=slots,\r\n                             weakref_slot=weakref_slot)\r\n```\r\n\r\n### Has this already been discussed elsewhere?\r\n\r\nhttps://discuss.python.org/t/add-dataclass-factory-argument-to-dataclasses-make-dataclass-for-custom-dataclass-transformation-support/53188\r\n\r\n### Links to previous discussion of this feature:\r\n\r\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-122723\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/118974/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/118974/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/118973",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/118973/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/118973/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/118973/events",
      "html_url": "https://github.com/python/cpython/issues/118973",
      "id": 2291385963,
      "node_id": "I_kwDOBN0Z8c6Ik8Zr",
      "number": 118973,
      "title": "\"Windows fatal Exception: access violation\" while testing 3.13.0b1 free-threading build (related to tkinter ?)",
      "user": {
        "login": "stonebig",
        "id": 4312421,
        "node_id": "MDQ6VXNlcjQzMTI0MjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4312421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stonebig",
        "html_url": "https://github.com/stonebig",
        "followers_url": "https://api.github.com/users/stonebig/followers",
        "following_url": "https://api.github.com/users/stonebig/following{/other_user}",
        "gists_url": "https://api.github.com/users/stonebig/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/stonebig/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/stonebig/subscriptions",
        "organizations_url": "https://api.github.com/users/stonebig/orgs",
        "repos_url": "https://api.github.com/users/stonebig/repos",
        "events_url": "https://api.github.com/users/stonebig/events{/privacy}",
        "received_events_url": "https://api.github.com/users/stonebig/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 570103914,
          "node_id": "MDU6TGFiZWw1NzAxMDM5MTQ=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-windows",
          "name": "OS-windows",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 4018848914,
          "node_id": "LA_kwDOBN0Z8c7visSS",
          "url": "https://api.github.com/repos/python/cpython/labels/type-crash",
          "name": "type-crash",
          "color": "b60205",
          "default": false,
          "description": "A hard crash of the interpreter, possibly with a core dump"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "zooba",
        "id": 1693688,
        "node_id": "MDQ6VXNlcjE2OTM2ODg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zooba",
        "html_url": "https://github.com/zooba",
        "followers_url": "https://api.github.com/users/zooba/followers",
        "following_url": "https://api.github.com/users/zooba/following{/other_user}",
        "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
        "organizations_url": "https://api.github.com/users/zooba/orgs",
        "repos_url": "https://api.github.com/users/zooba/repos",
        "events_url": "https://api.github.com/users/zooba/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zooba/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "zooba",
          "id": 1693688,
          "node_id": "MDQ6VXNlcjE2OTM2ODg=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/zooba",
          "html_url": "https://github.com/zooba",
          "followers_url": "https://api.github.com/users/zooba/followers",
          "following_url": "https://api.github.com/users/zooba/following{/other_user}",
          "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
          "organizations_url": "https://api.github.com/users/zooba/orgs",
          "repos_url": "https://api.github.com/users/zooba/repos",
          "events_url": "https://api.github.com/users/zooba/events{/privacy}",
          "received_events_url": "https://api.github.com/users/zooba/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 12,
      "created_at": "2024-05-12T15:33:06Z",
      "updated_at": "2024-11-24T05:50:39Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Crash report\r\n\r\n### What happened?\r\n\r\ndoing pytest on my github repository [\"sqlite-bro\"](https://github.com/stonebig/sqlite_bro) , with Python-3.13.0b1 augmented per:\r\n- \"with free-threading binaries download\"  option checked\r\n- tempfile.py patched with \"_os.mkdir(file)\" (zooba magic potion)\r\n- python3.13t.exe renamed python.exe  \r\n- pythonw3.13t.exe renamed pythonw.exe\r\n\r\nI get a crash\r\n<details>\r\n\r\n```text\r\nC:\\Users\\stonebig\\Documents\\GitHub\\sqlite_bro>pytest\r\n====================================================================== test session starts =======================================================================\r\nplatform win32 -- Python 3.13.0b1, pytest-8.2.0, pluggy-1.5.0\r\nrootdir: C:\\Users\\stonebig\\Documents\\GitHub\\sqlite_bro\r\nconfigfile: pyproject.toml\r\ncollecting ... Windows fatal exception: access violation\r\n\r\nCurrent thread 0x00006b84 (most recent call first):\r\n  File \"<frozen importlib._bootstrap>\", line 488 in _call_with_frames_removed\r\n  File \"<frozen importlib._bootstrap_external>\", line 1315 in create_module\r\n  File \"<frozen importlib._bootstrap>\", line 813 in module_from_spec\r\n  File \"<frozen importlib._bootstrap>\", line 921 in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 1331 in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 1360 in _find_and_load\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\tkinter\\__init__.py\", line 38 in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 488 in _call_with_frames_removed\r\n  File \"<frozen importlib._bootstrap_external>\", line 1021 in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 935 in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 1331 in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 1360 in _find_and_load\r\n  File \"C:\\Users\\stonebig\\Documents\\GitHub\\sqlite_bro\\sqlite_bro\\sqlite_bro.py\", line 23 in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 488 in _call_with_frames_removed\r\n  File \"<frozen importlib._bootstrap_external>\", line 1021 in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 935 in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 1331 in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 1360 in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 488 in _call_with_frames_removed\r\n  File \"<frozen importlib._bootstrap>\", line 1415 in _handle_fromlist\r\n  File \"C:\\Users\\stonebig\\Documents\\GitHub\\sqlite_bro\\sqlite_bro\\tests\\test_general.py\", line 7 in <module>\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py\", line 178 in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 935 in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 1331 in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 1360 in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 1387 in _gcd_import\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\importlib\\__init__.py\", line 88 in import_module\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\pathlib.py\", line 591 in import_path\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\python.py\", line 487 in importtestmodule\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\python.py\", line 540 in _getobj\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\python.py\", line 282 in obj\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\python.py\", line 556 in _register_setup_module_fixture\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\python.py\", line 543 in collect\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\runner.py\", line 389 in collect\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\runner.py\", line 341 in from_call\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\runner.py\", line 391 in pytest_make_collect_report\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\pluggy\\_callers.py\", line 103 in _multicall\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\pluggy\\_manager.py\", line 120 in _hookexec\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\pluggy\\_hooks.py\", line 513 in __call__\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\runner.py\", line 565 in collect_one_node\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\main.py\", line 837 in _collect_one_node\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\main.py\", line 974 in genitems\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\main.py\", line 979 in genitems\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\main.py\", line 979 in genitems\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\main.py\", line 979 in genitems\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\main.py\", line 811 in perform_collect\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\main.py\", line 349 in pytest_collection\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\pluggy\\_callers.py\", line 103 in _multicall\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\pluggy\\_manager.py\", line 120 in _hookexec\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\pluggy\\_hooks.py\", line 513 in __call__\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\main.py\", line 338 in _main\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\main.py\", line 285 in wrap_session\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\main.py\", line 332 in pytest_cmdline_main\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\pluggy\\_callers.py\", line 103 in _multicall\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\pluggy\\_manager.py\", line 120 in _hookexec\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\pluggy\\_hooks.py\", line 513 in __call__\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\config\\__init__.py\", line 178 in main\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Lib\\site-packages\\_pytest\\config\\__init__.py\", line 206 in console_main\r\n  File \"C:...\\WPy64-31300b1\\python-3.13.0b1.amd64\\Scripts\\pytest.exe\\__main__.py\", line 7 in <module>\r\n  File \"<frozen runpy>\", line 88 in _run_code\r\n  File \"<frozen runpy>\", line 198 in _run_module_as_main\r\n```\r\n\r\n</details>\r\n\r\non 3.13.0b1 patched the same but not Free-threading all seems ok\r\n<details>\r\n\r\n```text\r\n================================================= test session starts =================================================\r\nplatform win32 -- Python 3.13.0b1, pytest-8.2.0, pluggy-1.5.0\r\nrootdir: C:\\Users\\stonebig\\Documents\\GitHub\\sqlite_bro\r\nconfigfile: pyproject.toml\r\ncollected 3 items\r\n\r\nsqlite_bro\\tests\\test_general.py ...                                                                             [100%]\r\n\r\n================================================== 3 passed in 0.76s ==================================================\r\n```\r\n\r\n</details>\r\n\r\n\r\nI did that test because IDLE doesn't want to start and doesn't say why.\r\nPackage set used:\r\n\r\n```\r\nPackage         Version      Summary\r\n_______________ ____________ ______________________________________________________________________\r\nbuild           1.1.1        A simple, correct Python build frontend\r\ncolorama        0.4.6        Cross-platform colored terminal text.\r\niniconfig       2.0.0        brain-dead simple config-ini parsing\r\npackaging       23.2         Core utilities for Python packages\r\npip             24.0         The PyPA recommended tool for installing Python packages.\r\npluggy          1.5.0        plugin and hook calling mechanisms for python\r\npyproject-hooks 1.0.0        Wrappers to call pyproject.toml-based build backend hooks.\r\npytest          8.2.0        pytest: simple powerful testing with Python\r\nsetuptools      69.2.0       Easily download, build, install, upgrade, and uninstall Python package\r\nsqlite-bro      0.13.1       a graphic SQLite Client in 1 Python file\r\nwheel           0.43.0       A built-package format for Python\r\nwinpython       8.0.20240512 WinPython distribution tools, including WPPM\r\n```\r\n\r\n### CPython versions tested on:\r\n\r\nCPython main branch\r\n\r\n### Operating systems tested on:\r\n\r\nWindows\r\n\r\n### Output from running 'python -VV' on the command line:\r\n\r\nPython 3.13.0b1 (tags/v3.13.0b1:2268289, May  8 2024, 12:31:50) [MSC v.1938 64 bit (AMD64)]\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-126768\n* gh-126867\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/118973/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/118973/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/118908",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/118908/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/118908/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/118908/events",
      "html_url": "https://github.com/python/cpython/issues/118908",
      "id": 2289862109,
      "node_id": "I_kwDOBN0Z8c6IfIXd",
      "number": 118908,
      "title": "New REPL exposes its internal imports/definitions to top-level environment",
      "user": {
        "login": "chgnrdv",
        "id": 52372310,
        "node_id": "MDQ6VXNlcjUyMzcyMzEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/52372310?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chgnrdv",
        "html_url": "https://github.com/chgnrdv",
        "followers_url": "https://api.github.com/users/chgnrdv/followers",
        "following_url": "https://api.github.com/users/chgnrdv/following{/other_user}",
        "gists_url": "https://api.github.com/users/chgnrdv/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/chgnrdv/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chgnrdv/subscriptions",
        "organizations_url": "https://api.github.com/users/chgnrdv/orgs",
        "repos_url": "https://api.github.com/users/chgnrdv/repos",
        "events_url": "https://api.github.com/users/chgnrdv/events{/privacy}",
        "received_events_url": "https://api.github.com/users/chgnrdv/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        },
        {
          "id": 6933214501,
          "node_id": "LA_kwDOBN0Z8c8AAAABnUB1JQ",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-repl",
          "name": "topic-repl",
          "color": "0052cc",
          "default": false,
          "description": "Related to the interactive shell"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2024-05-10T14:36:25Z",
      "updated_at": "2024-07-15T21:53:32Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nTop-level scope now contains globals of `_pyrepl.__main__`:\n```\nPython 3.14.0a0 (heads/main:a895756aec, May 10 2024, 16:56:55) [GCC 10.2.1 20210110] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> dir()\n['CAN_USE_PYREPL', '__annotations__', '__builtins__', '__cached__', '__doc__', '__file__',\n'__loader__', '__name__', '__package__', '__spec__', 'interactive_console', 'os', 'sys']\n```\n\n\n### CPython versions tested on:\n\n3.13\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-119547\n* gh-120362\n* gh-120370\n* gh-120392\n* gh-120408\n* gh-120430\n* gh-121054\n* gh-121059\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "lysnikolaou",
        "id": 20306270,
        "node_id": "MDQ6VXNlcjIwMzA2Mjcw",
        "avatar_url": "https://avatars.githubusercontent.com/u/20306270?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lysnikolaou",
        "html_url": "https://github.com/lysnikolaou",
        "followers_url": "https://api.github.com/users/lysnikolaou/followers",
        "following_url": "https://api.github.com/users/lysnikolaou/following{/other_user}",
        "gists_url": "https://api.github.com/users/lysnikolaou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lysnikolaou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lysnikolaou/subscriptions",
        "organizations_url": "https://api.github.com/users/lysnikolaou/orgs",
        "repos_url": "https://api.github.com/users/lysnikolaou/repos",
        "events_url": "https://api.github.com/users/lysnikolaou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lysnikolaou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/118908/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/118908/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/118771",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/118771/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/118771/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/118771/events",
      "html_url": "https://github.com/python/cpython/issues/118771",
      "id": 2285967173,
      "node_id": "I_kwDOBN0Z8c6IQRdF",
      "number": 118771,
      "title": "3.13 adds C macros/functions/types without the `Py`/`_Py` prefix",
      "user": {
        "login": "encukou",
        "id": 302922,
        "node_id": "MDQ6VXNlcjMwMjkyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/encukou",
        "html_url": "https://github.com/encukou",
        "followers_url": "https://api.github.com/users/encukou/followers",
        "following_url": "https://api.github.com/users/encukou/following{/other_user}",
        "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
        "organizations_url": "https://api.github.com/users/encukou/orgs",
        "repos_url": "https://api.github.com/users/encukou/repos",
        "events_url": "https://api.github.com/users/encukou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/encukou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4019060898,
          "node_id": "LA_kwDOBN0Z8c7vjgCi",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-C-API",
          "name": "topic-C-API",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-05-08T16:15:54Z",
      "updated_at": "2024-05-20T19:16:50Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "3.13 newly defines the following unprefixed functions/macros/types via `Python.h`. They should probably be hidden:\r\n\r\n- [x] `uop_get_target` in `Include/cpython/optimizer.h:67`\r\n- [x] `uop_get_exit_index` in `Include/cpython/optimizer.h:73`\r\n- [x] `uop_get_jump_target` in `Include/cpython/optimizer.h:79`\r\n- [x] `uop_get_error_target` in `Include/cpython/optimizer.h:85`\r\n- [x] `BLOOM_FILTER_WORDS` in `Include/cpython/optimizer.h`\r\n- [x] `UOP_FORMAT_TARGET` in `Include/cpython/optimizer.h`\r\n- [x] `UOP_FORMAT_EXIT` in `Include/cpython/optimizer.h`\r\n- [x] `UOP_FORMAT_JUMP` in `Include/cpython/optimizer.h`\r\n- [x] `UOP_FORMAT_UNUSED` in `Include/cpython/optimizer.h`\r\n- [x] `struct _bloom_filter` in `Include/cpython/optimizer.h:19`\r\n- [x] `struct _exit_data` in `Include/cpython/optimizer.h:91`\r\n- [x] `optimize_func` in `Include/cpython/optimizer.h:112`\r\n- [ ] `CO_NO_MONITORING_EVENTS` in `Include/cpython/code.h:192`\r\n\r\nSome more are generated by configure:\r\n\r\n- [ ] `HAVE_CLOCK_T` in `./pyconfig.h:138`\r\n- [ ] `HAVE_CLOSEFROM` in `./pyconfig.h:138`\r\n- [ ] `HAVE_GETGRENT` in `./pyconfig.h:138`\r\n- [ ] `HAVE_GRANTPT` in `./pyconfig.h:515`\r\n- [ ] `HAVE_POSIX_OPENPT` in `./pyconfig.h:849`\r\n- [ ] `HAVE_POSIX_SPAWN_FILE_ACTIONS_ADDCLOSEFROM_NP` in `./pyconfig.h:849`\r\n- [ ] `HAVE_PROCESS_VM_READV` in `./pyconfig.h:849`\r\n- [ ] `HAVE_PTSNAME` in `./pyconfig.h:957`\r\n- [ ] `HAVE_PTSNAME_R` in `./pyconfig.h:957`\r\n- [ ] `HAVE_SOCKLEN_T` in `./pyconfig.h:957`\r\n- [ ] `HAVE_SYS_TIMERFD_H` in `./pyconfig.h:1406`\r\n- [ ] `HAVE_TIMERFD_CREATE` in `./pyconfig.h:1406`\r\n- [ ] `HAVE_UNLOCKPT` in `./pyconfig.h:1406`\r\n- [ ] `HAVE___UINT128_T` in `./pyconfig.h:1582`\r\n- [ ] `WITH_MIMALLOC` in `./pyconfig.h:1867`\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-118825\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/118771/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/118771/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/118761",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/118761/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/118761/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/118761/events",
      "html_url": "https://github.com/python/cpython/issues/118761",
      "id": 2285570381,
      "node_id": "I_kwDOBN0Z8c6IOwlN",
      "number": 118761,
      "title": "Improve import time of various stdlib modules",
      "user": {
        "login": "layday",
        "id": 31134424,
        "node_id": "MDQ6VXNlcjMxMTM0NDI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/31134424?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/layday",
        "html_url": "https://github.com/layday",
        "followers_url": "https://api.github.com/users/layday/followers",
        "following_url": "https://api.github.com/users/layday/following{/other_user}",
        "gists_url": "https://api.github.com/users/layday/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/layday/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/layday/subscriptions",
        "organizations_url": "https://api.github.com/users/layday/orgs",
        "repos_url": "https://api.github.com/users/layday/repos",
        "events_url": "https://api.github.com/users/layday/events{/privacy}",
        "received_events_url": "https://api.github.com/users/layday/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4095883204,
          "node_id": "LA_kwDOBN0Z8c70IjfE",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-importlib",
          "name": "topic-importlib",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2024-05-08T13:13:05Z",
      "updated_at": "2024-11-18T20:04:27Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\n### Proposal:\r\n\r\nFollowing on from https://github.com/python/cpython/issues/109653, further improvements can be made to import times.\r\n\r\n### Links to previous discussion of this feature:\r\n\r\nhttps://discuss.python.org/t/deferred-computation-evalution-for-toplevels-imports-and-dataclasses/34173\r\n\r\n### For example:\r\n\r\n`importlib.metadata` is often used for tasks that need to happen at import, e.g. to enumerate/load entry point plug-ins, so it might be worth seeing if we can cut down its own import time a bit more.\r\n\r\n`importlib.metadata` imports `zipfile` at the top for a function that won't be called in the vast majority of cases.  It also imports `importlib.abc`, which in turn imports `importlib.resources`, to subclass an ABC with a single, non-abstract method - I assume redefining the method in `importlib.metadata` would be harmless.  Some other less frequently-used imports which are only accessed once or twice, such as `json`, could also be tucked away in their calling functions.\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-122725\n* gh-123520\n* gh-121424\n* gh-126979\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/118761/reactions",
        "total_count": 5,
        "+1": 5,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/118761/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/118577",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/118577/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/118577/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/118577/events",
      "html_url": "https://github.com/python/cpython/issues/118577",
      "id": 2279113456,
      "node_id": "I_kwDOBN0Z8c6H2ILw",
      "number": 118577,
      "title": "inspect.signature.BoundArguments \"POSITIONAL_OR_KEYWORD\" Arguments are always args",
      "user": {
        "login": "Steffenju95",
        "id": 38125140,
        "node_id": "MDQ6VXNlcjM4MTI1MTQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/38125140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Steffenju95",
        "html_url": "https://github.com/Steffenju95",
        "followers_url": "https://api.github.com/users/Steffenju95/followers",
        "following_url": "https://api.github.com/users/Steffenju95/following{/other_user}",
        "gists_url": "https://api.github.com/users/Steffenju95/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Steffenju95/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Steffenju95/subscriptions",
        "organizations_url": "https://api.github.com/users/Steffenju95/orgs",
        "repos_url": "https://api.github.com/users/Steffenju95/repos",
        "events_url": "https://api.github.com/users/Steffenju95/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Steffenju95/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 7,
      "created_at": "2024-05-04T16:58:09Z",
      "updated_at": "2024-09-12T12:04:02Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Feature Request\r\n\r\n### Feature description:\r\n\r\n```python\r\nfrom inspect import signature\r\ndef foo(bar, /, baz, *, bat):\r\n    ...\r\n\r\nba = signature(foo).bind('bla', baz='bli', bat='blub')\r\n```\r\n\r\nIn this case the argument `baz` get returned with `ba.args`, which returns `('bla', 'bli')`\r\nI expected it in `ba.kwargs`, but that returns only `{bat: 'blub'}`.\r\n \r\nBinding `baz` positional (`bind('bla', 'bli', bat='blub')`) works as expected.\r\nHere `ba.args` returns  `('bla', 'bli')` again and `ba.kwargs` `{bat: 'blub'}`.\r\n\r\nIs this behavior wanted like this?\r\nIn my perspective it makes more sense when the `BoundArguments` class returns `POSITIONAL_OR_KEYWORD` arguments as it got it (positional as `args` and keyword as `kwargs`) and not always as `args`. I think there happens a lost of Information .\r\n\r\nEdit: \r\nAt least it not cause errors, because in constellations, where it is necessary to be a keyword it is. So it also could argued against the information lost, that it is a build in feature of simplification of unnecessary keywords.\r\n\r\nSee the following example:\r\n```python\r\nfrom inspect import signature\r\ndef foo(bar, /, new='blub', baz='bla', *, bat='bli'):\r\n    ...\r\n\r\nba = signature(foo).bind('bla', baz='bli', bat='blub')\r\n```\r\n`ba.args` => `('bla',)`\r\n`ba.kwargs` => `{'baz': 'bli', 'bat': 'blub'}`\r\n\r\n### CPython versions tested on:\r\n\r\n3.12\r\n\r\n### Operating systems tested on:\r\n\r\nWindows\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-119936\n* gh-124004\n* gh-124005\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/118577/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/118577/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/118433",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/118433/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/118433/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/118433/events",
      "html_url": "https://github.com/python/cpython/issues/118433",
      "id": 2271746624,
      "node_id": "I_kwDOBN0Z8c6HaBpA",
      "number": 118433,
      "title": "`test_threading.test_interrupt_main_subthread`: release unlocked lock",
      "user": {
        "login": "colesbury",
        "id": 655866,
        "node_id": "MDQ6VXNlcjY1NTg2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/colesbury",
        "html_url": "https://github.com/colesbury",
        "followers_url": "https://api.github.com/users/colesbury/followers",
        "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
        "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
        "organizations_url": "https://api.github.com/users/colesbury/orgs",
        "repos_url": "https://api.github.com/users/colesbury/repos",
        "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
        "received_events_url": "https://api.github.com/users/colesbury/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 11,
      "created_at": "2024-04-30T15:02:54Z",
      "updated_at": "2024-06-15T14:24:21Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n```pytb\r\n======================================================================\r\nERROR: test_interrupt_main_subthread (test.test_threading.InterruptMainTests.test_interrupt_main_subthread)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/ec2-user/buildbot/buildarea/3.x.itamaro-macos-arm64-aws.macos-with-brew.refleak.nogil/build/Lib/threading.py\", line 659, in wait\r\n    signaled = self._cond.wait(timeout)\r\n               ~~~~~~~~~~~~~~~^^^^^^^^^\r\n  File \"/Users/ec2-user/buildbot/buildarea/3.x.itamaro-macos-arm64-aws.macos-with-brew.refleak.nogil/build/Lib/threading.py\", line 368, in wait\r\n    self._acquire_restore(saved_state)\r\n    ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^\r\n  File \"/Users/ec2-user/buildbot/buildarea/3.x.itamaro-macos-arm64-aws.macos-with-brew.refleak.nogil/build/Lib/threading.py\", line 315, in _acquire_restore\r\n    def _acquire_restore(self, x):\r\n    \r\nKeyboardInterrupt\r\nDuring handling of the above exception, another exception occurred:\r\nTraceback (most recent call last):\r\n  File \"/Users/ec2-user/buildbot/buildarea/3.x.itamaro-macos-arm64-aws.macos-with-brew.refleak.nogil/build/Lib/test/test_threading.py\", line 2035, in test_interrupt_main_subthread\r\n    t.start()\r\n    ~~~~~~~^^\r\n  File \"/Users/ec2-user/buildbot/buildarea/3.x.itamaro-macos-arm64-aws.macos-with-brew.refleak.nogil/build/Lib/threading.py\", line 977, in start\r\n    self._started.wait()  # Will set ident and native_id\r\n    ~~~~~~~~~~~~~~~~~~^^\r\n  File \"/Users/ec2-user/buildbot/buildarea/3.x.itamaro-macos-arm64-aws.macos-with-brew.refleak.nogil/build/Lib/threading.py\", line 656, in wait\r\n    with self._cond:\r\n    ...<3 lines>...\r\n        return signaled\r\n  File \"/Users/ec2-user/buildbot/buildarea/3.x.itamaro-macos-arm64-aws.macos-with-brew.refleak.nogil/build/Lib/threading.py\", line 307, in __exit__\r\n    return self._lock.__exit__(*args)\r\n           ~~~~~~~~~~~~~~~~~~~^^^^^^^\r\nRuntimeError: release unlocked lock\r\n----------------------------------------------------------------------\r\n```\r\n\r\nSeen on the ARM64 macOS nogil refleaks buildbot:\r\n\r\nhttps://buildbot.python.org/all/#/builders/1368/builds/865/steps/5/logs/stdio\r\n\r\nReported by encoku\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-118485\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/118433/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/118433/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/118416",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/118416/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/118416/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/118416/events",
      "html_url": "https://github.com/python/cpython/issues/118416",
      "id": 2270361791,
      "node_id": "I_kwDOBN0Z8c6HUvi_",
      "number": 118416,
      "title": "etree: Defining the default namespace prefix (`\"\"`) with register_namespace has issues",
      "user": {
        "login": "danifus",
        "id": 706362,
        "node_id": "MDQ6VXNlcjcwNjM2Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/706362?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danifus",
        "html_url": "https://github.com/danifus",
        "followers_url": "https://api.github.com/users/danifus/followers",
        "following_url": "https://api.github.com/users/danifus/following{/other_user}",
        "gists_url": "https://api.github.com/users/danifus/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/danifus/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/danifus/subscriptions",
        "organizations_url": "https://api.github.com/users/danifus/orgs",
        "repos_url": "https://api.github.com/users/danifus/repos",
        "events_url": "https://api.github.com/users/danifus/events{/privacy}",
        "received_events_url": "https://api.github.com/users/danifus/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018689026,
          "node_id": "LA_kwDOBN0Z8c7viFQC",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-XML",
          "name": "topic-XML",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-04-30T02:25:14Z",
      "updated_at": "2024-05-01T12:09:26Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nGranted the `register_namespace()` functionality should be used for 'well known namespace prefixes' but if the the default namespace prefix (`\"\"`) is registered, the following issues can occur:\n\nDuplicate default namespace attrs `xmlns=''`\n```python\nimport xml.etree.ElementTree as ET\nET.register_namespace(\"\", \"default\")\ne = ET.Element(\"{default}elem\")\nprint(ET.tostring(e, default_namespace=\"otherdefault\"))\n# b'<elem xmlns=\"otherdefault\" xmlns=\"default\" />'\n```\n\nIncorrect serialisation (the `noPrefixElem` should raise an error but now it looks like it is in the default namespace):\n```python\nimport xml.etree.ElementTree as ET\nET.register_namespace(\"\", \"default\")\ne = ET.Element(\"{default}elem\")\nET.SubElement(e, \"noPrefixElem\")\nprint(ET.tostring(e))\n# b'<elem xmlns=\"default\"><noPrefixElem /></elem>'\n```\n\nThe two approaches to address this that I can think of are:\n- Raise an error if the default namespace is passed to `register_namespace()`\n    - Lucky users that register `\"\"` but don't use the default prefix's URI anywhere or has every element qualified will have working code with no issues. This would cause their working code to break.\n- Handle it properly in `ElementTree._namespaces()` by setting the default_namespace var in that function from the global registry if the `default_namespace` argument is `None`\n    - Existing code that 'works' may raise errors about `ValueError: cannot use non-qualified names with default_namespace option`, but at least erroneous xml would no longer be emitted\n    - It may be possible to make it so code that was luckily unaffected still doesn't raise an error\n    - May result in #61290\n\nI'm happy to give the second option a try (with implementing any changes required for #61290) as I've also been looking into #57587 that also needs to handle potentially multiple definitions of the `default_namespace`. My current thinking is that if `default_namespace` is provided to `_namespaces()`, it takes precedence even if the default namespace is also defined in the global registry.\n\n\n### CPython versions tested on:\n\n3.12, CPython main branch\n\n### Operating systems tested on:\n\nmacOS\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-118417\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/118416/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/118416/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/118392",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/118392/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/118392/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/118392/events",
      "html_url": "https://github.com/python/cpython/issues/118392",
      "id": 2269225240,
      "node_id": "I_kwDOBN0Z8c6HQaEY",
      "number": 118392,
      "title": "Dramatic slowdown with random.random on free-threading build.",
      "user": {
        "login": "corona10",
        "id": 5110323,
        "node_id": "MDQ6VXNlcjUxMTAzMjM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5110323?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/corona10",
        "html_url": "https://github.com/corona10",
        "followers_url": "https://api.github.com/users/corona10/followers",
        "following_url": "https://api.github.com/users/corona10/following{/other_user}",
        "gists_url": "https://api.github.com/users/corona10/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/corona10/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/corona10/subscriptions",
        "organizations_url": "https://api.github.com/users/corona10/orgs",
        "repos_url": "https://api.github.com/users/corona10/repos",
        "events_url": "https://api.github.com/users/corona10/events{/privacy}",
        "received_events_url": "https://api.github.com/users/corona10/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2024-04-29T14:38:30Z",
      "updated_at": "2024-04-29T17:02:13Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "![out](https://github.com/python/cpython/assets/5110323/753ae6b0-fd71-4b8a-bac4-7f4aa6777a2e)\r\n\r\nThis slowdown was found with one of my favorite benchmarks, which is calculating the pi value with the Monte Carlo method.\r\n\r\n```python\r\nimport os\r\nimport random\r\nimport time\r\nfrom threading import Thread\r\n\r\ndef monte_carlo_pi_part(n: int, idx: int, results: list[int]) -> None:\r\n    count = 0\r\n    for i in range(n):\r\n        x = random.random()\r\n        y = random.random()\r\n\r\n        if x*x + y*y <= 1:\r\n            count += 1\r\n    results[idx] = count\r\n\r\n\r\nn = 10000\r\nthreads = []\r\nnum_threads = 100\r\nresults = [0] * num_threads\r\na = time.time()\r\nfor i in range(num_threads):\r\n    t = Thread(target=monte_carlo_pi_part, args=(n, i, results))\r\n    t.start()\r\n    threads.append(t)\r\n\r\nwhile threads:\r\n    t = threads.pop()\r\n    t.join()\r\n\r\nb = time.time()\r\nprint(sum(results) / (n * num_threads) * 4)\r\nprint(b-a)\r\n```\r\n\r\nAcquiring critical sections for random methods causes this slowdown.\r\nRemoving `@critical_section` from the method, which uses `genrand_uint32` and then updating `genrand_uint32` to use atomic operation makes the performance acceptable.\r\n\r\n| Build                                                  | Elapsed             | PI       |\r\n|--------------------------------------------------------|---------------------|----------|\r\n| Default (with specialization)                          | 0.16528010368347168 | 3.144508 |\r\n| Free-threading (with no specialization)                | 0.548654317855835   | 3.1421   |\r\n| Free-threading with my patch (with no  specialization) | 0.2606849670410156  | 3.141108 |\r\n\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-118393\r\n* gh-118396\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/118392/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/118392/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/118224",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/118224/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/118224/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/118224/events",
      "html_url": "https://github.com/python/cpython/issues/118224",
      "id": 2261222634,
      "node_id": "I_kwDOBN0Z8c6Gx4Tq",
      "number": 118224,
      "title": "Fallback md5 is used, when trying hard to only use OpenSSL",
      "user": {
        "login": "xnox",
        "id": 19779,
        "node_id": "MDQ6VXNlcjE5Nzc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/xnox",
        "html_url": "https://github.com/xnox",
        "followers_url": "https://api.github.com/users/xnox/followers",
        "following_url": "https://api.github.com/users/xnox/following{/other_user}",
        "gists_url": "https://api.github.com/users/xnox/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/xnox/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/xnox/subscriptions",
        "organizations_url": "https://api.github.com/users/xnox/orgs",
        "repos_url": "https://api.github.com/users/xnox/repos",
        "events_url": "https://api.github.com/users/xnox/events{/privacy}",
        "received_events_url": "https://api.github.com/users/xnox/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 24,
      "created_at": "2024-04-24T12:49:43Z",
      "updated_at": "2024-11-26T17:02:08Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\nWhen\r\n* OpenSSL is configured in FIPS mode\r\n* recommended config is used to only load \"base + fips\" providers\r\n* without the default provider\r\n* CPython is compiled with `--with-builtin-hashlib-hashes=blake2` to exclude fallback implementation of MD5\r\n\r\nupon importing hashlib fails to create MD5 construct.\r\n\r\n```python\r\n# python3.10 -c 'import hashlib'\r\nERROR:root:code for hash md5 was not found.\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.10/hashlib.py\", line 137, in __get_openssl_constructor\r\n    f(usedforsecurity=False)\r\nValueError: [digital envelope routines] unsupported\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.10/hashlib.py\", line 261, in <module>\r\n    globals()[__func_name] = __get_hash(__func_name)\r\n  File \"/usr/lib/python3.10/hashlib.py\", line 141, in __get_openssl_constructor\r\n    return __get_builtin_constructor(name)\r\n  File \"/usr/lib/python3.10/hashlib.py\", line 123, in __get_builtin_constructor\r\n    raise ValueError('unsupported hash type ' + name)\r\nValueError: unsupported hash type md5\r\n```\r\n\r\nReference implementation is upstream openssl 3.3.0, with enable-fips, fipsinstall completed and openssl.cnf set to\r\n```\r\n# cat /etc/ssl/openssl.cnf \r\nconfig_diagnostics = 1\r\nopenssl_conf = openssl_init\r\n\r\n.include /etc/ssl/fipsmodule.cnf\r\n\r\n[openssl_init]\r\nproviders = provider_sect\r\nalg_section = algorithm_sect\r\n\r\n[provider_sect]\r\nfips = fips_sect\r\nbase = base_sect\r\n\r\n[base_sect]\r\nactivate = 1\r\n\r\n[algorithm_sect]\r\ndefault_properties = fips=yes\r\n```\r\n\r\nIn essence, things work well only when \"default + fips\" providers are loaded, as then MD5 functions in OpenSSL are detected as available and are used at runtime and correctly get blocked.\r\n\r\nWhen only \"base + fips\" providers are loaded, ValueError is raised by OpenSSL constructor, and instead fallback implementation used from _md5 module if it was compiled in.\r\n\r\nIt seems like the above configuration was not tested, however it can be made to work. CPython should try to load  the \"default\" OpenSSL provider, to guarantee access to non-fips hashes.\r\n\r\n### Security concerns\r\n\r\nThis is FedRAMP/FIPS compliance by-pass. This issue may allow using md5 without specifying \"usedforsecurity=False\" on systems otherwise configured to be in FIPS-mode only. And is the primary reason why documentation mentions that certain distributors of python remove md5 module altogether.\r\n\r\n### CPython versions tested on:\r\n\r\n3.10, 3.11, 3.12\r\n\r\n### Operating systems tested on:\r\n\r\nLinux\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-118236\r\n* gh-118238\r\n* gh-118239\r\n* gh-118240\r\n* gh-118264\r\n* gh-127300\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": {
        "login": "xnox",
        "id": 19779,
        "node_id": "MDQ6VXNlcjE5Nzc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19779?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/xnox",
        "html_url": "https://github.com/xnox",
        "followers_url": "https://api.github.com/users/xnox/followers",
        "following_url": "https://api.github.com/users/xnox/following{/other_user}",
        "gists_url": "https://api.github.com/users/xnox/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/xnox/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/xnox/subscriptions",
        "organizations_url": "https://api.github.com/users/xnox/orgs",
        "repos_url": "https://api.github.com/users/xnox/repos",
        "events_url": "https://api.github.com/users/xnox/events{/privacy}",
        "received_events_url": "https://api.github.com/users/xnox/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/118224/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/118224/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/118138",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/118138/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/118138/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/118138/events",
      "html_url": "https://github.com/python/cpython/issues/118138",
      "id": 2255269246,
      "node_id": "I_kwDOBN0Z8c6GbK1-",
      "number": 118138,
      "title": "SSL session content bleeds into stdout with lots of threads",
      "user": {
        "login": "sterwill",
        "id": 1041512,
        "node_id": "MDQ6VXNlcjEwNDE1MTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1041512?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sterwill",
        "html_url": "https://github.com/sterwill",
        "followers_url": "https://api.github.com/users/sterwill/followers",
        "following_url": "https://api.github.com/users/sterwill/following{/other_user}",
        "gists_url": "https://api.github.com/users/sterwill/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sterwill/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sterwill/subscriptions",
        "organizations_url": "https://api.github.com/users/sterwill/orgs",
        "repos_url": "https://api.github.com/users/sterwill/repos",
        "events_url": "https://api.github.com/users/sterwill/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sterwill/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2024-04-21T21:20:34Z",
      "updated_at": "2024-05-17T02:01:41Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\nI've been trying to track down a rare segfault I'm seeing with Python 3 (several versions) in AWS Lambda and AWS CodeBuild.  It's been very hard to reproduce, but I have a few stack traces that show the crash happens in OpenSSL's certificate verification code below Python's `ssl` module.  While trying to isolate the problem in OpenSSL, I stumbled on a different issue that might be related, which I'm reporting here.\r\n\r\nThe program below uses the standard library to execute a lot of HTTPS requests concurrently with threads.  When run on my Linux desktop in gnome-terminal, the program doesn't exhibit any weird behavior.  It prints a bunch of `X` characters for each request it completes.  However, if I pipe its output through a program like `less` or `tee`, I see additional output--raw bytes from the SSL network session bleeding into stdout.  It feels like OpenSSL is writing into memory that Python's using to prepare strings or print to stdout due to a lack of synchronization or refcounting, but I don't know OpenSSL or Python internals well, so this is just a guess.\r\n\r\n`python3 test-program.py | tee /dev/null`  makes it happen every time on my workstation.  It never crashes, it just bleeds SSL contents into the output.\r\n\r\nIt happens on Ubuntu 22.04 x86_64 with Python 3.12 and OpenSSL 3.0.2, and on AWS CloudShell with Python 3.9.16 and OpenSSL 3.0.8.\r\n\r\nFeel free to run this program as often as you want with the URL I put in there (it's a small static web page on my personal site that won't mind a few thousand hits).\r\n\r\n```python\r\n#!/usr/bin/env python3\r\nimport http.client\r\nimport logging\r\nfrom concurrent.futures import ThreadPoolExecutor\r\nfrom ssl import create_default_context, Purpose\r\nfrom threading import Barrier\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\n# Point this at your system's CA cert store.\r\nCERT_FILE = '/tmp/cacert.pem'\r\n\r\n# The problem reproduces reliably with 100 threads for me, and\r\n# with more threads it happens even more times per execution.\r\n#\r\n# It also happens with a small number of threads (like 10) if\r\n# you make do_one_request process lots of requests instead of one.\r\nNUM_THREADS = 200\r\n\r\n# The barrier is helpful for getting all the requests lined up\r\n# to start together.  The problem still happens without a barrier\r\n# if you run lots of requests in each thread instead of one.\r\nb = Barrier(NUM_THREADS)\r\n\r\n\r\ndef do_one_request():\r\n    try:\r\n        # SSLContext is supposed to be thread-safe, but I allocate a new\r\n        # one each time to rule out concurrent access to it being the problem.\r\n        ssl_context = create_default_context(purpose=Purpose.SERVER_AUTH, cafile=CERT_FILE)\r\n        b.wait()\r\n\r\n        # Do a simple request and close the connection.  This URL is a small\r\n        # static page behind AWS CloudFront owned by the bug reporter, so\r\n        # don't feel bad about sending a few thousand requests there.  The\r\n        # bug seems to happen with any valid HTTPS request.\r\n        c = http.client.HTTPSConnection('tinfig.com', context=ssl_context)\r\n        c.request('GET', 'https://tinfig.com/')\r\n        _ = c.getresponse()\r\n        c.close()\r\n\r\n        # Print enough output so a pager or reading process might have to buffer.\r\n        print(' ' + ('X' * 200))\r\n    except Exception as e:\r\n        logger.exception(e)\r\n\r\n\r\nwith ThreadPoolExecutor(max_workers=NUM_THREADS) as executor:\r\n    for i in range(NUM_THREADS):\r\n        executor.submit(do_one_request)\r\n    executor.shutdown(wait=True)\r\n```\r\n\r\n\r\n### CPython versions tested on:\r\n\r\n3.9, 3.12\r\n\r\n### Operating systems tested on:\r\n\r\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-119107\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/118138/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/118138/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/118095",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/118095/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/118095/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/118095/events",
      "html_url": "https://github.com/python/cpython/issues/118095",
      "id": 2252568347,
      "node_id": "I_kwDOBN0Z8c6GQ3cb",
      "number": 118095,
      "title": "Increase the number of micro-ops that we can handle in tier 2",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-04-19T09:52:41Z",
      "updated_at": "2024-06-20T11:06:22Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-118106\n* gh-118180\n* gh-118279\n* gh-118286\n* gh-118322\n* gh-118380\n* gh-118420\n* gh-118459\n* gh-118484\n* gh-118575\n* gh-118578\n* gh-120793\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/118095/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/118095/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/118036",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/118036/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/118036/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/118036/events",
      "html_url": "https://github.com/python/cpython/issues/118036",
      "id": 2250325572,
      "node_id": "I_kwDOBN0Z8c6GIT5E",
      "number": 118036,
      "title": "Call stats are incorrect for tier 2 and maybe for tier 1 as well",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-04-18T10:26:54Z",
      "updated_at": "2024-04-18T17:05:04Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nThe call stats for tier 2 differ significantly from tier 1, but it is not clear that the tier 1 call stats are correct either.\n\nThe main purpose of the call stats is to track the fraction of Python frames that are created with and without calls to `PyEval_EvalDefault`. However, the stats don't make that clear and may be incorrect.\n\nCurrently the table looks like this:\n\n\u00a0 | Count | Ratio\n-- | -- | --\nCalls to PyEval_EvalDefault | 2,309,411,110 | 32.0%\nCalls to Python functions inlined | 4,908,275,087 | 68.0%\nCalls via PyEval_EvalFrame (total) | 2,309,411,110 | 32.0%\nCalls via PyEval_EvalFrame (vector) | 1,447,866,962 | 20.1%\nCalls via PyEval_EvalFrame (generator) | 861,544,148 | 11.9%\nCalls via PyEval_EvalFrame (legacy) | 4,418,464 | 0.1%\nCalls via PyEval_EvalFrame (function vectorcall) | 1,443,417,872 | 20.0%\nCalls via PyEval_EvalFrame (build class) | 30,626 | 0.0%\nCalls via PyEval_EvalFrame (slot) | 475,837,706 | 6.6%\nCalls via PyEval_EvalFrame (function ex) | 38,365,096 | 0.5%\nCalls via PyEval_EvalFrame (api) | 256,353,600 | 3.6%\nCalls via PyEval_EvalFrame (method) | 213,159,135 | 3.0%\nFrame objects created | 88,466,853 | 1.2%\nFrames pushed | 4,953,781,868 | 68.6%\n\nNote that the numbers don't add up.\nThe number of \"frames pushed\" is actually the total number of frames created. As it is function frames pushed, generator frames are not counted.\n\nFrame objects created should be a fraction of \"frames created\". All other numbers should be a fraction of \"frames pushed\"\n\n\n### CPython versions tested on:\n\nCPython main branch\n\n### Operating systems tested on:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-117933\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/118036/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/118036/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/117968",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/117968/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/117968/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/117968/events",
      "html_url": "https://github.com/python/cpython/issues/117968",
      "id": 2247667135,
      "node_id": "I_kwDOBN0Z8c6F-K2_",
      "number": 117968,
      "title": "Add tests for the PyEval_Run family of the C API",
      "user": {
        "login": "erlend-aasland",
        "id": 13780613,
        "node_id": "MDQ6VXNlcjEzNzgwNjEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erlend-aasland",
        "html_url": "https://github.com/erlend-aasland",
        "followers_url": "https://api.github.com/users/erlend-aasland/followers",
        "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
        "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
        "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
        "repos_url": "https://api.github.com/users/erlend-aasland/repos",
        "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 4018672955,
          "node_id": "LA_kwDOBN0Z8c7viBU7",
          "url": "https://api.github.com/repos/python/cpython/labels/extension-modules",
          "name": "extension-modules",
          "color": "09fc59",
          "default": false,
          "description": "C modules in the Modules dir"
        },
        {
          "id": 4019060898,
          "node_id": "LA_kwDOBN0Z8c7vjgCi",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-C-API",
          "name": "topic-C-API",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2024-04-17T08:12:14Z",
      "updated_at": "2024-04-25T08:24:29Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Functional tests for the `PyEval_Run` family of the C API lack tests. Discovered in the discussions of PR #116637.\r\n\r\n- [ ] `PyRun_AnyFile` (may be a macro)\r\n- [ ] `PyRun_AnyFileEx` (may be a macro)\r\n- [ ] `PyRun_AnyFileExFlags`\r\n- [ ] `PyRun_AnyFileFlags` (may be a macro)\r\n- [ ] `PyRun_File` (may be a macro)\r\n- [ ] `PyRun_FileEx` (may be a macro)\r\n- [ ] `PyRun_FileFlags` (may be a macro)\r\n- [ ] `PyRun_InteractiveLoop` (may be a macro)\r\n- [ ] `PyRun_InteractiveLoopFlags`\r\n- [ ] `PyRun_InteractiveOne` (may be a macro)\r\n- [ ] `PyRun_InteractiveOneFlags`\r\n- [ ] `PyRun_InteractiveOneObject`\r\n- [ ] `PyRun_SimpleFile` (may be a macro)\r\n- [ ] `PyRun_SimpleFileEx` (may be a macro)\r\n- [ ] `PyRun_SimpleFileExFlags`\r\n- [ ] `PyRun_SimpleString` (may be a macro)\r\n- [ ] `PyRun_SimpleStringFlags`\r\n- [ ] `PyRun_String` (may be a macro)\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-117982\n* gh-118011\n* gh-118230\n* gh-118266\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/117968/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/117968/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/117860",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/117860/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/117860/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/117860/events",
      "html_url": "https://github.com/python/cpython/issues/117860",
      "id": 2241801999,
      "node_id": "I_kwDOBN0Z8c6Fny8P",
      "number": 117860,
      "title": "unittest.mock.patch('path') neither forwards or backwards compatible starting from Python >=  v3.11",
      "user": {
        "login": "caronc",
        "id": 850374,
        "node_id": "MDQ6VXNlcjg1MDM3NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/850374?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/caronc",
        "html_url": "https://github.com/caronc",
        "followers_url": "https://api.github.com/users/caronc/followers",
        "following_url": "https://api.github.com/users/caronc/following{/other_user}",
        "gists_url": "https://api.github.com/users/caronc/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/caronc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/caronc/subscriptions",
        "organizations_url": "https://api.github.com/users/caronc/orgs",
        "repos_url": "https://api.github.com/users/caronc/repos",
        "events_url": "https://api.github.com/users/caronc/events{/privacy}",
        "received_events_url": "https://api.github.com/users/caronc/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4095883204,
          "node_id": "LA_kwDOBN0Z8c70IjfE",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-importlib",
          "name": "topic-importlib",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 13,
      "created_at": "2024-04-13T22:26:47Z",
      "updated_at": "2024-04-30T14:23:58Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\n## Issue\r\nIt appears that Python v3.11 and v3.12 are not respecting project functions and classes relative to the module root (`module.__init__`) when running tests and leveraging `unittest.mock`.\r\n\r\n## Proof of Failure\r\n:point_right: **I created a project that can be found [here](https://github.com/caronc/117860-cpython-issue/) which demonstrates the entire situation.**\r\n\r\nYou can review the import failures across the multiple versions of Python [here](https://github.com/caronc/117860-cpython-issue/actions/runs/8680427814/)\r\n\r\n## Expected Behavior \r\n\r\nThat the following would work in Python >= 3.11 as it does with all previous versions:\r\n```python\r\nimport sys\r\nfrom unittest import mock\r\n\r\n\r\n# This actually retrieves apprise.Apprise.Apprise().notify when using\r\n# earlier versions of py.test (hence apprise.__init__.__all__ is respected)\r\n@mock.patch(\"apprise.Apprise.notify\")\r\ndef test_py11_and_higher_fails(mock_notify):\r\n    \"\"\"\r\n    Only works with Python v3.10\r\n\r\n    Python v3.11+ produces (where ?? is swapped with 11, or 12 respectively to whichever version of Python is being tested):\r\n    AttributeError: <module 'apprise.Apprise' from '/usr/local/lib/python3.??/site-packages/apprise/Apprise.py'> does not have the attribute 'notify\r\n    \"\"\"\r\n    pass\r\n```\r\n\r\nFor it to work in newer versions of Python, the modules internal object placements are ignored. The following does however work (but incompatible with Python v3.10 and less):\r\n```python\r\n# ...\r\n@mock.patch(\"apprise.Apprise.Apprise.notify\")\r\ndef test_py10_and_lower_fails(mock_notify):\r\n     ...\r\n```\r\n\r\n## Apprise Background\r\nI'm not sure if this information is relavant; but perhaps the issue is centered around the module itself I'm testing against that makes use of the `__all__` setting.   Just incase; here are details that surround it:\r\n\r\nThe `__init__` residing in the Apprise Module identifies:\r\n```python\r\n# Get our class Apprise() from within the Apprise.py file\r\nfrom .Apprise import Apprise\r\n\r\n__all__ = [\r\n 'Apprise',  #...\r\n]\r\n```\r\n- [Here is the `apprise.__init__.py` demonstrating the above](https://github.com/caronc/apprise/blob/cced5ed7b559a8d1f0cddd6e940e60571949ad8a/apprise/__init__.py)\r\n\r\n## Regular Usage Works\r\nDespite testing failing, all versions of the Python continue to  respect `import` and correctly source the class/function refernced within the modules (inconsisent with `unittest`). The following works great:\r\n```python\r\n# pip install apprise\r\n\r\n# All versions of Python correctly respect module definitions here.\r\nfrom apprise import Apprise\r\n\r\n# Do our magic with it. \r\nobj = Apprise()\r\n```\r\n\r\n## After Thoughts\r\nAt first I thought there was an issue with `py.test` but since Pytest v8.1.1 works in Python v3.10 but not in Python v3.11 or v3.12, I decided to open the ticket here. But the issue seems to be related to `unittest.mock.patch` and centers around Python v3.11 and higher.\r\n\r\nPersonally, I feel I've exhausted all avenues with my own research, so hopefully you can help me share what could have been introduced. Any tips/help would be much appreciated. :pray: \r\n\r\n### CPython versions tested on:\r\n\r\n3.6, 3.7, 3.8, 3.9, 3.10, **3.11**, **3.12**\r\n- **bolded** are impacted by issue.\r\n\r\n### Operating systems tested on:\r\n\r\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-118176\n* gh-118432\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/117860/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/117860/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/117759",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/117759/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/117759/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/117759/events",
      "html_url": "https://github.com/python/cpython/issues/117759",
      "id": 2238039007,
      "node_id": "I_kwDOBN0Z8c6FZcPf",
      "number": 117759,
      "title": "Document the new incremental GC",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "markshannon",
          "id": 9448417,
          "node_id": "MDQ6VXNlcjk0NDg0MTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/markshannon",
          "html_url": "https://github.com/markshannon",
          "followers_url": "https://api.github.com/users/markshannon/followers",
          "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
          "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
          "organizations_url": "https://api.github.com/users/markshannon/orgs",
          "repos_url": "https://api.github.com/users/markshannon/repos",
          "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/markshannon/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2024-04-11T15:41:09Z",
      "updated_at": "2024-11-11T18:20:42Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Documentation\r\n\r\n- [x] Expand the \"what's new\" section a bit.\r\n- [x] Update Doc/library/gc.rst, speciifically how the thresholds work now.\r\n- [ ] Update the dev guide to explain how incremental collection works.\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-123266\n* gh-123395\n* gh-126695\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/117759/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/117759/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/117482",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/117482/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/117482/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/117482/events",
      "html_url": "https://github.com/python/cpython/issues/117482",
      "id": 2221334893,
      "node_id": "I_kwDOBN0Z8c6EZuFt",
      "number": 117482,
      "title": "Weird `int.__str__` behaviour inside sub-interpreters",
      "user": {
        "login": "mliezun",
        "id": 673921,
        "node_id": "MDQ6VXNlcjY3MzkyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/673921?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mliezun",
        "html_url": "https://github.com/mliezun",
        "followers_url": "https://api.github.com/users/mliezun/followers",
        "following_url": "https://api.github.com/users/mliezun/following{/other_user}",
        "gists_url": "https://api.github.com/users/mliezun/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mliezun/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mliezun/subscriptions",
        "organizations_url": "https://api.github.com/users/mliezun/orgs",
        "repos_url": "https://api.github.com/users/mliezun/repos",
        "events_url": "https://api.github.com/users/mliezun/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mliezun/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018993468,
          "node_id": "LA_kwDOBN0Z8c7vjPk8",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-subinterpreters",
          "name": "topic-subinterpreters",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 8,
      "created_at": "2024-04-02T19:50:54Z",
      "updated_at": "2024-09-09T14:07:20Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nHi Python maintainers!\n\nI noticed something weird when using subinterpreters, while converting an Enum to string I get an unexpected result. This occurs in Python 3.12 and 3.13.\n\nHere's an script to reproduce it:\n\n```python\nimport _xxsubinterpreters as interpreters\n\n\nscript = \"\"\"from enum import _simple_enum, IntEnum\n\n@_simple_enum(IntEnum)\nclass MyEnum:\n    DATA = 1\n    \nprint(str(MyEnum.DATA))\n\"\"\"\n\nexec(script)\n# Output: 1\n\ninterp_id = interpreters.create(isolated=False)\ninterpreters.run_string(interp_id, script)\n# Output: <MyEnum.DATA: 1>, Expected: 1\n```\n\nIn all python versions previous to 3.12 this prints \"1\" two times, on newer versions I get `<MyEnum.DATA: 1>` when running inside a subinterpreter. For some reason, the `__str__` function being used is different on new Python versions.\n\nI also noticed that the function pointed by `__str__` is different inside and outside the subinterpreter.\n\nOutside:\n\n```python\n...\nprint(MyEnum.DATA.__str__)\n# Output: <method-wrapper '__repr__' of MyEnum object at 0x7f9a09a2e910>\n```\n\nInside:\n\n```python\n...\nprint(MyEnum.DATA.__str__)\n# Output: <method-wrapper '__str__' of MyEnum object at 0x7f9a099a5e90>\n```\n\n> NOTE: I'm creating subinterpreters passing the `isolated=False` flag, which uses the [Legacy init config](https://github.com/python/cpython/blob/main/Include/cpython/pylifecycle.h#L66).\n> I first noticed the error on MacOS, then reproduced using Docker with various Python versions.\n\nI hope this is enough to get to the source of the issue.\n\nAppreciate all your work and effort on building Python, thank you!\n\n### CPython versions tested on:\n\n3.8, 3.9, 3.10, 3.11, 3.12, 3.13\n\n### Operating systems tested on:\n\nLinux, macOS\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-117660\n* gh-121602\n* gh-121630\n* gh-121632\n* gh-121636\n* gh-121862\n* gh-121882\n* gh-121932\n* gh-122192\n* gh-122195\n* gh-122197\n* gh-122241\n* gh-122248\n* gh-122249\n* gh-122250\n* gh-122865\n* gh-122866\n* gh-122867\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/117482/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/117482/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/117344",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/117344/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/117344/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/117344/events",
      "html_url": "https://github.com/python/cpython/issues/117344",
      "id": 2214091702,
      "node_id": "I_kwDOBN0Z8c6D-Fu2",
      "number": 117344,
      "title": "Worker management race conditions in `ThreadPoolExecutor` and `ProcessPoolExecutor`",
      "user": {
        "login": "colesbury",
        "id": 655866,
        "node_id": "MDQ6VXNlcjY1NTg2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/colesbury",
        "html_url": "https://github.com/colesbury",
        "followers_url": "https://api.github.com/users/colesbury/followers",
        "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
        "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
        "organizations_url": "https://api.github.com/users/colesbury/orgs",
        "repos_url": "https://api.github.com/users/colesbury/repos",
        "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
        "received_events_url": "https://api.github.com/users/colesbury/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-03-28T20:34:55Z",
      "updated_at": "2024-03-28T23:12:56Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "We have tests that `ThreadPoolExecutor` and `ProcessPoolExecutor` reuse workers. The test wait for the previous task to complete before submitting the next task.\r\n\r\nhttps://github.com/python/cpython/blob/29829b58a8328a7c2ccacaa74c1d7d120a5e5ca5/Lib/test/test_concurrent_futures/test_thread_pool.py#L44-L50\r\n\r\nThe problem is that the tasks are potentially completed before the thread or process is marked as idle. **Calling `Future.result()` doesn't guarantee that there is an idle worker.** This happens much more frequently with the GIL disabled, but it can happen with the GIL enabled too if you have an unlucky GIL switch.\r\n\r\nhttps://github.com/python/cpython/blob/29829b58a8328a7c2ccacaa74c1d7d120a5e5ca5/Lib/concurrent/futures/thread.py#L81-L95\r\n\r\nFor example, you can reliably trigger the problem with the GIL enabled by adding a short `time.sleep(0.01)` immediately after the `work_item.run()` call in:\r\nhttps://github.com/python/cpython/blob/29829b58a8328a7c2ccacaa74c1d7d120a5e5ca5/Lib/concurrent/futures/thread.py#L92\r\n\r\nIt's not clear to me if this is just a problem with the unit tests or an actual bug with the executor implementation.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-117355\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/117344/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/117344/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/117224",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/117224/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/117224/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/117224/events",
      "html_url": "https://github.com/python/cpython/issues/117224",
      "id": 2206338335,
      "node_id": "I_kwDOBN0Z8c6Dgg0f",
      "number": 117224,
      "title": "Move large uop bodies into functions.",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "mdboom",
        "id": 38294,
        "node_id": "MDQ6VXNlcjM4Mjk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/38294?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mdboom",
        "html_url": "https://github.com/mdboom",
        "followers_url": "https://api.github.com/users/mdboom/followers",
        "following_url": "https://api.github.com/users/mdboom/following{/other_user}",
        "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions",
        "organizations_url": "https://api.github.com/users/mdboom/orgs",
        "repos_url": "https://api.github.com/users/mdboom/repos",
        "events_url": "https://api.github.com/users/mdboom/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mdboom/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "mdboom",
          "id": 38294,
          "node_id": "MDQ6VXNlcjM4Mjk0",
          "avatar_url": "https://avatars.githubusercontent.com/u/38294?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/mdboom",
          "html_url": "https://github.com/mdboom",
          "followers_url": "https://api.github.com/users/mdboom/followers",
          "following_url": "https://api.github.com/users/mdboom/following{/other_user}",
          "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions",
          "organizations_url": "https://api.github.com/users/mdboom/orgs",
          "repos_url": "https://api.github.com/users/mdboom/repos",
          "events_url": "https://api.github.com/users/mdboom/events{/privacy}",
          "received_events_url": "https://api.github.com/users/mdboom/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2024-03-25T17:47:58Z",
      "updated_at": "2024-10-01T05:35:32Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Many of the micro-op bodies are quite large, and are likely to bloat jitted code, harming performance.\r\n\r\nWe should move these larger bodies into helper functions in the tier2 code generator.\r\n\r\nFor example, the generator code for `_INIT_CALL_PY_EXACT_ARGS` looks like this:\r\n```C\r\ncase _INIT_CALL_PY_EXACT_ARGS: {\r\n    PyObject **args;\r\n    PyObject *self_or_null;\r\n    PyObject *callable;\r\n    _PyInterpreterFrame *new_frame;\r\n    oparg = CURRENT_OPARG();\r\n    args = &stack_pointer[-oparg];\r\n    self_or_null = stack_pointer[-1 - oparg];\r\n    callable = stack_pointer[-2 - oparg];\r\n    int has_self = (self_or_null != NULL);\r\n    STAT_INC(CALL, hit);\r\n    PyFunctionObject *func = (PyFunctionObject *)callable;\r\n    new_frame = _PyFrame_PushUnchecked(tstate, func, oparg + has_self);\r\n    PyObject **first_non_self_local = new_frame->localsplus + has_self;\r\n    new_frame->localsplus[0] = self_or_null;\r\n    for (int i = 0; i < oparg; i++) {\r\n        first_non_self_local[i] = args[i];\r\n    }\r\n    stack_pointer[-2 - oparg] = (PyObject *)new_frame;\r\n    stack_pointer += -1 - oparg;\r\n    break;\r\n}\r\n```\r\nBy moving the bulk of this into a helper function, we can generate the much shorter:\r\n```C\r\ncase _INIT_CALL_PY_EXACT_ARGS: {\r\n    stack_pointer = _INIT_CALL_PY_EXACT_ARGS_func(tstate, frame, stack_pointer, oparg);\r\n    break;\r\n}\r\n```\r\nwith the helper function:\r\n```C\r\nPyObject ** _INIT_CALL_PY_EXACT_ARGS_func(PyThreadState *tstate, _PyInterpreterFrame *frame, PyObject ** stack_pointer, int oparg) {\r\n    PyObject **args;\r\n    PyObject *self_or_null;\r\n    PyObject *callable;\r\n    _PyInterpreterFrame *new_frame;\r\n    args = &stack_pointer[-oparg];\r\n    self_or_null = stack_pointer[-1 - oparg];\r\n    callable = stack_pointer[-2 - oparg];\r\n    int has_self = (self_or_null != NULL);\r\n    STAT_INC(CALL, hit);\r\n    PyFunctionObject *func = (PyFunctionObject *)callable;\r\n    new_frame = _PyFrame_PushUnchecked(tstate, func, oparg + has_self);\r\n    PyObject **first_non_self_local = new_frame->localsplus + has_self;\r\n    new_frame->localsplus[0] = self_or_null;\r\n    for (int i = 0; i < oparg; i++) {\r\n        first_non_self_local[i] = args[i];\r\n    }\r\n    stack_pointer[-2 - oparg] = (PyObject *)new_frame;\r\n    stack_pointer += -1 - oparg;\r\n    return stack_pointer;\r\n}\r\n```\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-117380\n* gh-117570\n* gh-122601\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/117224/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/117224/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/117121",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/117121/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/117121/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/117121/events",
      "html_url": "https://github.com/python/cpython/issues/117121",
      "id": 2200175418,
      "node_id": "I_kwDOBN0Z8c6DJAM6",
      "number": 117121,
      "title": "pystats: Improve with JIT builds",
      "user": {
        "login": "mdboom",
        "id": 38294,
        "node_id": "MDQ6VXNlcjM4Mjk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/38294?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mdboom",
        "html_url": "https://github.com/mdboom",
        "followers_url": "https://api.github.com/users/mdboom/followers",
        "following_url": "https://api.github.com/users/mdboom/following{/other_user}",
        "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions",
        "organizations_url": "https://api.github.com/users/mdboom/orgs",
        "repos_url": "https://api.github.com/users/mdboom/repos",
        "events_url": "https://api.github.com/users/mdboom/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mdboom/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 7018075156,
          "node_id": "LA_kwDOBN0Z8c8AAAABok9UFA",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-JIT",
          "name": "topic-JIT",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "mdboom",
        "id": 38294,
        "node_id": "MDQ6VXNlcjM4Mjk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/38294?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mdboom",
        "html_url": "https://github.com/mdboom",
        "followers_url": "https://api.github.com/users/mdboom/followers",
        "following_url": "https://api.github.com/users/mdboom/following{/other_user}",
        "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions",
        "organizations_url": "https://api.github.com/users/mdboom/orgs",
        "repos_url": "https://api.github.com/users/mdboom/repos",
        "events_url": "https://api.github.com/users/mdboom/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mdboom/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "mdboom",
          "id": 38294,
          "node_id": "MDQ6VXNlcjM4Mjk0",
          "avatar_url": "https://avatars.githubusercontent.com/u/38294?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/mdboom",
          "html_url": "https://github.com/mdboom",
          "followers_url": "https://api.github.com/users/mdboom/followers",
          "following_url": "https://api.github.com/users/mdboom/following{/other_user}",
          "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions",
          "organizations_url": "https://api.github.com/users/mdboom/orgs",
          "repos_url": "https://api.github.com/users/mdboom/repos",
          "events_url": "https://api.github.com/users/mdboom/events{/privacy}",
          "received_events_url": "https://api.github.com/users/mdboom/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2024-03-21T13:18:03Z",
      "updated_at": "2024-05-31T19:56:40Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\nAt the moment, not all pystats work for a JIT build.  This is mostly because certain stat collections exist in the Tier 2 interpreter loop, not in the bytecode instructions themselves.  The reason for having parity in the stats is not so much that we expect the numbers to be different vs. a Tier 2 run, but because it would be nice to add some JIT-specific stats (e.g. a code size histogram) and the only way to do that now would be to collect stats twice and combine them.\n\nA list of what's missing:\n\n- traces executed\n- uops executed\n- trace run length histogram\n- uop execution stats\n\nI'm volunteering to do the work, but maybe @brandtbucher could confirm this makes sense?\n\n### Has this already been discussed elsewhere?\n\nNo response given\n\n### Links to previous discussion of this feature:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-117346\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "mdboom",
        "id": 38294,
        "node_id": "MDQ6VXNlcjM4Mjk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/38294?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mdboom",
        "html_url": "https://github.com/mdboom",
        "followers_url": "https://api.github.com/users/mdboom/followers",
        "following_url": "https://api.github.com/users/mdboom/following{/other_user}",
        "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions",
        "organizations_url": "https://api.github.com/users/mdboom/orgs",
        "repos_url": "https://api.github.com/users/mdboom/repos",
        "events_url": "https://api.github.com/users/mdboom/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mdboom/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/117121/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/117121/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/117086",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/117086/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/117086/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/117086/events",
      "html_url": "https://github.com/python/cpython/issues/117086",
      "id": 2197910838,
      "node_id": "I_kwDOBN0Z8c6DAXU2",
      "number": 117086,
      "title": "Function version numbers do not obey necessary invariants",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "markshannon",
          "id": 9448417,
          "node_id": "MDQ6VXNlcjk0NDg0MTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/markshannon",
          "html_url": "https://github.com/markshannon",
          "followers_url": "https://api.github.com/users/markshannon/followers",
          "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
          "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
          "organizations_url": "https://api.github.com/users/markshannon/orgs",
          "repos_url": "https://api.github.com/users/markshannon/repos",
          "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/markshannon/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2024-03-20T16:00:02Z",
      "updated_at": "2024-03-21T14:33:13Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nIt is a necessary invariant of version numbers that an equal version number means that the objects are equivalent. That is, all operations on the two objects will give the same result.\n\nThis works for class and dict version numbers as no version number is shared between different objects and any change to the object results in a new version number.\n\nHowever, we share version numbers for functions and that causes problems. https://github.com/python/cpython/issues/117051\nWe have good reasons for sharing version numbers. It allows much better optimization of closures. https://github.com/python/cpython/pull/98525\n\nWant we want is a scheme that allows us to share version numbers, but preserves the invariant that the same function number means a function that is functionally identical.\n\nAssuming that the function version gets modified whenever the function version is modified, if we want to share versions we only need to ensure the invariant when creating a function.\nWe do not need to ensure that all functions that are functionally identical share a version, just enough to optimize most common cases.\n\nA function consists of the following fields that we care about when optimizing:\n* Code object\n* Globals\n* Builtins\n* Defaults (only the number, not the actual values)\n\nIt is `MAKE_FUNCTION` that is responsible for setting the version number., which we get only from the code object, meaning that if the globals, builtins or defaults differ from any other function with the same code object, the version number is invalid.\n\n\n\n\n\n\n\n\n\n\n\n\n\n### CPython versions tested on:\n\n3.13, CPython main branch\n\n### Operating systems tested on:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-117093\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/117086/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/117086/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/116968",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/116968/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/116968/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/116968/events",
      "html_url": "https://github.com/python/cpython/issues/116968",
      "id": 2192962065,
      "node_id": "I_kwDOBN0Z8c6CtfIR",
      "number": 116968,
      "title": "Side exit temperature requires exponential backoff",
      "user": {
        "login": "gvanrossum",
        "id": 2894642,
        "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gvanrossum",
        "html_url": "https://github.com/gvanrossum",
        "followers_url": "https://api.github.com/users/gvanrossum/followers",
        "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
        "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
        "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
        "repos_url": "https://api.github.com/users/gvanrossum/repos",
        "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 15,
      "created_at": "2024-03-18T18:27:54Z",
      "updated_at": "2024-09-24T20:37:30Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "The `temperature` field used in `_PyExitData` (aka `struct _exit_data`) currently is a simple counter. When it reaches 15 we try to optimize the side exit's target; when this optimization fails we reset the counter to -16, meaning that after 32 times taking this side exit we will retry again.\r\n\r\nThis is fine if something has changed that makes the side exit's target eventually optimizable; however, in cases where it deterministically fails (e.g.: when it encounters an unsupported opcode early on in the trace, or [when the abstract interpreter gets a miss from the function version cache](https://github.com/faster-cpython/ideas/issues/664#issuecomment-1998586314)), we can waste a lot of time attempting to optimize the same piece of code over and over.\r\n\r\nWe should implement exponential backoff here just like we do for the backedge threshold.\r\n\r\nPS: There's another threshold, `resume_threshold`, that doesn't appear to be used at all (though there is a failr bit of infrastructure around it that obscure this fact). My guess is that we intended to use this one for the side exit threshold but we changed the direction of the counter because of the idea to name it \"temperature\", and then introduced a new threshold variable for that.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-117144\n* gh-124469\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/116968/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/116968/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/116946",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/116946/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/116946/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/116946/events",
      "html_url": "https://github.com/python/cpython/issues/116946",
      "id": 2191475400,
      "node_id": "I_kwDOBN0Z8c6Cn0LI",
      "number": 116946,
      "title": "Heap types implemented in C must have Py_TPFLAGS_HAVE_GC and implement tp_traverse",
      "user": {
        "login": "vstinner",
        "id": 194129,
        "node_id": "MDQ6VXNlcjE5NDEyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vstinner",
        "html_url": "https://github.com/vstinner",
        "followers_url": "https://api.github.com/users/vstinner/followers",
        "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
        "organizations_url": "https://api.github.com/users/vstinner/orgs",
        "repos_url": "https://api.github.com/users/vstinner/repos",
        "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vstinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018672955,
          "node_id": "LA_kwDOBN0Z8c7viBU7",
          "url": "https://api.github.com/repos/python/cpython/labels/extension-modules",
          "name": "extension-modules",
          "color": "09fc59",
          "default": false,
          "description": "C modules in the Modules dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-03-18T07:56:56Z",
      "updated_at": "2024-12-26T11:13:41Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "If a heap type does not have Py_TPFLAGS_HAVE_GC or doesn't not implement tp_traverse, the garbage collector may fail to collect the type *and* most of its instances at Python exit. The problem is worse when sub-interpreters are involved: if a sub-interpreter exits and does not clear all of its memory, the other interpreters will continue running with these leaks.\r\n\r\nSee issue gh-87138 for the rationale.\r\n\r\nI wrote an article on the lock type which had this bug and caused a memory leak: https://vstinner.github.io/subinterpreter-leaks.html\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-116947\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/116946/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/116946/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/116874",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/116874/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/116874/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/116874/events",
      "html_url": "https://github.com/python/cpython/issues/116874",
      "id": 2189153356,
      "node_id": "I_kwDOBN0Z8c6Ce9RM",
      "number": 116874,
      "title": "Fix building CPython on ppc64le",
      "user": {
        "login": "georgthegreat",
        "id": 1121500,
        "node_id": "MDQ6VXNlcjExMjE1MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1121500?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/georgthegreat",
        "html_url": "https://github.com/georgthegreat",
        "followers_url": "https://api.github.com/users/georgthegreat/followers",
        "following_url": "https://api.github.com/users/georgthegreat/following{/other_user}",
        "gists_url": "https://api.github.com/users/georgthegreat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/georgthegreat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/georgthegreat/subscriptions",
        "organizations_url": "https://api.github.com/users/georgthegreat/orgs",
        "repos_url": "https://api.github.com/users/georgthegreat/repos",
        "events_url": "https://api.github.com/users/georgthegreat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/georgthegreat/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-03-15T17:33:48Z",
      "updated_at": "2024-03-17T08:11:18Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\n```\nIn file included from python3/Modules/_decimal/libmpdec/basearith.c:34:\nIn file included from python3/Modules/_decimal/libmpdec/basearith.h:34:\npython3/Modules/_decimal/libmpdec/typearith.h:612:4: error: \"adapt mul_size_t() and mulmod_size_t()\"\n  #error \"adapt mul_size_t() and mulmod_size_t()\"\n   ^\n2 errors generated.\n```\n\n### CPython versions tested on:\n\n3.12\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-116875\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/116874/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/116874/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/116809",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/116809/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/116809/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/116809/events",
      "html_url": "https://github.com/python/cpython/issues/116809",
      "id": 2186392674,
      "node_id": "I_kwDOBN0Z8c6CUbRi",
      "number": 116809,
      "title": "_PyErr_ChainExceptions1 no longer avallable to extension modules in Python 3.13 alpha headers",
      "user": {
        "login": "rogerbinns",
        "id": 553885,
        "node_id": "MDQ6VXNlcjU1Mzg4NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/553885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rogerbinns",
        "html_url": "https://github.com/rogerbinns",
        "followers_url": "https://api.github.com/users/rogerbinns/followers",
        "following_url": "https://api.github.com/users/rogerbinns/following{/other_user}",
        "gists_url": "https://api.github.com/users/rogerbinns/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rogerbinns/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rogerbinns/subscriptions",
        "organizations_url": "https://api.github.com/users/rogerbinns/orgs",
        "repos_url": "https://api.github.com/users/rogerbinns/repos",
        "events_url": "https://api.github.com/users/rogerbinns/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rogerbinns/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4019060898,
          "node_id": "LA_kwDOBN0Z8c7vjgCi",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-C-API",
          "name": "topic-C-API",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 21,
      "created_at": "2024-03-14T13:29:56Z",
      "updated_at": "2024-03-18T15:33:30Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nThe API `_PyErr_ChainExceptions1` has been removed from public headers as part of [this change in Python 3.13 alpha](https://github.com/python/cpython/issues/106320).  It is the only C API available to chain exceptions replacing  `_PyErr_ChainExceptions`.    That change was publicly documented in the [3.12 whatsnew](https://docs.python.org/3/whatsnew/3.12.html#:~:text=Add%20_PyErr_ChainExceptions1%2C%20which%20takes%20an%20exception%20instance).\n\nIn my extemsion module I use `_PyErr_ChainExceptions` for exception chaining for Python <= 3.11 from [PEP 490](https://peps.python.org/pep-0490/) and `_PyErr_ChainExceptions1`for 3.12+.\n\nPlease provide an approved way for C extensions to continue to chain exceptions.  The function is still present and I can duplicate the prototype for all to continue working, but that is not a desirable solution.\n\n\n### CPython versions tested on:\n\n3.13\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-116900\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/116809/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/116809/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/116750",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/116750/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/116750/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/116750/events",
      "html_url": "https://github.com/python/cpython/issues/116750",
      "id": 2184643728,
      "node_id": "I_kwDOBN0Z8c6CNwSQ",
      "number": 116750,
      "title": "Provide a mechanism to \"unload\" the monitoring tool",
      "user": {
        "login": "gaogaotiantian",
        "id": 13121107,
        "node_id": "MDQ6VXNlcjEzMTIxMTA3",
        "avatar_url": "https://avatars.githubusercontent.com/u/13121107?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaogaotiantian",
        "html_url": "https://github.com/gaogaotiantian",
        "followers_url": "https://api.github.com/users/gaogaotiantian/followers",
        "following_url": "https://api.github.com/users/gaogaotiantian/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaogaotiantian/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaogaotiantian/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaogaotiantian/subscriptions",
        "organizations_url": "https://api.github.com/users/gaogaotiantian/orgs",
        "repos_url": "https://api.github.com/users/gaogaotiantian/repos",
        "events_url": "https://api.github.com/users/gaogaotiantian/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaogaotiantian/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-03-13T18:28:09Z",
      "updated_at": "2024-09-26T00:33:38Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\nAs mentioned in #111963, we don't have a way to fully unload the monitoring tool and this is a bad experience for users. Debuggers have to track code objects of their breakpoints if they want to do it with local events. I think we should have a `sys.monitoring.clear_tool_id(tool_id: int)` to clear up all the residues for the tool without giving up the `tool_id`. Also `sys.monitoring.free_tool_id()` should run `clear_tool_id` first - it's just safer and makes more sense.\n\nGlobal events should be trivial, by `set_events(tool_id, 0)` all the global events should be disabled and if the next tool claims the id, it needs to explicitly set them again anyway. Callbacks are easy as they are just in an array.\n\nThe hard part is local events, as they are instrumented lazily. Currently we don't have a way to inform the code object that a tool is unloaded(cleared) and we don't track all the instrumented code objects.\n\nI think the way to go is to version the tool and the local monitors. Each time a tool is registered (cleared), a new version number is assigned to the tool (same source of the code object, global_version basically). The increment of the version number will force all the code object to check their instrumentation, and in `update_instrumentation_data`, we can check whether the local monitors are in sync with the tools. Remove the tool if they are not.\n\nImpacts:\n* For each `_Py_LocalMonitors`, another `uint32_t versions[PY_MONITORING_TOOL_IDS]` to keep the version of the tools\n* Extra check in `update_instrumentation_data`\n* No run-time impact on programs without instrumentation\n\n### Has this already been discussed elsewhere?\n\nNo response given\n\n### Links to previous discussion of this feature:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124568\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/116750/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/116750/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/116742",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/116742/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/116742/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/116742/events",
      "html_url": "https://github.com/python/cpython/issues/116742",
      "id": 2184591807,
      "node_id": "I_kwDOBN0Z8c6CNjm_",
      "number": 116742,
      "title": "test_subprocess: test_check_output_timeout flaky",
      "user": {
        "login": "colesbury",
        "id": 655866,
        "node_id": "MDQ6VXNlcjY1NTg2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/colesbury",
        "html_url": "https://github.com/colesbury",
        "followers_url": "https://api.github.com/users/colesbury/followers",
        "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
        "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
        "organizations_url": "https://api.github.com/users/colesbury/orgs",
        "repos_url": "https://api.github.com/users/colesbury/repos",
        "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
        "received_events_url": "https://api.github.com/users/colesbury/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 7176868651,
          "node_id": "LA_kwDOBN0Z8c8AAAABq8ZTKw",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-subprocess",
          "name": "topic-subprocess",
          "color": "0052cc",
          "default": false,
          "description": "Subprocess issues."
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 7,
      "created_at": "2024-03-13T17:58:20Z",
      "updated_at": "2024-07-08T09:02:26Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\nThe `test_check_output_timeout` test sometimes times out before the \"BDFL\" string is printed to stdout.\r\n\r\nhttps://github.com/python/cpython/actions/runs/8261299493/job/22598342550\r\n\r\n```pytb\r\n ======================================================================\r\nFAIL: test_check_output_timeout (test.test_subprocess.ProcessTestCaseNoPoll.test_check_output_timeout)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/runner/work/cpython/cpython/Lib/test/test_subprocess.py\", line 286, in test_check_output_timeout\r\n    self.assertEqual(c.exception.output, b'BDFL')\r\n    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nAssertionError: None != b'BDFL'\r\n\r\n======================================================================\r\nFAIL: test_check_output_timeout (test.test_subprocess.RunFuncTestCase.test_check_output_timeout)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/runner/work/cpython/cpython/Lib/test/test_subprocess.py\", line 1694, in test_check_output_timeout\r\n    self.assertEqual(c.exception.output, b'BDFL')\r\n    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nAssertionError: None != b'BDFL'\r\n\r\n----------------------------------------------------------------------\r\n```\r\n\r\nreported by @sobolevn in https://github.com/python/cpython/issues/116682#issuecomment-1993869047\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-116917\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/116742/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/116742/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/116510",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/116510/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/116510/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/116510/events",
      "html_url": "https://github.com/python/cpython/issues/116510",
      "id": 2176624617,
      "node_id": "I_kwDOBN0Z8c6BvKfp",
      "number": 116510,
      "title": "CPython 3.12 embedded in WeeChat causes segfault on subsequent calls to Py_EndInterpreter",
      "user": {
        "login": "trygveaa",
        "id": 601966,
        "node_id": "MDQ6VXNlcjYwMTk2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/601966?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trygveaa",
        "html_url": "https://github.com/trygveaa",
        "followers_url": "https://api.github.com/users/trygveaa/followers",
        "following_url": "https://api.github.com/users/trygveaa/following{/other_user}",
        "gists_url": "https://api.github.com/users/trygveaa/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/trygveaa/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/trygveaa/subscriptions",
        "organizations_url": "https://api.github.com/users/trygveaa/orgs",
        "repos_url": "https://api.github.com/users/trygveaa/repos",
        "events_url": "https://api.github.com/users/trygveaa/events{/privacy}",
        "received_events_url": "https://api.github.com/users/trygveaa/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018848914,
          "node_id": "LA_kwDOBN0Z8c7visSS",
          "url": "https://api.github.com/repos/python/cpython/labels/type-crash",
          "name": "type-crash",
          "color": "b60205",
          "default": false,
          "description": "A hard crash of the interpreter, possibly with a core dump"
        },
        {
          "id": 4018993468,
          "node_id": "LA_kwDOBN0Z8c7vjPk8",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-subinterpreters",
          "name": "topic-subinterpreters",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 16,
      "created_at": "2024-03-08T19:12:21Z",
      "updated_at": "2024-11-12T12:46:38Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Crash report\r\n\r\n### What happened?\r\n\r\nWeeChat embeds CPython in order to run Python scripts inside WeeChat. It can load multiple scripts and they each get their own interpreter. When a script is loaded `Py_NewInterpreter` is called, and when it's unloaded `Py_EndInterpreter` is called.\r\n\r\nWith CPython 3.12 loading two scripts and then unloading them in the same order causes a segmentation fault. Interestingly, the segmentation fault doesn't happen if the script that was loaded last is unloaded first.\r\n\r\nI bisected this and found it was introduced in commit de64e7561680fdc5358001e9488091e75d4174a3. I also noticed that the crash doesn't occur in the main branch, and did another bisect and found it was fixed in commit 7a7bce5a0ab249407e866a1e955d21fa2b0c8506.\r\n\r\nThis issue seems similar to the one reported in #115649 which is also introduced by the same commit, but that one still crashes on the main branch (commit 735fc2cbbcf875c359021b5b2af7f4c29f4cf66d).\r\n\r\nI haven't been able to reproduce this outside of WeeChat unfortunately, but here is a backtrace from the crash with WeeChat, with commit de64e7561680fdc5358001e9488091e75d4174a3 of CPython and commit ec56a1103f47b15a641ff93528fd6f50025dd524 of WeeChat.\r\n\r\n```\r\nProgram terminated with signal SIGSEGV, Segmentation fault.\r\n#0  0x000074b5e5fd2700 in ?? ()\r\n[Current thread is 1 (Thread 0x74b5e7bec940 (LWP 1881931))]\r\n(gdb) bt\r\n#0  0x000074b5e5fd2700 in ?? ()\r\n#1  <signal handler called>\r\n#2  0x000074b5e64f9ddd in _PyGCHead_SET_PREV (prev=<optimized out>, gc=<optimized out>) at ./Include/internal/pycore_gc.h:74\r\n#3  _PyObject_GC_UNTRACK (op=0x74b5dfb746d0) at ./Include/internal/pycore_object.h:228\r\n#4  PyObject_GC_UnTrack (op_raw=op_raw@entry=0x74b5dfb746d0) at Modules/gcmodule.c:2241\r\n#5  0x000074b5e63c430c in module_dealloc (m=0x74b5dfb746d0) at Objects/moduleobject.c:672\r\n#6  0x000074b5e63c393d in Py_DECREF (op=<optimized out>) at ./Include/object.h:681\r\n#7  Py_XDECREF (op=<optimized out>) at ./Include/object.h:777\r\n#8  meth_dealloc (m=0x74b5dfb81210) at Objects/methodobject.c:170\r\n#9  0x000074b5e63b5d00 in Py_DECREF (op=0x74b5dfb81210) at ./Include/object.h:681\r\n#10 Py_XDECREF (op=0x74b5dfb81210) at ./Include/object.h:777\r\n#11 insertdict (interp=0x74b5e0e42010, mp=mp@entry=0x74b5df1d3d40, key=0x74b5dfb7db30, hash=<optimized out>, value=value@entry=0x74b5e6750240 <_Py_NoneStruct>) at Objects/dictobject.c:1304\r\n#12 0x000074b5e63b6107 in _PyDict_SetItem_Take2 (value=0x74b5e6750240 <_Py_NoneStruct>, key=<optimized out>, mp=0x74b5df1d3d40) at Objects/dictobject.c:1854\r\n#13 0x000074b5e63c5684 in _PyModule_ClearDict (d=0x74b5df1d3d40) at Objects/moduleobject.c:619\r\n#14 0x000074b5e63c5a6e in _PyModule_Clear (m=m@entry=0x74b5df1e12b0) at Objects/moduleobject.c:567\r\n#15 0x000074b5e64c884e in finalize_modules_clear_weaklist (verbose=0, weaklist=0x74b5dfbed080, interp=0x74b5e0e42010) at Python/pylifecycle.c:1491\r\n#16 finalize_modules (tstate=tstate@entry=0x74b5e0ea0400) at Python/pylifecycle.c:1574\r\n#17 0x000074b5e64cc476 in Py_EndInterpreter (tstate=0x74b5e0ea0400) at Python/pylifecycle.c:2137\r\n#18 0x000074b5e6a5bce6 in weechat_python_unload (script=0x5d9a7b80ee60) at /home/trygve/dev/weechat/src/plugins/python/weechat-python.c:947\r\n#19 0x000074b5e6a5bea6 in weechat_python_unload_all () at /home/trygve/dev/weechat/src/plugins/python/weechat-python.c:996\r\n#20 0x000074b5e7b81cea in plugin_script_end (weechat_plugin=0x5d9a7b29ad50, plugin_data=0x74b5e6a9e640 <python_data>) at /home/trygve/dev/weechat/src/plugins/plugin-script.c:1841\r\n#21 0x000074b5e6a5d8c4 in weechat_plugin_end (plugin=0x5d9a7b29ad50) at /home/trygve/dev/weechat/src/plugins/python/weechat-python.c:1634\r\n#22 0x00005d9a78ed4c38 in plugin_unload (plugin=0x5d9a7b29ad50) at /home/trygve/dev/weechat/src/plugins/plugin.c:1261\r\n#23 0x00005d9a78ed4d9f in plugin_unload_all () at /home/trygve/dev/weechat/src/plugins/plugin.c:1313\r\n#24 0x00005d9a78ed50f8 in plugin_end () at /home/trygve/dev/weechat/src/plugins/plugin.c:1433\r\n#25 0x00005d9a78e04340 in weechat_end (gui_end_cb=0x5d9a78ecb8ae <gui_main_end>) at /home/trygve/dev/weechat/src/core/weechat.c:709\r\n#26 0x00005d9a78e03163 in main (argc=4, argv=0x7ffdb171c178) at /home/trygve/dev/weechat/src/gui/curses/normal/main.c:45\r\n```\r\n\r\nThis was produced by creating these two python scripts:\r\n\r\n`dummy1.py`:\r\n```python\r\nimport weechat\r\n\r\nif weechat.register(\"dummy1\", \"trygveaa\", \"0.1\", \"MIT\", \"Dummy script 1\", \"\", \"\"):\r\n    weechat.prnt(\"\", \"Loaded dummy script 1\")\r\n```\r\n\r\n`dummy2.py`\r\n```python\r\nimport weechat\r\n\r\nif weechat.register(\"dummy2\", \"trygveaa\", \"0.1\", \"MIT\", \"Dummy script 2\", \"\", \"\"):\r\n    weechat.prnt(\"\", \"Loaded dummy script 2\")\r\n```\r\n\r\nAnd then running `weechat -t -r '/script load dummy1.py; /script load dummy2.py; /quit'`.\r\n\r\nAlso, here is the issue report for WeeChat: https://github.com/weechat/weechat/issues/2046\r\n\r\nSince it's fixed in main it seems there won't be a problem with 3.13, but I wonder if the fix can be backported to 3.12?\r\n\r\n### CPython versions tested on:\r\n\r\n3.12, CPython main branch\r\n\r\n### Operating systems tested on:\r\n\r\nLinux\r\n\r\n### Output from running 'python -VV' on the command line:\r\n\r\nPython 3.12.0a7+ (tags/v3.12.0a7-340-gde64e75616:de64e75616, Mar  8 2024, 19:43:39) [GCC 13.2.1 20230801]\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124536\n* gh-124541\n* gh-124645\n* gh-124646\n* gh-124648\n* gh-124649\n* gh-124865\n* gh-125204\n* gh-125205\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/116510/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/116510/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/116090",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/116090/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/116090/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/116090/events",
      "html_url": "https://github.com/python/cpython/issues/116090",
      "id": 2160213416,
      "node_id": "I_kwDOBN0Z8c6Awj2o",
      "number": 116090,
      "title": "`STOP_ITERATION` monitoring event is not triggered by unspecialized bytecode",
      "user": {
        "login": "swtaarrs",
        "id": 118219,
        "node_id": "MDQ6VXNlcjExODIxOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/118219?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/swtaarrs",
        "html_url": "https://github.com/swtaarrs",
        "followers_url": "https://api.github.com/users/swtaarrs/followers",
        "following_url": "https://api.github.com/users/swtaarrs/following{/other_user}",
        "gists_url": "https://api.github.com/users/swtaarrs/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/swtaarrs/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/swtaarrs/subscriptions",
        "organizations_url": "https://api.github.com/users/swtaarrs/orgs",
        "repos_url": "https://api.github.com/users/swtaarrs/repos",
        "events_url": "https://api.github.com/users/swtaarrs/events{/privacy}",
        "received_events_url": "https://api.github.com/users/swtaarrs/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "markshannon",
          "id": 9448417,
          "node_id": "MDQ6VXNlcjk0NDg0MTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/markshannon",
          "html_url": "https://github.com/markshannon",
          "followers_url": "https://api.github.com/users/markshannon/followers",
          "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
          "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
          "organizations_url": "https://api.github.com/users/markshannon/orgs",
          "repos_url": "https://api.github.com/users/markshannon/repos",
          "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/markshannon/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2024-02-29T02:10:06Z",
      "updated_at": "2024-07-29T19:22:26Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\n**Repro:** Check out [this commit](https://github.com/swtaarrs/cpython/commit/3ebad5dd775e867fdaa5cc7bcdda2692784f040e), build, and run `python -mtest test_monitoring -mtest_implicit_stop_iteration`.\n\n**Context:** The unspecialized implementation of `FOR_ITER` has some built-in opcode fusion, in that [it skips the following `END_FOR` and `POP_TOP`](https://github.com/python/cpython/blob/86e5e063aba76a7f4fc58f7d06b17b0a4730fd8e/Python/bytecodes.c#L2522-L2525) when `tp_iternext` returns `NULL`. When the iterator is a generator, as it is in [`ExceptionMonitoringTest.test_implicit_stop_iteration()`](https://github.com/python/cpython/blob/86e5e063aba76a7f4fc58f7d06b17b0a4730fd8e/Lib/test/test_monitoring.py#L818-L828), that means we skip the [`monitor_stop_iteration()` call](https://github.com/python/cpython/blob/86e5e063aba76a7f4fc58f7d06b17b0a4730fd8e/Python/bytecodes.c#L276) in `INSTRUMENTED_END_FOR`.\n\n`test_implicit_stop_iteration()` passes as written, though, because the `FOR_ITER` in the helper function has been specialized to `FOR_ITER_GEN` by the time the generator finishes, and `FOR_ITER_GEN`'s implementation doesn't perform the same fusion as `FOR_ITER`.\n\nThis bug can be exposed by making [this change](https://github.com/swtaarrs/cpython/commit/3ebad5dd775e867fdaa5cc7bcdda2692784f040e) to `test_implicit_stop_iteration()`, so the `FOR_ITER` stays unspecialized while iterating over the generator in question.\n\n### CPython versions tested on:\n\nCPython main branch\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-120697\n* gh-122413\n* gh-122419\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/116090/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/116090/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/116035",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/116035/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/116035/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/116035/events",
      "html_url": "https://github.com/python/cpython/issues/116035",
      "id": 2158423906,
      "node_id": "I_kwDOBN0Z8c6Apu9i",
      "number": 116035,
      "title": "datetime and time equality and hashing problematic",
      "user": {
        "login": "cjw296",
        "id": 632049,
        "node_id": "MDQ6VXNlcjYzMjA0OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/632049?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cjw296",
        "html_url": "https://github.com/cjw296",
        "followers_url": "https://api.github.com/users/cjw296/followers",
        "following_url": "https://api.github.com/users/cjw296/following{/other_user}",
        "gists_url": "https://api.github.com/users/cjw296/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/cjw296/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/cjw296/subscriptions",
        "organizations_url": "https://api.github.com/users/cjw296/orgs",
        "repos_url": "https://api.github.com/users/cjw296/repos",
        "events_url": "https://api.github.com/users/cjw296/events{/privacy}",
        "received_events_url": "https://api.github.com/users/cjw296/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 22,
      "created_at": "2024-02-28T08:47:48Z",
      "updated_at": "2024-03-08T22:51:30Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\nI'm sure folks will pull out reasoning behind this from the [inscrutable section in PEP 495](https://peps.python.org/pep-0495/#aware-datetime-equality-comparison) but this behaviour is honestly extremely surprising at best and just flat out wrong on first glance:\r\n\r\n```pycon\r\n>>> from datetime import time, datetime, date\r\n>>> time(fold=1) == time(fold=0)\r\nTrue\r\n>>> hash(time(fold=1)) == hash(time(fold=0))\r\nTrue\r\n>>> datetime(2024, 10, 27, fold=1) == datetime(2024, 10, 27, fold=0)\r\nTrue\r\n>>> hash(datetime(2024, 10, 27, fold=1)) == hash(datetime(2024, 10, 27, fold=0))\r\nTrue\r\n```\r\n\r\nEven when deliberately specifying as explicitly as possible two points in time which are absolutely not the same (these are two points during the UK DST backwards transition later this year):\r\n\r\n```pycon\r\n>>> from zoneinfo import ZoneInfo\r\n>>> tz = ZoneInfo('Europe/London')\r\n>>> dt1 = datetime(2024, 10, 27, 1, 30, fold=0, tzinfo=tz)\r\n>>> dt2 = datetime(2024, 10, 27, 1, 30, fold=1, tzinfo=tz)\r\n>>> dt1 == dt2 \r\nTrue\r\n>>> hash(dt1) == hash(dt2)\r\nTrue\r\n```\r\n\r\nThis has really unpleasant implications for things like storing points in time in a dictionary:\r\n\r\n```pycon\r\n>>> d = {}\r\n>>> d[dt1] = 1\r\n>>> d[dt2] = 2\r\n>>> d[dt1]\r\n2\r\n>>> d[dt2]\r\n2\r\n```\r\n\r\nThe inverse of this issue is reported in https://github.com/python/cpython/issues/115845.\r\n\r\nYes, I know the timestamp can be used:\r\n\r\n```pycon\r\n>>> dt1.timestamp() == dt2.timestamp()\r\nFalse\r\n```\r\n\r\n...but not on `time` objects, and `timestamp` also brings the local machine's timezone into play:\r\n\r\n```pycon\r\n>>> def fold_equal(*args, **kw):\r\n...   return datetime(*args, **kw, fold=0).timestamp() == datetime(*args, **kw, fold=1).timestamp()\r\n... \r\n>>> fold_equal(2024, 10, 27, 0, 30)\r\nTrue\r\n>>> fold_equal(2024, 10, 27, 1, 30)\r\nFalse\r\n>>> fold_equal(2024, 10, 27, 2, 30)\r\nTrue\r\n>>> fold_equal(2024, 10, 27, 0, 30, tzinfo=ZoneInfo('America/Chicago'))\r\nTrue\r\n>>> fold_equal(2024, 10, 27, 1, 30, tzinfo=ZoneInfo('America/Chicago'))\r\nTrue\r\n>>> fold_equal(2024, 10, 27, 2, 30, tzinfo=ZoneInfo('America/Chicago'))\r\nTrue\r\n```\r\n\r\nConcretely, it would be a lot less confusing if:\r\n\r\n-  `time` objects, and `datetime` objects where `tzinfo` is `None` are equal and hashed the same only if all of their attributes _including `fold`_ are the same.\r\n\r\n- `datetime` objects where `tzinfo` is not `None` are equal and hashed the same only if they represent the exact same point in time.\r\n\r\n### CPython versions tested on:\r\n\r\n3.12\r\n\r\n### Operating systems tested on:\r\n\r\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-116187\n* gh-116216\n* gh-116217\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/116035/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/116035/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/116017",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/116017/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/116017/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/116017/events",
      "html_url": "https://github.com/python/cpython/issues/116017",
      "id": 2157839262,
      "node_id": "I_kwDOBN0Z8c6AngOe",
      "number": 116017,
      "title": "Compiling tiny traces wastes lots of memory",
      "user": {
        "login": "brandtbucher",
        "id": 40968415,
        "node_id": "MDQ6VXNlcjQwOTY4NDE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brandtbucher",
        "html_url": "https://github.com/brandtbucher",
        "followers_url": "https://api.github.com/users/brandtbucher/followers",
        "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
        "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
        "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
        "repos_url": "https://api.github.com/users/brandtbucher/repos",
        "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        },
        {
          "id": 7018075156,
          "node_id": "LA_kwDOBN0Z8c8AAAABok9UFA",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-JIT",
          "name": "topic-JIT",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "brandtbucher",
        "id": 40968415,
        "node_id": "MDQ6VXNlcjQwOTY4NDE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brandtbucher",
        "html_url": "https://github.com/brandtbucher",
        "followers_url": "https://api.github.com/users/brandtbucher/followers",
        "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
        "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
        "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
        "repos_url": "https://api.github.com/users/brandtbucher/repos",
        "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "brandtbucher",
          "id": 40968415,
          "node_id": "MDQ6VXNlcjQwOTY4NDE1",
          "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/brandtbucher",
          "html_url": "https://github.com/brandtbucher",
          "followers_url": "https://api.github.com/users/brandtbucher/followers",
          "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
          "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
          "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
          "repos_url": "https://api.github.com/users/brandtbucher/repos",
          "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
          "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 7,
      "created_at": "2024-02-28T00:18:35Z",
      "updated_at": "2024-11-02T04:58:01Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "The JIT has a minimum allocation granularity of 1 page, with code and data on separate pages. Reducing this minimum would mean having pages of memory shared between executors, which is much harder to manage (and isn't thread-safe).\r\n\r\nSo the minimum amount of memory owned by an executor is 2 pages. This equals 8KB of memory on most platforms (the notable exception being newer Macs which have 16KB pages, and thus a whopping 32KB *minimum* allocation per trace). And all of that memory is paged in, since there's at least *some* memory being used on *every* page.\r\n\r\nWe should tune the trace collection machinery to find a sensible minimum trace length for tier two. We might also consider compiling fewer traces.\r\n\r\nA separate, but hairier, issue is what to do about the array of cold exit executors. We have 512 of them, and they're one instruction each, adding up to 4MB of mostly empty memory (16MB on macOS). For reference, if optimally packed (i.e. compiled as a single trace of length 512), they would take up about 200KB.\r\n\r\n@mdboom has been working on measuring the memory overhead of tier two on our benchmark suite. Early results show that:\r\n\r\n- The tier two interpreter uses ~1% more memory (max RSS).\r\n- On Linux, the JIT used ~5% more memory prior to GH-114142, and ~15% after that change landed.\r\n- On M1 Mac, the JIT used ~15% more memory prior to GH-114142, and ~80% after that change landed.\r\n\r\n(Keep in mind that most of the benchmarks have a tiny memory footprint to begin with, so moderate increases can manifest as large percentages.)\r\n\r\nCC: @gvanrossum, @markshannon \r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-116845\r\n* gh-120960\r\n* gh-124443\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/116017/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/116017/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/115992",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/115992/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/115992/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/115992/events",
      "html_url": "https://github.com/python/cpython/issues/115992",
      "id": 2156819190,
      "node_id": "I_kwDOBN0Z8c6AjnL2",
      "number": 115992,
      "title": "Build dependencies should be automatically generated",
      "user": {
        "login": "smontanaro",
        "id": 3427745,
        "node_id": "MDQ6VXNlcjM0Mjc3NDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3427745?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/smontanaro",
        "html_url": "https://github.com/smontanaro",
        "followers_url": "https://api.github.com/users/smontanaro/followers",
        "following_url": "https://api.github.com/users/smontanaro/following{/other_user}",
        "gists_url": "https://api.github.com/users/smontanaro/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/smontanaro/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/smontanaro/subscriptions",
        "organizations_url": "https://api.github.com/users/smontanaro/orgs",
        "repos_url": "https://api.github.com/users/smontanaro/repos",
        "events_url": "https://api.github.com/users/smontanaro/events{/privacy}",
        "received_events_url": "https://api.github.com/users/smontanaro/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-02-27T15:00:36Z",
      "updated_at": "2024-02-27T19:37:16Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nPython's build dependencies are currently maintained semi-manually. This can create the occasional problem when building based on a previous build. The usual solution is either `make clean`, `make distclean` or `git clean -fdx`. \n\nGCC and its related compilers have long supported dependency generation using the `-M` and related flags. Python should try to use this feature if possible.\n\n(PR incoming...)\n\n\n### CPython versions tested on:\n\nCPython main branch\n\n### Operating systems tested on:\n\nLinux, macOS\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-115993\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/115992/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/115992/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/115869",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/115869/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/115869/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/115869/events",
      "html_url": "https://github.com/python/cpython/issues/115869",
      "id": 2151883116,
      "node_id": "I_kwDOBN0Z8c6AQyFs",
      "number": 115869,
      "title": "Hosting `jit_stencils.h`",
      "user": {
        "login": "brandtbucher",
        "id": 40968415,
        "node_id": "MDQ6VXNlcjQwOTY4NDE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brandtbucher",
        "html_url": "https://github.com/brandtbucher",
        "followers_url": "https://api.github.com/users/brandtbucher/followers",
        "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
        "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
        "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
        "repos_url": "https://api.github.com/users/brandtbucher/repos",
        "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5587838308,
          "node_id": "LA_kwDOBN0Z8c8AAAABTQ-lZA",
          "url": "https://api.github.com/repos/python/cpython/labels/dependencies",
          "name": "dependencies",
          "color": "0366d6",
          "default": false,
          "description": "Pull requests that update a dependency file"
        },
        {
          "id": 7018075156,
          "node_id": "LA_kwDOBN0Z8c8AAAABok9UFA",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-JIT",
          "name": "topic-JIT",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "savannahostrowski",
        "id": 8949415,
        "node_id": "MDQ6VXNlcjg5NDk0MTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8949415?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/savannahostrowski",
        "html_url": "https://github.com/savannahostrowski",
        "followers_url": "https://api.github.com/users/savannahostrowski/followers",
        "following_url": "https://api.github.com/users/savannahostrowski/following{/other_user}",
        "gists_url": "https://api.github.com/users/savannahostrowski/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/savannahostrowski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/savannahostrowski/subscriptions",
        "organizations_url": "https://api.github.com/users/savannahostrowski/orgs",
        "repos_url": "https://api.github.com/users/savannahostrowski/repos",
        "events_url": "https://api.github.com/users/savannahostrowski/events{/privacy}",
        "received_events_url": "https://api.github.com/users/savannahostrowski/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "savannahostrowski",
          "id": 8949415,
          "node_id": "MDQ6VXNlcjg5NDk0MTU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/8949415?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/savannahostrowski",
          "html_url": "https://github.com/savannahostrowski",
          "followers_url": "https://api.github.com/users/savannahostrowski/followers",
          "following_url": "https://api.github.com/users/savannahostrowski/following{/other_user}",
          "gists_url": "https://api.github.com/users/savannahostrowski/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/savannahostrowski/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/savannahostrowski/subscriptions",
          "organizations_url": "https://api.github.com/users/savannahostrowski/orgs",
          "repos_url": "https://api.github.com/users/savannahostrowski/repos",
          "events_url": "https://api.github.com/users/savannahostrowski/events{/privacy}",
          "received_events_url": "https://api.github.com/users/savannahostrowski/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 18,
      "created_at": "2024-02-23T22:10:55Z",
      "updated_at": "2024-12-02T16:50:48Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "While this is probably *desirable*, I'm not quite sure if it's *feasible*. With that said, several people (@vstinner at the sprint and @zooba during PR review) both expressed a desire to remove the LLVM build-time dependency for JIT builds. Let's have that conversation here.\r\n\r\n## Background\r\n\r\nWhen building CPython with the JIT enabled, ~LLVM 16~ [LLVM 18](https://github.com/python/cpython/blob/main/Tools/jit/README.md) is used to compile [`Tools/jit/template.c`](https://github.com/python/cpython/blob/main/Tools/jit/template.c) many times, and process the resulting object files into a file called [`jit_stencils.h`](https://gist.github.com/brandtbucher/d6397b1d106c55164b32df27d53eb7b8) in the build directory.\r\n\r\n## A useful analogy\r\n\r\nBecause this file depends on `Python.h` (and thus `pyconfig.h` and many build-specific configuration options, including things like `_DEBUG`/`NDEBUG`/`Py_DEBUG`/etc.) and contains binary code, it is probably most useful to think of `jit_stencils.h` as a binary extension module.\r\n\r\nIf we could build, host, and manage compiled versions of, say, `itertoolsmodule.c` somewhere and have it work correctly for those who need it, then such a scheme would probably work for `jit_stencils.h`.\r\n\r\n## Open questions\r\n\r\n- Can this be done in a way that actually works correctly and is worth the trouble (the status quo being \"download LLVM 18 if you want to build the JIT\").\r\n- Should we just try to host these for the most common build configurations? Or \"everything\"?\r\n- Should all platforms be in one file (with each platform guarded by `#ifdef`s), or many files?\r\n- Should these files be checked in? Or hosted somewhere? Who/what builds them? How often?\r\n- Does this introduce any new attack vectors?\r\n- What should the workflow look like for:\r\n  - ...those developing the JIT?\r\n  - ...those changing header files that the JIT depends on?\r\n  - ...those building CPython with a JIT from a random commit?\r\n  - ...those building CPython with a JIT from a release tag?\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-127166\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/115869/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/115869/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/115816",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/115816/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/115816/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/115816/events",
      "html_url": "https://github.com/python/cpython/issues/115816",
      "id": 2148757398,
      "node_id": "I_kwDOBN0Z8c6AE2-W",
      "number": 115816,
      "title": "The symbolic value lattice used in the tier 2 optimizer needs documentation and tests.",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 20,
      "created_at": "2024-02-22T10:41:05Z",
      "updated_at": "2024-02-28T22:34:22Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "The behavior of the symbolic values used in the tier 2 optimizer have a solid theoretical basis, but there is some subtlety involved.\r\nThe symbolic values and the lattice they form needs to be well documented and tested.\r\n\r\n### What are the symbolic values?\r\n\r\nEach symbolic value represents not a real object, but knowledge about the set of objects that could be present at a given point in the code. This is powerful, but not intuitive.\r\n\r\nExample:\r\n\r\n```Py\r\ndef foo(x):               # line 0\r\n    if x is None:         # line 1\r\n       return \"None\"      # line 2\r\n    return \"ok\"           # line 3\r\n```\r\nAt line 3, the symbolic value for `x` is `not None`, whereas the symbolic value for `x` at line 0 is `unknown`.\r\nHowever, any object referred to `x` is unchanged by `foo`. It is easy to think in terms of objects, but it is really a type system that we are representing.\r\n\r\n### Why we need a lattice \r\n\r\nExample:\r\n```Py\r\ndef foo(x):               # line 0\r\n    if x is None:         # line 1\r\n       return \"None\"      # line 2\r\n    if x is not None:     # line 3\r\n       return \"not None\"  # line 4\r\n    return \"???\"          # line 5\r\n```\r\nand this trace:\r\n ```\r\n  exit_if(x is not None)  # line 1\r\n  exit_if(x is None)      # line 3\r\n  return \"???\"            # line 5\r\n```\r\nThe trace is a correct trace; it correctly represents one path through the function.\r\nSo what symbolic value does `x` have for line 5? It is both `None` and `not None`.\r\nThis is why the lattice needs a `top` value, even though it superficially makes no sense.\r\nIf a value is `top` for a location, then that location is unreachable.\r\n\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-115953\n* gh-115987\n* gh-116011\n* gh-116028\n* gh-116077\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/115816/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/115816/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/115806",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/115806/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/115806/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/115806/events",
      "html_url": "https://github.com/python/cpython/issues/115806",
      "id": 2148513452,
      "node_id": "I_kwDOBN0Z8c6AD7as",
      "number": 115806,
      "title": "Configure UX",
      "user": {
        "login": "erlend-aasland",
        "id": 13780613,
        "node_id": "MDQ6VXNlcjEzNzgwNjEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erlend-aasland",
        "html_url": "https://github.com/erlend-aasland",
        "followers_url": "https://api.github.com/users/erlend-aasland/followers",
        "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
        "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
        "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
        "repos_url": "https://api.github.com/users/erlend-aasland/repos",
        "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2024-02-22T08:35:27Z",
      "updated_at": "2024-06-15T12:38:36Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\nThe LDLIBRARY and HOSTRUNNER checks overlap; this results in garbled output:\n\n```console\n$ ./configure\n[...]\nchecking LDLIBRARY... checking HOSTRUNNER... \nlibpython$(VERSION)$(ABIFLAGS).a\n```\n\nThe IPv6 library check is very subtle:\n\n```console\n$ ./configure\n[...]\nconfigure: using libc\n```\n\nSuggesting to clean this up, for improved `configure` user experience:\n\n```console\n$ ./configure\n[...]\nchecking LDLIBRARY... libpython$(VERSION)$(ABIFLAGS).a\nchecking HOSTRUNNER...\n[...]\nchecking ipv6 stack type... kame\nchecking ipv6 library... libc\n```\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-115807\n* gh-116165\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "erlend-aasland",
        "id": 13780613,
        "node_id": "MDQ6VXNlcjEzNzgwNjEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erlend-aasland",
        "html_url": "https://github.com/erlend-aasland",
        "followers_url": "https://api.github.com/users/erlend-aasland/followers",
        "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
        "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
        "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
        "repos_url": "https://api.github.com/users/erlend-aasland/repos",
        "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/115806/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/115806/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/115802",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/115802/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/115802/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/115802/events",
      "html_url": "https://github.com/python/cpython/issues/115802",
      "id": 2148176902,
      "node_id": "I_kwDOBN0Z8c6ACpQG",
      "number": 115802,
      "title": "Improving JIT code quality",
      "user": {
        "login": "brandtbucher",
        "id": 40968415,
        "node_id": "MDQ6VXNlcjQwOTY4NDE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brandtbucher",
        "html_url": "https://github.com/brandtbucher",
        "followers_url": "https://api.github.com/users/brandtbucher/followers",
        "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
        "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
        "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
        "repos_url": "https://api.github.com/users/brandtbucher/repos",
        "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 7018075156,
          "node_id": "LA_kwDOBN0Z8c8AAAABok9UFA",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-JIT",
          "name": "topic-JIT",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "brandtbucher",
        "id": 40968415,
        "node_id": "MDQ6VXNlcjQwOTY4NDE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brandtbucher",
        "html_url": "https://github.com/brandtbucher",
        "followers_url": "https://api.github.com/users/brandtbucher/followers",
        "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
        "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
        "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
        "repos_url": "https://api.github.com/users/brandtbucher/repos",
        "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "brandtbucher",
          "id": 40968415,
          "node_id": "MDQ6VXNlcjQwOTY4NDE1",
          "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/brandtbucher",
          "html_url": "https://github.com/brandtbucher",
          "followers_url": "https://api.github.com/users/brandtbucher/followers",
          "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
          "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
          "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
          "repos_url": "https://api.github.com/users/brandtbucher/repos",
          "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
          "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-02-22T04:39:29Z",
      "updated_at": "2024-12-29T19:29:35Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "We have a JIT compiler, but the quality of the templates needs improvement. Here are some areas that I plan on working on (note that these strictly pertain to machine code quality, not improvements to tier two in general):\r\n\r\n- [ ] Stop using the \"large\" code model.\r\n  - [x] GH-115826\r\n  - [x] GH-115964\r\n  - [ ] Try emitting trampolines for out-of-range branches on AArch64.\r\n  - [ ] Try emitting trampolines for out-of-range branches on x86_64.\r\n- [ ] Remove zero-length jumps when tail-calling between templates.\r\n  - [x] GH-116177\r\n  - [ ] `aarch64-apple-darwin`\r\n  - [ ] `aarch64-pc-windows-msvc`\r\n  - [ ] Investigate slowdown on `i686-pc-windows-msvc`.\r\n- [x] Use LLVM's `ghccc`/`preserve_none` calling convention when tail-calling between templates.\r\n- [x] #116422\r\n- [ ] Cache top-of-stack values in registers when tail-calling between templates.\r\n\r\nThe nice thing about these improvements is that they compound. For example, getting rid of 64-bit register-indirect jumps (the \"large\" code model) in the first step will make all of the following improvements even more potent .\r\n\r\n## Stop using the \"large\" code model.\r\n\r\nSince our jitted code is mapped into a 64-bit address space, we're not able to compile our templates using the default \"small\" code model that assumes a 31-bit address space (and can thus use 32-bit relative addressing). This forces the templates to use convoluted code patterns to make sure that this 64-bit assumption is met for all relocations, typically using two large instructions (load the wide value into a register, then actually use it) where only one should be necessary:\r\n\r\n[Example of current code.](https://godbolt.org/z/qW4eMxf1s)\r\n\r\nUnfortunately, many of the relocations we perform are values that can comfortably fit in 32 signed bits, meaning that this code bloat is pure unnecessary overhead in critical parts of the code.\r\n\r\nWhat we can do instead is generate position-independent code, which is already the default for most platforms. On the surface, this seems *less* efficient, since it means that every value we patch will be loaded indirectly from memory (even though the code itself is smaller):\r\n\r\n[Example of position-independent code.](https://godbolt.org/z/8nbv6T5WT)\r\n\r\nHowever, notice that the relocations that are emitted are relaxable. This means that if the oparg value and continuation address are small enough, we can (quite easily) relax `mov eax, dword ptr [rip + AAA]` into `lea eax, [rip + XXX]` and `jmp qword ptr [rip + BBB]` into `jmp YYY; nop`. This turns both memory loads into signed 32-bit PC-relative immediate values, and gives us some good quality code:\r\n\r\n```asm\r\n8D 05 XX XX XX XX lea eax, [rip + XXXXXXXX]\r\n01 07             add dword ptr [rdi], eax\r\nE9 YY YY YY YY    jmp YYYYYYYY\r\n90                nop\r\n```\r\n\r\nSince macOS JIT builds already use position-independent code, this isn't very difficult to implement. The two main \"new\" bits are:\r\n- Implementing the actual relaxations.\r\n- Achieving the same effect on Windows JIT builds (via `__declspec(dllimport)`).\r\n\r\n(As a bonus, we can probably use something similar to PLT stubs to relax *all* jumps and calls without too much fuss, since we already emit these sorts of trampolines for `aarch64-unknown-linux-gnu` builds. I haven't looked into this too closely to see what it will win us performance-wise.)\r\n\r\nBenchmarking runs suggest that this change will give us a ~1-3% performance improvement, depending on platform.\r\n\r\n## Remove zero-length jumps when tail-calling between templates.\r\n\r\nThis is easier once we've performed the above step, since we no longer need to worry about two-instruction register-indirect jumps (which are tricky to elide correctly). In the above code, we can trivially remove the `jmp` and `nop` instructions, giving us:\r\n\r\n```asm\r\n8D 05 XX XX XX XX lea eax, [rip + XXXXXXXX]\r\n01 07             add dword ptr [rdi], eax\r\n```\r\n\r\nBenchmarking suggests that this change will give us an additional ~1-3% performance improvement.\r\n\r\n## Use LLVM's `ghccc`/`preserve_none` calling convention when tail-calling between templates.\r\n\r\nLLVM has cool calling conventions that have no callee-saved registers, and pass as many arguments in registers as possible. This is super efficient for our tail calls, and is a big part of the original copy-and-patch paper.\r\n\r\nClang 19 will ship with support for this [`__attribute__((preserve_none))`](https://github.com/llvm/llvm-project/pull/76868) calling convention, but not until much later this year. In the meantime, hacks exist (by dropping briefly into LLVM IR at build time and changing the convention manually).\r\n\r\nBenchmarking suggests that this change will give us an additional ~0-6% performance improvement (no wins on `aarch64`, moderate wins on `x86_64`, and big wins on `i686`).\r\n\r\n## Split hot and cold parts of the templates.\r\n\r\nOur stencils contain a lot of error-handling and deoptimization code. We can make the hot code more compact and linear by \"jumping away\" to shared cold stubs for these paths (and these jumps will be more efficient with the above improvements).\r\n\r\nThis isn't too difficult, since we already have two \"segments\" of jitted code (executable code and read-only data). This just adds a third.\r\n\r\nEarly experiments suggest a ~1-2% performance improvement with this approach.\r\n\r\n## Cache top-of-stack values in registers when tail-calling between templates.\r\n\r\nSee [this paper](https://dl.acm.org/doi/pdf/10.1145/207110.207165) for inspiration.\r\n\r\nThis is a bigger project, but will likely be one of the bigger wins here. It is probably made much easier by our fancy interpreter generator, which should be a decent framework for generating variants of instructions with certain inputs and outputs living outside of the value stack, and generating lookup tables for automatically replacing them during trace formation.\r\n\r\nThe above step of changing the calling convention will be helpful here, since we'll get a lot more registers to pin stack items in across tail calls. We can probably do this in a way that works for the tier two interpreter as well.\r\n\r\nNo idea what this will win us, but it should be good given the amount of memory traffic that's being reduced to and from interpreter frames.\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-115826\r\n* gh-115964\r\n* gh-116177\r\n* gh-116856\n* gh-118287\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/115802/reactions",
        "total_count": 11,
        "+1": 5,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 4,
        "rocket": 2,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/115802/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/115776",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/115776/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/115776/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/115776/events",
      "html_url": "https://github.com/python/cpython/issues/115776",
      "id": 2147257868,
      "node_id": "I_kwDOBN0Z8c5__I4M",
      "number": 115776,
      "title": "Inline values array into the object",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "markshannon",
          "id": 9448417,
          "node_id": "MDQ6VXNlcjk0NDg0MTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/markshannon",
          "html_url": "https://github.com/markshannon",
          "followers_url": "https://api.github.com/users/markshannon/followers",
          "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
          "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
          "organizations_url": "https://api.github.com/users/markshannon/orgs",
          "repos_url": "https://api.github.com/users/markshannon/repos",
          "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/markshannon/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2024-02-21T17:02:21Z",
      "updated_at": "2024-08-29T08:53:25Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\nCurrently when allocating a plain Python object, we allocate the object, and its values array.\nThis has a few downsides:\n1. We perform two allocations instead of one.\n2. An extra indirection is needed when accessing an attribute on the object\n3. If the `__dict__` is materialized we can no longer use specialized lookup.\n\nWe could fix three with an extra pointer in the object header, but that would waste more space.\n\nWe should append the values array directly after the object header, which fixes the above issues.\n\nIt adds some complexity, as we need to track ownership of the values so that they are freed exactly once, but may enable some simplifications as well. Overall, it would seem to make little difference to complexity.\n\nSee https://github.com/faster-cpython/ideas/issues/72 for more discussion.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-116115\n* gh-117673\n* gh-123192\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/115776/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/115776/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/115775",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/115775/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/115775/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/115775/events",
      "html_url": "https://github.com/python/cpython/issues/115775",
      "id": 2147230906,
      "node_id": "I_kwDOBN0Z8c5__CS6",
      "number": 115775,
      "title": "Use static analysis to assist inlining values and compact object layout.",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2024-02-21T16:49:38Z",
      "updated_at": "2024-05-01T20:39:10Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\nWith https://github.com/python/cpython/pull/28802 we only create dictionaries when needed, which means we need to guess how big to create the values array attached to each object.\n\nWe use the following heuristic: Start with 30 items and reduce by one each time we create an object until the size of the array is no more than one greater than the number of keys in the shared keys.\nThis works reasonably well, but it could be improved. Many classes have a fixed set of attributes, but they are not all used during early object creation. Static analysis could give us a better estimate of the size of values array to use, by pre-initializing the shared keys.\n\nFor each class body we should have the compiler inject a special attribute, say `__expected_attributes__`, which can be used at runtime to compute the expected attributes for the class.\n\nFor an example of code where static analysis could work, but our current dynamic approach does not, see https://github.com/python/pyperformance/blob/main/pyperformance/data-files/benchmarks/bm_go/run_benchmark.py\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-115913\n* gh-117909\n* gh-118468\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/115775/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/115775/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/115727",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/115727/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/115727/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/115727/events",
      "html_url": "https://github.com/python/cpython/issues/115727",
      "id": 2144630821,
      "node_id": "I_kwDOBN0Z8c5_1Hgl",
      "number": 115727,
      "title": "Generation of tier 2 traces is overly optimistic about the accuracy of profiling for branches.",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2024-02-20T15:21:46Z",
      "updated_at": "2024-02-21T01:29:38Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\nWe have a test for our confidence that the trace is going the right way:\n```Py\ndef test_confidence_score(self):\n    def testfunc(n):\n        bits = 0\n        for i in range(n):\n            if i & 0x01:\n                bits += 1\n            if i & 0x02:\n                bits += 1\n            if i&0x04:\n                bits += 1\n            if i&0x08:\n                bits += 1\n            ...\n```\nBut consider this:\n```Py\ndef test_confidence_score(self):\n    def testfunc(n):\n        bits = 0\n        for i in range(n):\n            if i & 0x10:\n                bits += 1\n            if i & 0x20:\n                bits += 1\n            if i&0x40:\n                bits += 1\n            if i&0x80:\n                bits += 1\n            ...\n```\nThe direction of the branch changes every 16 iterations, so looks perfectly predictable to profiling but it as pathalogical as the first version.\n\n### How to fix this\nWe should lower our confidence a bit, even if profiling claims 100% predictability.\n\nI don't think there is a perfect way to do this, but it shouldn't too hard to come up with something good enough.\n\n#### Here is a possible scheme\nUse lower confidence and threshold when generating the initial trace:\n* 0.8 * profile_fraction + 0.1 for bool checks (maybe higher for `is None` checks)\n* 0.95 - 0.05 * misses recorded for type checks\n* Stop trace at a lower confidence than before, say < 0.2\n\nReassess confidence in optimizer:\n* Type information may raise confidence (it we eliminate a guard, we have 100% confidence)\n* Stop trace at confidence < 0.33 (maybe allow a lower confidence if it completes a loop)\n\n\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-115728\n* gh-115748\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/115727/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/115727/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/115720",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/115720/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/115720/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/115720/events",
      "html_url": "https://github.com/python/cpython/issues/115720",
      "id": 2144551050,
      "node_id": "I_kwDOBN0Z8c5_00CK",
      "number": 115720,
      "title": "Show number of leaks in --huntrleaks",
      "user": {
        "login": "encukou",
        "id": 302922,
        "node_id": "MDQ6VXNlcjMwMjkyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/encukou",
        "html_url": "https://github.com/encukou",
        "followers_url": "https://api.github.com/users/encukou/followers",
        "following_url": "https://api.github.com/users/encukou/following{/other_user}",
        "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
        "organizations_url": "https://api.github.com/users/encukou/orgs",
        "repos_url": "https://api.github.com/users/encukou/repos",
        "events_url": "https://api.github.com/users/encukou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/encukou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "encukou",
        "id": 302922,
        "node_id": "MDQ6VXNlcjMwMjkyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/encukou",
        "html_url": "https://github.com/encukou",
        "followers_url": "https://api.github.com/users/encukou/followers",
        "following_url": "https://api.github.com/users/encukou/following{/other_user}",
        "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
        "organizations_url": "https://api.github.com/users/encukou/orgs",
        "repos_url": "https://api.github.com/users/encukou/repos",
        "events_url": "https://api.github.com/users/encukou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/encukou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "encukou",
          "id": 302922,
          "node_id": "MDQ6VXNlcjMwMjkyMg==",
          "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/encukou",
          "html_url": "https://github.com/encukou",
          "followers_url": "https://api.github.com/users/encukou/followers",
          "following_url": "https://api.github.com/users/encukou/following{/other_user}",
          "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
          "organizations_url": "https://api.github.com/users/encukou/orgs",
          "repos_url": "https://api.github.com/users/encukou/repos",
          "events_url": "https://api.github.com/users/encukou/events{/privacy}",
          "received_events_url": "https://api.github.com/users/encukou/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-02-20T14:46:16Z",
      "updated_at": "2024-02-27T08:55:41Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\nCurrently, `-R` (`--huntrleaks`) only displays the reference counts when the test fails. It also uses a [generous heuristic](https://github.com/python/cpython/issues/74959), which avoid false positives, but might hide issues.\n\nTo get more insight into what's going on, I propose to show the number of leaks instead of the *dot*, with\n- `.` instead of `0`, so leaks stand out\n- `X` instead of 10 or more, to keep the display as a single digit\n\nAdditionally, I'd like to separate warmup runs, so you know when to start worrying.\n\nThe output would look like this:\n```\nbeginning 9 repetitions. Showing number of leaks (. for zero, X for 10 or more)\n12345:6789\nXX.1. ....\n```\nmeaning the first 2 warmups \u201cleaked\u201d a lot, then one more had a single \u201cleak\u201d, and there were no more leaks.\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-115726\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/115720/reactions",
        "total_count": 4,
        "+1": 4,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/115720/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/115506",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/115506/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/115506/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/115506/events",
      "html_url": "https://github.com/python/cpython/issues/115506",
      "id": 2136007543,
      "node_id": "I_kwDOBN0Z8c5_UON3",
      "number": 115506,
      "title": "Eliminate constant inputs and output constants for simple operations",
      "user": {
        "login": "Fidget-Spinner",
        "id": 28750310,
        "node_id": "MDQ6VXNlcjI4NzUwMzEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fidget-Spinner",
        "html_url": "https://github.com/Fidget-Spinner",
        "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
        "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
        "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
        "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
        "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2024-02-15T09:12:08Z",
      "updated_at": "2024-10-01T05:20:09Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "- [ ] BINARY_OP https://github.com/python/cpython/issues/115758\r\n- [x] TO_BOOL https://github.com/python/cpython/issues/115759\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124809\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/115506/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/115506/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/115267",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/115267/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/115267/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/115267/events",
      "html_url": "https://github.com/python/cpython/issues/115267",
      "id": 2128779349,
      "node_id": "I_kwDOBN0Z8c5-4phV",
      "number": 115267,
      "title": " Improve performance for temporary containers modification",
      "user": {
        "login": "pvlkhn",
        "id": 12566849,
        "node_id": "MDQ6VXNlcjEyNTY2ODQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12566849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pvlkhn",
        "html_url": "https://github.com/pvlkhn",
        "followers_url": "https://api.github.com/users/pvlkhn/followers",
        "following_url": "https://api.github.com/users/pvlkhn/following{/other_user}",
        "gists_url": "https://api.github.com/users/pvlkhn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pvlkhn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pvlkhn/subscriptions",
        "organizations_url": "https://api.github.com/users/pvlkhn/orgs",
        "repos_url": "https://api.github.com/users/pvlkhn/repos",
        "events_url": "https://api.github.com/users/pvlkhn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pvlkhn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-02-11T00:57:30Z",
      "updated_at": "2024-02-19T11:05:46Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\n### Issue:\n\nThe current implementation of list concatenation using the + operator in CPython always allocates new memory, resulting in unnecessary copying for temporary objects, especially noticeable in scenarios involving recursive list creation\n\n```python\ndef recursive_arange_via_sum(start, stop):\n    assert start < stop\n    if start == stop - 1:\n        return [start]\n    return recursive_arange_via_sum(start, stop - 1) + [stop - 1]\n```\nThe same performance issue extends to set and tuple objects modifications\n\n### Proposal:\n\nIntroduce an optimization by using internally in-place versions to modify lists/sets with exactly one reference instead of creating a new ones. Similar optimization already [implemented](https://github.com/python/cpython/blob/5a173efa693a053bf4a059c82c1c06c82a9fa8fb/Objects/unicodeobject.c#L11032) for strings. While lists/sets are mutable, and operations like append, extend, and the += operator are available, using in-place versions internally could enhance performance without sacrificing code clarity as in the example below:\n\n```python\ndef recursive_arange_via_append(start, stop):\n    assert start < stop\n    if start == stop - 1:\n        return [start]\n    recursive_result = recursive_arange_via_append(start, stop - 1)\n    recursive_result.append(stop - 1)\n    return recursive_result\n```\nWhile `recursive_arange_via_append` works much faster than `recursive_arange_via_sum` many people are [in fact](https://github.com/search?q=%22%29+%2B+%5B%22+language%3APython&type=code&l=Python) sacrificing performance for a clarity in such code constructions. Most of them are not recursive, but still there is unnecessary copy\n\n### Note\n\nFor tuples, such cases are relatively rare, and I don't see a straightforward solution (there is no inplace operator implemented), but further analysis can be performed if deemed useful\n\n### Has this already been discussed elsewhere?\n\nNo response given\n\n### Links to previous discussion of this feature:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-115268\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/115267/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/115267/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/115256",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/115256/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/115256/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/115256/events",
      "html_url": "https://github.com/python/cpython/issues/115256",
      "id": 2128610730,
      "node_id": "I_kwDOBN0Z8c5-4AWq",
      "number": 115256,
      "title": "Remove reference cycle when writing tarfiles",
      "user": {
        "login": "pan324",
        "id": 103143968,
        "node_id": "U_kgDOBiXaIA",
        "avatar_url": "https://avatars.githubusercontent.com/u/103143968?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pan324",
        "html_url": "https://github.com/pan324",
        "followers_url": "https://api.github.com/users/pan324/followers",
        "following_url": "https://api.github.com/users/pan324/following{/other_user}",
        "gists_url": "https://api.github.com/users/pan324/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pan324/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pan324/subscriptions",
        "organizations_url": "https://api.github.com/users/pan324/orgs",
        "repos_url": "https://api.github.com/users/pan324/repos",
        "events_url": "https://api.github.com/users/pan324/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pan324/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2024-02-10T16:57:27Z",
      "updated_at": "2024-02-15T20:20:48Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\nThe following code keeps a file handle for eternity and even `gc.collect` does not help.\n```python\n>>> import tarfile\n>>> tarfile.TarFile(\"archive.tar.gz\",\"w\").add(\"somefile.py\")\n```\nThe culprit is a line that itself says that it is not needed. Indeed, it is never used anywhere. https://github.com/python/cpython/blob/main/Lib/tarfile.py#L2033\n\nNow the example might be a rather bad style, but even a typical use case where a TarFile variable is defined and closed afterwards will also keep some stuff in memory until `gc.collect` happens due to this line. Removing the line also adds a ResourceWarning to the bad style example which currently does not appear.\n\n### Has this already been discussed elsewhere?\n\nThis is a minor feature, which does not need previous discussion elsewhere\n\n### Links to previous discussion of this feature:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-115257\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/115256/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/115256/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/115142",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/115142/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/115142/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/115142/events",
      "html_url": "https://github.com/python/cpython/issues/115142",
      "id": 2123582755,
      "node_id": "I_kwDOBN0Z8c5-k00j",
      "number": 115142,
      "title": "Meta issue: Mark all CPython-specific tests with a `test.support.cpython_only` decorator",
      "user": {
        "login": "Eclips4",
        "id": 80244920,
        "node_id": "MDQ6VXNlcjgwMjQ0OTIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/80244920?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eclips4",
        "html_url": "https://github.com/Eclips4",
        "followers_url": "https://api.github.com/users/Eclips4/followers",
        "following_url": "https://api.github.com/users/Eclips4/following{/other_user}",
        "gists_url": "https://api.github.com/users/Eclips4/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Eclips4/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Eclips4/subscriptions",
        "organizations_url": "https://api.github.com/users/Eclips4/orgs",
        "repos_url": "https://api.github.com/users/Eclips4/repos",
        "events_url": "https://api.github.com/users/Eclips4/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Eclips4/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2024-02-07T17:59:21Z",
      "updated_at": "2024-09-24T21:11:19Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\nThere's a certain amount of Cpython-specific tests which isn't marked with a `cpython_only` decorator.\r\n\r\nI'm certain that CPython-specific tests should be excluded from running on any other implementation, which is advantageous for us. This ensures that when developing another Python implementation, you can selectively avoid running these specific CPython tests, which is beneficial during the testing phase. This way, you can focus on relevant tests for your implementation without unnecessary interference from CPython-specific ones.\r\n\r\nSo, my final goal is to make the whole CPython test suite runnable on other Python implementations.\r\n\r\nI would like to send a one PR per test file which needs a fix.\r\n\r\n### CPython versions tested on:\r\n\r\nCPython main branch\r\n\r\n### Operating systems tested on:\r\n\r\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-115175\n* gh-116507\n* gh-116543\n* gh-117574\n* gh-117588\n* gh-117718\n* gh-124474\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/115142/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/115142/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/115119",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/115119/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/115119/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/115119/events",
      "html_url": "https://github.com/python/cpython/issues/115119",
      "id": 2121994271,
      "node_id": "I_kwDOBN0Z8c5-exAf",
      "number": 115119,
      "title": "Unvendor `libmpdec` sources",
      "user": {
        "login": "zware",
        "id": 6275069,
        "node_id": "MDQ6VXNlcjYyNzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6275069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zware",
        "html_url": "https://github.com/zware",
        "followers_url": "https://api.github.com/users/zware/followers",
        "following_url": "https://api.github.com/users/zware/following{/other_user}",
        "gists_url": "https://api.github.com/users/zware/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zware/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zware/subscriptions",
        "organizations_url": "https://api.github.com/users/zware/orgs",
        "repos_url": "https://api.github.com/users/zware/repos",
        "events_url": "https://api.github.com/users/zware/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zware/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018672955,
          "node_id": "LA_kwDOBN0Z8c7viBU7",
          "url": "https://api.github.com/repos/python/cpython/labels/extension-modules",
          "name": "extension-modules",
          "color": "09fc59",
          "default": false,
          "description": "C modules in the Modules dir"
        },
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "zware",
        "id": 6275069,
        "node_id": "MDQ6VXNlcjYyNzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6275069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zware",
        "html_url": "https://github.com/zware",
        "followers_url": "https://api.github.com/users/zware/followers",
        "following_url": "https://api.github.com/users/zware/following{/other_user}",
        "gists_url": "https://api.github.com/users/zware/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zware/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zware/subscriptions",
        "organizations_url": "https://api.github.com/users/zware/orgs",
        "repos_url": "https://api.github.com/users/zware/repos",
        "events_url": "https://api.github.com/users/zware/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zware/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "zware",
          "id": 6275069,
          "node_id": "MDQ6VXNlcjYyNzUwNjk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6275069?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/zware",
          "html_url": "https://github.com/zware",
          "followers_url": "https://api.github.com/users/zware/followers",
          "following_url": "https://api.github.com/users/zware/following{/other_user}",
          "gists_url": "https://api.github.com/users/zware/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/zware/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/zware/subscriptions",
          "organizations_url": "https://api.github.com/users/zware/orgs",
          "repos_url": "https://api.github.com/users/zware/repos",
          "events_url": "https://api.github.com/users/zware/events{/privacy}",
          "received_events_url": "https://api.github.com/users/zware/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 34,
      "created_at": "2024-02-07T01:42:58Z",
      "updated_at": "2024-05-20T14:58:25Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "To facilitate cleaner updates of the externally-maintained `libmpdec` required by the `_decimal` module, we should migrate away from the bundled copy in `Modules/_decimal/libmpdec` and towards an \"external\" in `cpython-source-deps` for Windows and `--with-system-libmpdec` by default elsewhere.\r\n\r\nMy tentative plan is as follows:\r\n- In 3.13:\r\n  - [x] Add `mpdecimal-2.5.1` and `mpdecimal-4.0.0` to `cpython-source-deps`:\r\n       - https://github.com/python/cpython-source-deps/pull/32\r\n       - https://github.com/python/cpython-source-deps/tree/mpdecimal\r\n  - [x] Switch Windows build to `mpdecimal-2.5.1` external (#115182)\r\n  - [x] #115406\r\n  - [x] python/devguide#1313\r\n  - [x] #118382 \r\n  - [x] #118506\r\n  - [x] Update macOS build to `mpdecimal-4.0.0`\r\n  - [x] #118539\r\n  - [x] #118631 \r\n  - [x] ~~Post `#118539`: amend Ubuntu CI to use system installed mpdecimal~~\r\n  - [ ] Update the docs; see https://github.com/python/cpython/issues/115119#issuecomment-2089754385\r\n  - [ ] #119196\r\n- In 3.14:\r\n  - [ ] Remove the implicit fallback to the bundled copy\r\n  - [ ] Keep support for explicit `--without-system-libmpdec` (with warning)\r\n- In 3.15:\r\n  - [ ] Remove `--with[out]-system-libmpdec` `configure` options and `Modules/_decimal/libmpdec/`\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-115182\r\n* gh-115406\r\n* gh-118382\r\n* gh-118506\r\n* gh-118539\r\n* gh-118631\r\n* gh-118634\r\n* gh-119196\r\n* gh-119217\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/115119/reactions",
        "total_count": 4,
        "+1": 4,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/115119/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/115077",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/115077/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/115077/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/115077/events",
      "html_url": "https://github.com/python/cpython/issues/115077",
      "id": 2120608407,
      "node_id": "I_kwDOBN0Z8c5-ZeqX",
      "number": 115077,
      "title": "Argument Clinic: make error messages more helpful to developers",
      "user": {
        "login": "erlend-aasland",
        "id": 13780613,
        "node_id": "MDQ6VXNlcjEzNzgwNjEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erlend-aasland",
        "html_url": "https://github.com/erlend-aasland",
        "followers_url": "https://api.github.com/users/erlend-aasland/followers",
        "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
        "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
        "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
        "repos_url": "https://api.github.com/users/erlend-aasland/repos",
        "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4019554242,
          "node_id": "LA_kwDOBN0Z8c7vlYfC",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-argument-clinic",
          "name": "topic-argument-clinic",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2024-02-06T12:00:17Z",
      "updated_at": "2024-02-16T09:56:25Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Some[^1] of the Argument Clinic error messages only point to the problem in the clinic input, but do not suggest how to fix it. Suggesting to do an audit of clinic.py and improve the error messages that are too implicit or provide too little information/context to the developer.\r\n\r\nRandom selection of error messages that *might* be improved:\r\n\r\n- \"Too many var args\" (how many are there now? what is too many?)\r\n- \"Not enough arguments for destination {name!r} new {type!r}\" (how many arguments are expected, and what kind of arguments are they?)\r\n- \"Can't clear destination {name!r}: it's not of type 'buffer'\" (what type is it?)\r\n- \"Custom printers are broken right now\"\r\n- \"bool_converter: illegal 'accept' argument {accept!r}\" (why is it illegal? how to fix this?)\r\n- \"char_converter: illegal default value {default!r}\" (which values are legal? how to fix this?)\r\n- \"illegal combination of arguments\"\"\r\n- \"'kind' of function and cloned function don't match! (@classmethod/@staticmethod/@coexist)\" (what was the mismatch?)\r\n\r\n(There might be better examples; this was the result of a very quick and short audit.)\r\n\r\ncc. @sobolevn \r\n\r\n[^1]: but, definitely not all!\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-115078\n* gh-115555\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/115077/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/115077/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/114990",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/114990/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/114990/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/114990/events",
      "html_url": "https://github.com/python/cpython/issues/114990",
      "id": 2117000852,
      "node_id": "I_kwDOBN0Z8c5-Lt6U",
      "number": 114990,
      "title": "Some mixin methods in `collections.abc` are not mentioned in the Document",
      "user": {
        "login": "aisk",
        "id": 699636,
        "node_id": "MDQ6VXNlcjY5OTYzNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/699636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aisk",
        "html_url": "https://github.com/aisk",
        "followers_url": "https://api.github.com/users/aisk/followers",
        "following_url": "https://api.github.com/users/aisk/following{/other_user}",
        "gists_url": "https://api.github.com/users/aisk/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aisk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aisk/subscriptions",
        "organizations_url": "https://api.github.com/users/aisk/orgs",
        "repos_url": "https://api.github.com/users/aisk/repos",
        "events_url": "https://api.github.com/users/aisk/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aisk/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2024-02-04T10:06:33Z",
      "updated_at": "2024-02-04T10:09:08Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "## Documentation\r\n\r\nhttps://docs.python.org/3/library/collections.abc.html\r\n\r\n## Set\r\n\r\n[`Set.__rsub__`](https://github.com/python/cpython/blob/848c86786be588312bff948441929816cdd19e28/Lib/_collections_abc.py#L648) and [`Set.__rxor__`](https://github.com/python/cpython/blob/848c86786be588312bff948441929816cdd19e28/Lib/_collections_abc.py#L663) do exist but not mentioned in the Document.\r\n\r\n## MappingView\r\n\r\n[`MappingView.__init__`](https://github.com/python/cpython/blob/848c86786be588312bff948441929816cdd19e28/Lib/_collections_abc.py#L845) and [`MappingView.__repr__`](https://github.com/python/cpython/blob/848c86786be588312bff948441929816cdd19e28/Lib/_collections_abc.py#L851) have the same issue.\r\n\r\nBut since `__init__` and `__repr__` always have default implementation in the base class `object`, so I'm not sure should we treat them as mixin methods. But the implemntation in `MappingView` do have it's own logic so I assume they should be mixin methods.\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-114991\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/114990/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/114990/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/114911",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/114911/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/114911/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/114911/events",
      "html_url": "https://github.com/python/cpython/issues/114911",
      "id": 2115106149,
      "node_id": "I_kwDOBN0Z8c5-EfVl",
      "number": 114911,
      "title": "test_int.test_denial_of_service failed: took 15ms",
      "user": {
        "login": "encukou",
        "id": 302922,
        "node_id": "MDQ6VXNlcjMwMjkyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/encukou",
        "html_url": "https://github.com/encukou",
        "followers_url": "https://api.github.com/users/encukou/followers",
        "following_url": "https://api.github.com/users/encukou/following{/other_user}",
        "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
        "organizations_url": "https://api.github.com/users/encukou/orgs",
        "repos_url": "https://api.github.com/users/encukou/repos",
        "events_url": "https://api.github.com/users/encukou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/encukou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 8,
      "created_at": "2024-02-02T14:47:30Z",
      "updated_at": "2025-01-01T17:56:00Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "`test_int` recently [failed on a buildbot](https://buildbot.python.org/all/#/builders/1115/builds/437/steps/4/logs/stdio):\r\n```\r\n======================================================================\r\nFAIL: test_denial_of_service_prevented_str_to_int (test.test_int.IntSubclassStrDigitLimitsTests.test_denial_of_service_prevented_str_to_int)\r\nRegression test: ensure we fail before performing O(N**2) work.\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"b:\\uildarea\\3.12.ware-win11.nondebug\\build\\Lib\\test\\test_int.py\", line 743, in test_denial_of_service_prevented_str_to_int\r\n    self.assertLessEqual(seconds_to_fail_extra_huge, seconds_to_convert/2)\r\nAssertionError: 0.015625 not less than or equal to 0.0078125\r\n```\r\n\r\nI don't know for sure, but my guess is that a GC collection got triggered at the wrong time.\r\n\r\nI'd like to add a test helper for timing CPU-bound tasks. It should disable GC and use `process_time`; perhaps it can do other tricks in the future too.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-114912\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/114911/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/114911/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/114727",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/114727/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/114727/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/114727/events",
      "html_url": "https://github.com/python/cpython/issues/114727",
      "id": 2105982637,
      "node_id": "I_kwDOBN0Z8c59hr6t",
      "number": 114727,
      "title": "posixmodule uses PyOS_setsig to save & restore signal handlers",
      "user": {
        "login": "encukou",
        "id": 302922,
        "node_id": "MDQ6VXNlcjMwMjkyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/encukou",
        "html_url": "https://github.com/encukou",
        "followers_url": "https://api.github.com/users/encukou/followers",
        "following_url": "https://api.github.com/users/encukou/following{/other_user}",
        "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
        "organizations_url": "https://api.github.com/users/encukou/orgs",
        "repos_url": "https://api.github.com/users/encukou/repos",
        "events_url": "https://api.github.com/users/encukou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/encukou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018672955,
          "node_id": "LA_kwDOBN0Z8c7viBU7",
          "url": "https://api.github.com/repos/python/cpython/labels/extension-modules",
          "name": "extension-modules",
          "color": "09fc59",
          "default": false,
          "description": "C modules in the Modules dir"
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-01-29T17:01:16Z",
      "updated_at": "2024-03-19T16:46:45Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "`posixmodule` ignores signals in `os_openpty_impl` and `os_grantpt_impl` by wrapping them in two PyOS_setsig calls:\r\n\r\n```\r\n   sig_saved = PyOS_setsig(SIGCHLD, SIG_DFL);\r\n    ...\r\n    PyOS_setsig(SIGCHLD, sig_saved);\r\n```\r\nThis relies on the GIL being held, so it probably needs a dedicated lock in free-threading builds.\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-117017\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/114727/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/114727/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/114570",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/114570/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/114570/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/114570/events",
      "html_url": "https://github.com/python/cpython/issues/114570",
      "id": 2101268870,
      "node_id": "I_kwDOBN0Z8c59PtGG",
      "number": 114570,
      "title": "Checking for `sys.is_finalizing` before thread.start() still yields \"can't create new thread at interpreter shutdown\"",
      "user": {
        "login": "Jibola",
        "id": 2887713,
        "node_id": "MDQ6VXNlcjI4ODc3MTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2887713?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Jibola",
        "html_url": "https://github.com/Jibola",
        "followers_url": "https://api.github.com/users/Jibola/followers",
        "following_url": "https://api.github.com/users/Jibola/following{/other_user}",
        "gists_url": "https://api.github.com/users/Jibola/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Jibola/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Jibola/subscriptions",
        "organizations_url": "https://api.github.com/users/Jibola/orgs",
        "repos_url": "https://api.github.com/users/Jibola/repos",
        "events_url": "https://api.github.com/users/Jibola/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Jibola/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 557226369,
          "node_id": "MDU6TGFiZWw1NTcyMjYzNjk=",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-asyncio",
          "name": "topic-asyncio",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4018993468,
          "node_id": "LA_kwDOBN0Z8c7vjPk8",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-subinterpreters",
          "name": "topic-subinterpreters",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 11,
      "created_at": "2024-01-25T22:30:16Z",
      "updated_at": "2024-03-12T20:39:46Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nWe have code in [pymongo](https://github.com/mongodb/mongo-python-driver) Our `MongoClient` object immediately spawns a new daemon thread to run some periodic check operations from the moment it is initialized. When run on python 3.12, we've run into the issue `can't create new thread at interpreter shutdown` because we have cases `thread.start()` that can execute as the interpreter is shutting down.\n\nTo mitigate this issue we attempted checking `sys.is_finalizing` before issuing the `start()` call: \n```python\nif not sys.is_finalizing():\n    thread.start()\n```\nThis still generated the same runtime error. \n\nWe tried catching the `RuntimeError` exception:\n```python\ntry:\n    thread.start()\nexcept RuntimeError:\n    pass\n```\nThis worked. This feels too broad a solution than the above since it will catch and ignore all `RuntimeError`s. \n\nFinally we decided to see if we could check `sys.is_finalizing` after the exception is raised.\n\n```python\ntry:\n    thread.start()\nexcept RuntimeError:\n    if sys.is_finalizing():\n        self._thread = None\n        return\n    raise\n```\nTo our surprise, this also failed. I can understand that starting a thread on interpreter shutdown should be avoided, but this also feels misleading if the system isn't correctly seeing--which is my assumption on what `sys.is_finalizing()`--that it is experiencing interpreter shutdown. \n\nShould the expectation not be that `sys.is_finalizing` is updated before the `thread.start()` is called OR by the time the `RuntimeError` is raised? This way we can safely catch or preempt the error before triggering?\n\nAs a general inquiry, though, what should be the general best practice for patching issues like this on our end as it has introduced somewhat breaking behavior from 3.11 -> 3.12? Should we do like above with catching the `RuntimeError` but additionally check the exception string for the exact type of `RuntimeError`?\n\n### CPython versions tested on:\n\n3.12\n\n### Operating systems tested on:\n\nmacOS\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-115352\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/114570/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/114570/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/114258",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/114258/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/114258/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/114258/events",
      "html_url": "https://github.com/python/cpython/issues/114258",
      "id": 2088870331,
      "node_id": "I_kwDOBN0Z8c58gaG7",
      "number": 114258,
      "title": "Reduce critical section boilerplate in type slot implementations",
      "user": {
        "login": "colesbury",
        "id": 655866,
        "node_id": "MDQ6VXNlcjY1NTg2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/colesbury",
        "html_url": "https://github.com/colesbury",
        "followers_url": "https://api.github.com/users/colesbury/followers",
        "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
        "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
        "organizations_url": "https://api.github.com/users/colesbury/orgs",
        "repos_url": "https://api.github.com/users/colesbury/repos",
        "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
        "received_events_url": "https://api.github.com/users/colesbury/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4019554242,
          "node_id": "LA_kwDOBN0Z8c7vlYfC",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-argument-clinic",
          "name": "topic-argument-clinic",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 8,
      "created_at": "2024-01-18T18:50:15Z",
      "updated_at": "2024-03-01T01:06:29Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\nPEP 703 in large part relies on replacing the GIL with fine grained per-object locks. The primary way to acquire and release these locks is through the critical section API (https://github.com/python/cpython/issues/111569). In #111903, we added support for generating the necessary critical section calls in Argument Clinic wrapped methods. In #112205, this was extended to getters and setters as well.\n\nHowever, some object behavior is implemented using [\"tp slots\"](https://docs.python.org/3/c-api/typeobj.html), which are not supported by Argument Clinic. These functions often need critical sections for thread-safety; that means more boilerplate code.\n\nHere are some possible ideas on how to address this:\n\n### Add support for \"tp slots\" to Argument Clinic\n\nWe could add support for certain tp slots functions to Argument Clinic. This would provide a consistent way to add critical sections across both slots, getters/setters, and \"regular\" methods. The disadvantage is that \"tp slots\" don't need much argument parsing, so they may otherwise not be a great fit for Argument Clinic\n\n### Use C macros to wrap slot implementations with critical sections\n\nWe could implement an internal-only header that provides macros to wrap a given \"tp slot\" function with a critical section. For example, something like:\n\n```c\nstatic PyObject *\nlist_richcompare_impl(PyObject *v, PyObject *w, int op)\n{\n   // implement richcompare unchanged\n}\n\n// generates a list_richcompare() function with the correct Py_BEGIN/END_CRITICAL_SECTION()\n_Py_CRITICAL_SECTION_TP_RICHCOMPARE(list_richcompare, list_richcompare_impl);\n```\n\nI think this would not be too difficult to implement -- probably easier than modifying Argument Clinic. The disadvantage is the lack of uniformity around how we add critical sections to functions.\n\n### Keep the status quo\n\nWe can always just keep adding the `Py_BEGIN/END_CRITICAL_SECTION()` calls manually for tp slots.\n\ncc @erlend-aasland, @corona10 \n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-114930\n* gh-116170\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/114258/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/114258/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/114203",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/114203/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/114203/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/114203/events",
      "html_url": "https://github.com/python/cpython/issues/114203",
      "id": 2086850340,
      "node_id": "I_kwDOBN0Z8c58Ys8k",
      "number": 114203,
      "title": "critical section should avoid parking lot when re-entering top-most held critical section",
      "user": {
        "login": "DinoV",
        "id": 320265,
        "node_id": "MDQ6VXNlcjMyMDI2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/320265?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DinoV",
        "html_url": "https://github.com/DinoV",
        "followers_url": "https://api.github.com/users/DinoV/followers",
        "following_url": "https://api.github.com/users/DinoV/following{/other_user}",
        "gists_url": "https://api.github.com/users/DinoV/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DinoV/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DinoV/subscriptions",
        "organizations_url": "https://api.github.com/users/DinoV/orgs",
        "repos_url": "https://api.github.com/users/DinoV/repos",
        "events_url": "https://api.github.com/users/DinoV/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DinoV/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2024-01-17T19:36:15Z",
      "updated_at": "2024-12-23T13:01:47Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\n`--disable-gil` builds use critical sections more and more.  In some cases a critcal section is held and will be re-entered immediately by the calling thread and this can be hard to avoid (e.g when we're going from C code to Python code back into related C code).  Some examples of this are flushing I/O and calculating the MRO on a metaclass.\n\nWhen this happens we treat this as re-entrancy to the critical section, and send it off to the parking lot to be released and then re-acquired.  This can greatly slow down something which should just simply re-acquire the lock.\n\nIt's not super straight forward as we still need to support detaching and resuming the critical section in other cases of contention correctly for the lock.\n\nAs part of this it'd be good to also have the ability to collect stats on how often this is happening as we do want to generally avoid it and prefer lock-free paths where possible.\n\n### Has this already been discussed elsewhere?\n\nNo response given\n\n### Links to previous discussion of this feature:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-128126\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/114203/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/114203/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/113858",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/113858/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/113858/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/113858/events",
      "html_url": "https://github.com/python/cpython/issues/113858",
      "id": 2072444101,
      "node_id": "I_kwDOBN0Z8c57hvzF",
      "number": 113858,
      "title": "`ccache` GitHub action generates excessive caches",
      "user": {
        "login": "encukou",
        "id": 302922,
        "node_id": "MDQ6VXNlcjMwMjkyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/encukou",
        "html_url": "https://github.com/encukou",
        "followers_url": "https://api.github.com/users/encukou/followers",
        "following_url": "https://api.github.com/users/encukou/following{/other_user}",
        "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
        "organizations_url": "https://api.github.com/users/encukou/orgs",
        "repos_url": "https://api.github.com/users/encukou/repos",
        "events_url": "https://api.github.com/users/encukou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/encukou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 7527065505,
          "node_id": "LA_kwDOBN0Z8c8AAAABwKXnoQ",
          "url": "https://api.github.com/repos/python/cpython/labels/infra",
          "name": "infra",
          "color": "5319e7",
          "default": false,
          "description": "CI, GitHub Actions, buildbots, Dependabot, etc."
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "encukou",
        "id": 302922,
        "node_id": "MDQ6VXNlcjMwMjkyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/encukou",
        "html_url": "https://github.com/encukou",
        "followers_url": "https://api.github.com/users/encukou/followers",
        "following_url": "https://api.github.com/users/encukou/following{/other_user}",
        "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
        "organizations_url": "https://api.github.com/users/encukou/orgs",
        "repos_url": "https://api.github.com/users/encukou/repos",
        "events_url": "https://api.github.com/users/encukou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/encukou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "encukou",
          "id": 302922,
          "node_id": "MDQ6VXNlcjMwMjkyMg==",
          "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/encukou",
          "html_url": "https://github.com/encukou",
          "followers_url": "https://api.github.com/users/encukou/followers",
          "following_url": "https://api.github.com/users/encukou/following{/other_user}",
          "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
          "organizations_url": "https://api.github.com/users/encukou/orgs",
          "repos_url": "https://api.github.com/users/encukou/repos",
          "events_url": "https://api.github.com/users/encukou/events{/privacy}",
          "received_events_url": "https://api.github.com/users/encukou/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 19,
      "created_at": "2024-01-09T14:08:18Z",
      "updated_at": "2024-09-27T22:42:21Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "The `ccache` action speeds up *nix builds considerably (though not enough that we could do without it).\r\nThe issue with it is that every build uploads a new cache, filling up our quota very quickly. GitHub removes caches that weren't used recently, but ccache is aggressive enough that it's crowding out smaller, useful entries. Specifically, the action to mark stale-PRs (which only runs every once in a while), has its state removed before the next run.\r\n\r\n* [x] Solve this in `main`. (It's hard to test locally,  iterating on `main` seems to be the best way to do it. Sorry for the noise!)\r\n* [x] Backport to bugfix branches\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-113859\r\n* gh-113945\r\n* gh-114082\n* gh-114113\n* gh-114188\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": {
        "login": "erlend-aasland",
        "id": 13780613,
        "node_id": "MDQ6VXNlcjEzNzgwNjEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erlend-aasland",
        "html_url": "https://github.com/erlend-aasland",
        "followers_url": "https://api.github.com/users/erlend-aasland/followers",
        "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
        "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
        "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
        "repos_url": "https://api.github.com/users/erlend-aasland/repos",
        "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/113858/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/113858/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/113655",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/113655/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/113655/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/113655/events",
      "html_url": "https://github.com/python/cpython/issues/113655",
      "id": 2062517204,
      "node_id": "I_kwDOBN0Z8c5674PU",
      "number": 113655,
      "title": "Stack overflow collecting PGO data on Windows",
      "user": {
        "login": "mdboom",
        "id": 38294,
        "node_id": "MDQ6VXNlcjM4Mjk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/38294?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mdboom",
        "html_url": "https://github.com/mdboom",
        "followers_url": "https://api.github.com/users/mdboom/followers",
        "following_url": "https://api.github.com/users/mdboom/following{/other_user}",
        "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions",
        "organizations_url": "https://api.github.com/users/mdboom/orgs",
        "repos_url": "https://api.github.com/users/mdboom/repos",
        "events_url": "https://api.github.com/users/mdboom/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mdboom/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 570103914,
          "node_id": "MDU6TGFiZWw1NzAxMDM5MTQ=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-windows",
          "name": "OS-windows",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        },
        {
          "id": 4019020460,
          "node_id": "LA_kwDOBN0Z8c7vjWKs",
          "url": "https://api.github.com/repos/python/cpython/labels/deferred-blocker",
          "name": "deferred-blocker",
          "color": "660205",
          "default": false,
          "description": null
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "mdboom",
        "id": 38294,
        "node_id": "MDQ6VXNlcjM4Mjk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/38294?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mdboom",
        "html_url": "https://github.com/mdboom",
        "followers_url": "https://api.github.com/users/mdboom/followers",
        "following_url": "https://api.github.com/users/mdboom/following{/other_user}",
        "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions",
        "organizations_url": "https://api.github.com/users/mdboom/orgs",
        "repos_url": "https://api.github.com/users/mdboom/repos",
        "events_url": "https://api.github.com/users/mdboom/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mdboom/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "mdboom",
          "id": 38294,
          "node_id": "MDQ6VXNlcjM4Mjk0",
          "avatar_url": "https://avatars.githubusercontent.com/u/38294?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/mdboom",
          "html_url": "https://github.com/mdboom",
          "followers_url": "https://api.github.com/users/mdboom/followers",
          "following_url": "https://api.github.com/users/mdboom/following{/other_user}",
          "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions",
          "organizations_url": "https://api.github.com/users/mdboom/orgs",
          "repos_url": "https://api.github.com/users/mdboom/repos",
          "events_url": "https://api.github.com/users/mdboom/events{/privacy}",
          "received_events_url": "https://api.github.com/users/mdboom/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 23,
      "created_at": "2024-01-02T14:42:24Z",
      "updated_at": "2024-09-20T06:06:42Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nDuring a PGO build on Windows on main (471aa75), a test in `test_functools` fails with a stack overflow.\n\n[Full log of build](https://gist.github.com/mdboom/86ba07fc8435f60f41f29c2d83c9f487)\n\n```\nPCbuild\\build.bat --pgo\n```\n\n```\n0:02:50 load avg: 0.35 [19/44] test_functools\nWindows fatal exception: stack overflow\n\nThread 0x00002b38 (most recent call first):\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\libregrtest\\win_utils.py\", line 43 in _update_load\n\nCurrent thread 0x00000e3c (most recent call first):\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1[875](https://github.com/faster-cpython/benchmarking/actions/runs/7367240496/job/20050307979#step:10:876) in fib\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\n  ...\n\nC:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython>\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\\msbuild.exe\" \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\PCbuild\\\\pythoncore.vcxproj\" /t:KillPython /nologo /v:m /clp:summary /p:Configuration=PGInstrument /p:Platform=x64 /p:KillPython=true \n\n  Killing any running python.exe instances...\n\nC:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\PCbuild\\pyproject.props(184,5): error : PGO run did not succeed (no python313!*.pgc files) and there is no data to merge [C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\PCbuild\\pythoncore.vcxproj]\n\nBuild FAILED.\n\n```\n\n### CPython versions tested on:\n\nCPython main branch\n\n### Operating systems tested on:\n\nWindows\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-113668\n* gh-113701\n* gh-113944\n* gh-114148\n* gh-114263\n* gh-114896\n* gh-115770\n* gh-124264\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/113655/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/113655/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/113650",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/113650/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/113650/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/113650/events",
      "html_url": "https://github.com/python/cpython/issues/113650",
      "id": 2062306927,
      "node_id": "I_kwDOBN0Z8c567E5v",
      "number": 113650,
      "title": "test_logging SMTPHandlerTest fails due to bad encoding",
      "user": {
        "login": "zooba",
        "id": 1693688,
        "node_id": "MDQ6VXNlcjE2OTM2ODg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zooba",
        "html_url": "https://github.com/zooba",
        "followers_url": "https://api.github.com/users/zooba/followers",
        "following_url": "https://api.github.com/users/zooba/following{/other_user}",
        "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
        "organizations_url": "https://api.github.com/users/zooba/orgs",
        "repos_url": "https://api.github.com/users/zooba/repos",
        "events_url": "https://api.github.com/users/zooba/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zooba/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018694952,
          "node_id": "LA_kwDOBN0Z8c7viGso",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-unicode",
          "name": "topic-unicode",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 11,
      "created_at": "2024-01-02T11:46:51Z",
      "updated_at": "2024-01-09T23:22:26Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "I get this error on one of my ARM64 test machines.\r\n\r\nThe `s.encode('ascii', 'surrogateescape')` looks strange to my eyes, since ASCII doesn't have a way to encode surrogates? I assume the handler has tried to do it (hence \"position 6-8\" not 6-7), but really this ought to just fail (perhaps explicitly) and `email` shouldn't be passing ascii and surrogateescape together.\r\n\r\nI'm not sure why it doesn't occur on other platforms. This really ought to be an error all the time - ideas?\r\n\r\n```\r\ntest_basic (test.test_logging.SMTPHandlerTest.test_basic) ... --- Logging error ---\r\nTraceback (most recent call last):\r\n  File \"D:\\agent\\_work\\3\\b\\layout\\Lib\\logging\\handlers.py\", line 1086, in emit\r\n    smtp.send_message(msg)\r\n    ~~~~~~~~~~~~~~~~~^^^^^\r\n  File \"D:\\agent\\_work\\3\\b\\layout\\Lib\\smtplib.py\", line 973, in send_message\r\n    g.flatten(msg_copy, linesep='\\r\\n')\r\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"D:\\agent\\_work\\3\\b\\layout\\Lib\\email\\generator.py\", line 115, in flatten\r\n    self._write(msg)\r\n    ~~~~~~~~~~~^^^^^\r\n  File \"D:\\agent\\_work\\3\\b\\layout\\Lib\\email\\generator.py\", line 180, in _write\r\n    self._dispatch(msg)\r\n    ~~~~~~~~~~~~~~^^^^^\r\n  File \"D:\\agent\\_work\\3\\b\\layout\\Lib\\email\\generator.py\", line 217, in _dispatch\r\n    meth(msg)\r\n    ~~~~^^^^^\r\n  File \"D:\\agent\\_work\\3\\b\\layout\\Lib\\email\\generator.py\", line 433, in _handle_text\r\n    self._write_lines(msg._payload)\r\n    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\r\n  File \"D:\\agent\\_work\\3\\b\\layout\\Lib\\email\\generator.py\", line 154, in _write_lines\r\n    self.write(line)\r\n    ~~~~~~~~~~^^^^^^\r\n  File \"D:\\agent\\_work\\3\\b\\layout\\Lib\\email\\generator.py\", line 409, in write\r\n    self._fp.write(s.encode('ascii', 'surrogateescape'))\r\n                   ~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 6-8: ordinal not in range(128)\r\n[skip test infrastructure stack]\r\n  File \"D:\\agent\\_work\\3\\b\\layout\\Lib\\test\\test_logging.py\", line 1126, in test_basic\r\n    h.handle(r)\r\nMessage: 'Hello \\u2713'\r\nArguments: ()\r\nFAIL\r\n```\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-113836\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "zooba",
        "id": 1693688,
        "node_id": "MDQ6VXNlcjE2OTM2ODg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zooba",
        "html_url": "https://github.com/zooba",
        "followers_url": "https://api.github.com/users/zooba/followers",
        "following_url": "https://api.github.com/users/zooba/following{/other_user}",
        "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
        "organizations_url": "https://api.github.com/users/zooba/orgs",
        "repos_url": "https://api.github.com/users/zooba/repos",
        "events_url": "https://api.github.com/users/zooba/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zooba/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/113650/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/113650/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/113587",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/113587/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/113587/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/113587/events",
      "html_url": "https://github.com/python/cpython/issues/113587",
      "id": 2060785736,
      "node_id": "I_kwDOBN0Z8c561RhI",
      "number": 113587,
      "title": "`del (a, [b])` is currently accepted syntax by the python interpreter",
      "user": {
        "login": "15r10nk",
        "id": 44680962,
        "node_id": "MDQ6VXNlcjQ0NjgwOTYy",
        "avatar_url": "https://avatars.githubusercontent.com/u/44680962?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/15r10nk",
        "html_url": "https://github.com/15r10nk",
        "followers_url": "https://api.github.com/users/15r10nk/followers",
        "following_url": "https://api.github.com/users/15r10nk/following{/other_user}",
        "gists_url": "https://api.github.com/users/15r10nk/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/15r10nk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/15r10nk/subscriptions",
        "organizations_url": "https://api.github.com/users/15r10nk/orgs",
        "repos_url": "https://api.github.com/users/15r10nk/repos",
        "events_url": "https://api.github.com/users/15r10nk/events{/privacy}",
        "received_events_url": "https://api.github.com/users/15r10nk/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5532939260,
          "node_id": "LA_kwDOBN0Z8c8AAAABScnz_A",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-parser",
          "name": "topic-parser",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 12,
      "created_at": "2023-12-30T16:03:49Z",
      "updated_at": "2024-09-24T07:00:36Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nI found the following while working on [pysource-codegen](https://github.com/15r10nk/pysource-codegen), which generates random python code. I don't know any real world python code which does this.\n\n``` bash\necho \"del (a,[b])\" | python3.12 -m dis\n  0           0 RESUME                   0\n  1           2 DELETE_NAME              0 (a)\n              4 DELETE_NAME              1 (b)\n              6 RETURN_CONST             0 (None)\n\necho \"del (a,[b])\" | python3.12 -m ast\nModule(\n   body=[\n      Delete(\n         targets=[\n            Tuple(\n               elts=[\n                  Name(id='a', ctx=Del()),\n                  List(\n                     elts=[\n                        Name(id='b', ctx=Del())],\n                     ctx=Del())],\n               ctx=Del())])],\n   type_ignores=[])\n```\n\nI think that this is most likely an bug in the parser.\n\nAnother issue that I found while working on this is that `del (a,b)` and `del a,b` generate different python ast.\n\n```bash\necho \"del (a,b)\" | python3.12 -m ast\nModule(\n   body=[\n      Delete(\n         targets=[\n            Tuple(\n               elts=[\n                  Name(id='a', ctx=Del()),\n                  Name(id='b', ctx=Del())],\n               ctx=Del())])],\n   type_ignores=[])\n```\n\n```bash\necho \"del a,b\" | python3.12 -m ast\nModule(\n   body=[\n      Delete(\n         targets=[\n            Name(id='a', ctx=Del()),\n            Name(id='b', ctx=Del())])],\n   type_ignores=[])\n```\n\nThe ast documentation says:\n\n> class ast.Delete(targets)\n> Represents a del statement. targets is a list of nodes, such as [Name](https://docs.python.org/3/library/ast.html#ast.Name), [Attribute](https://docs.python.org/3/library/ast.html#ast.Attribute) or [Subscript](https://docs.python.org/3/library/ast.html#ast.Subscript) nodes\n\n\nI don't know what the best solution to this problem should be, but I would like to have a correct documentation. Especially the case that `ast.Tuple` could be a del target is missing and was confusing for me. I had expected that `del (a,b)` and `del a,b` would produce the same ast and that `del (a,(b,c))` is invalid syntax.\n\n`del [a]` looks like a bug to me and I hope it can be fixed.\n\n\n\n### CPython versions tested on:\n\n3.12\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-113771\n* gh-113783\n* gh-113784\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/113587/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/113587/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/113190",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/113190/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/113190/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/113190/events",
      "html_url": "https://github.com/python/cpython/issues/113190",
      "id": 2044204652,
      "node_id": "I_kwDOBN0Z8c552BZs",
      "number": 113190,
      "title": "python3.12 introduces numerous memory leaks (as reported by ASAN)",
      "user": {
        "login": "Mekk",
        "id": 161873,
        "node_id": "MDQ6VXNlcjE2MTg3Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/161873?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Mekk",
        "html_url": "https://github.com/Mekk",
        "followers_url": "https://api.github.com/users/Mekk/followers",
        "following_url": "https://api.github.com/users/Mekk/following{/other_user}",
        "gists_url": "https://api.github.com/users/Mekk/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Mekk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Mekk/subscriptions",
        "organizations_url": "https://api.github.com/users/Mekk/orgs",
        "repos_url": "https://api.github.com/users/Mekk/repos",
        "events_url": "https://api.github.com/users/Mekk/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Mekk/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018993468,
          "node_id": "LA_kwDOBN0Z8c7vjPk8",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-subinterpreters",
          "name": "topic-subinterpreters",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 8,
      "created_at": "2023-12-15T18:45:06Z",
      "updated_at": "2024-08-02T17:03:46Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\nLet example illustrate:\r\n\r\n```\r\n$ LD_PRELOAD=/usr/lib/llvm-14/lib/clang/14.0.0/lib/linux/libclang_rt.asan-x86_64.so \\\r\n   PYTHONMALLOC=malloc \\\r\n   /usr/bin/python3.10 -c 'print(\"Hello\")'\r\nHello\r\n\r\n$ LD_PRELOAD=/usr/lib/llvm-14/lib/clang/14.0.0/lib/linux/libclang_rt.asan-x86_64.so \\\r\n  PYTHONMALLOC=malloc \\\r\n  /usr/bin/python3.11 -c 'print(\"Hello\")'\r\nHello\r\n\r\n$ LD_PRELOAD=/usr/lib/llvm-14/lib/clang/14.0.0/lib/linux/libclang_rt.asan-x86_64.so \\\r\n   PYTHONMALLOC=malloc \\\r\n   /usr/bin/python3.12 -c 'print(\"Hello\")'\r\nHello\r\n\r\n=================================================================\r\n==3317995==ERROR: LeakSanitizer: detected memory leaks\r\n\r\nDirect leak of 55877 byte(s) in 1063 object(s) allocated from:\r\n    #0 0x7f5d145847ee in __interceptor_malloc (/usr/lib/llvm-14/lib/clang/14.0.0/lib/linux/libclang_rt.asan-x86_64.so+0xcd7ee) (BuildId: a6105a816e63299474c1078329a59ed80f244fbf)\r\n    #1 0x539ddf  (/usr/bin/python3.12+0x539ddf) (BuildId: aba53fb0246abeea0af6e1c463dcb32848eb6c27)\r\n\r\nDirect leak of 30732 byte(s) in 614 object(s) allocated from:\r\n    #0 0x7f5d145847ee in __interceptor_malloc (/usr/lib/llvm-14/lib/clang/14.0.0/lib/linux/libclang_rt.asan-x86_64.so+0xcd7ee) (BuildId: a6105a816e63299474c1078329a59ed80f244fbf)\r\n    #1 0x5573b9  (/usr/bin/python3.12+0x5573b9) (BuildId: aba53fb0246abeea0af6e1c463dcb32848eb6c27)\r\n\r\nSUMMARY: AddressSanitizer: 86609 byte(s) leaked in 1677 allocation(s).\r\n```\r\n\r\n\r\n\r\n\r\n### CPython versions tested on:\r\n\r\n3.12.1\r\n\r\n### Operating systems tested on:\r\n\r\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-113601\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/113190/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/113190/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/113157",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/113157/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/113157/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/113157/events",
      "html_url": "https://github.com/python/cpython/issues/113157",
      "id": 2043202297,
      "node_id": "I_kwDOBN0Z8c55yMr5",
      "number": 113157,
      "title": "Changed behavior of <instancemethod>.__get__ in Python 3.11",
      "user": {
        "login": "mschmitzer",
        "id": 3186654,
        "node_id": "MDQ6VXNlcjMxODY2NTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3186654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mschmitzer",
        "html_url": "https://github.com/mschmitzer",
        "followers_url": "https://api.github.com/users/mschmitzer/followers",
        "following_url": "https://api.github.com/users/mschmitzer/following{/other_user}",
        "gists_url": "https://api.github.com/users/mschmitzer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mschmitzer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mschmitzer/subscriptions",
        "organizations_url": "https://api.github.com/users/mschmitzer/orgs",
        "repos_url": "https://api.github.com/users/mschmitzer/repos",
        "events_url": "https://api.github.com/users/mschmitzer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mschmitzer/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "rhettinger",
        "id": 1623689,
        "node_id": "MDQ6VXNlcjE2MjM2ODk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1623689?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rhettinger",
        "html_url": "https://github.com/rhettinger",
        "followers_url": "https://api.github.com/users/rhettinger/followers",
        "following_url": "https://api.github.com/users/rhettinger/following{/other_user}",
        "gists_url": "https://api.github.com/users/rhettinger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rhettinger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rhettinger/subscriptions",
        "organizations_url": "https://api.github.com/users/rhettinger/orgs",
        "repos_url": "https://api.github.com/users/rhettinger/repos",
        "events_url": "https://api.github.com/users/rhettinger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rhettinger/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "rhettinger",
          "id": 1623689,
          "node_id": "MDQ6VXNlcjE2MjM2ODk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1623689?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rhettinger",
          "html_url": "https://github.com/rhettinger",
          "followers_url": "https://api.github.com/users/rhettinger/followers",
          "following_url": "https://api.github.com/users/rhettinger/following{/other_user}",
          "gists_url": "https://api.github.com/users/rhettinger/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rhettinger/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rhettinger/subscriptions",
          "organizations_url": "https://api.github.com/users/rhettinger/orgs",
          "repos_url": "https://api.github.com/users/rhettinger/repos",
          "events_url": "https://api.github.com/users/rhettinger/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rhettinger/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2023-12-15T08:54:43Z",
      "updated_at": "2024-02-14T22:14:01Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nThere is a change in behavior in Python 3.11 that does not seem to be described in the [\"what's new\" document](https://docs.python.org/3.11/whatsnew/3.11.html).\n\nIn the following code:\n\n```python\nclass A:\n    def meth(self):\n      print(self)\n\nclass B:\n    pass\n\na = A()\nb = B()\nb.meth = a.meth.__get__(b, B)\nb.meth()\n```\n\nThe `b.meth()` call receives `a` as the `self` argument up to Python 3.10, but `b` in 3.11 and 3.12.\n\nThis pattern is [used by the Pyramid framework](https://github.com/Pylons/pyramid/blob/3739a7790ba92c34098df3d804f27a1d8429f9fe/src/pyramid/request.py#L317). The change breaks Pyramid applications that use `add_request_method(someobject.somemethod, \"name\")`.\n\nI have to admit that I do not understand the descriptor protocol (or the documentation of `__get__`) well enough to say whether this is a legitimate use case, but it does exist in the wild.\n\n### CPython versions tested on:\n\n3.9, 3.10, 3.11, 3.12\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-113233\n* gh-115492\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/113157/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/113157/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/113102",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/113102/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/113102/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/113102/events",
      "html_url": "https://github.com/python/cpython/issues/113102",
      "id": 2041548832,
      "node_id": "I_kwDOBN0Z8c55r5Ag",
      "number": 113102,
      "title": "Should setting the line number be allowed for `PY_RESUME` events?",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2023-12-14T11:58:57Z",
      "updated_at": "2024-03-15T19:13:58Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Currently, setting the line number of a frame in a `PY_RESUME` event is allowed, but was accidentally broken in https://github.com/python/cpython/commit/d27acd4461ee603bcf6f4a81ca6afccc9fc87331\r\n\r\nHowever, setting a line number is **not** allowed for `PY_START` events.\r\nHistorically both these events were treated as `CALL` events by `sys.settrace`, and setting the line number was not allowed.\r\n\r\nI think, that for consistency, setting the line number of a frame in a `PY_RESUME` event should not be allowed.\r\n\r\n@gaogaotiantian thoughts?\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-114349\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/113102/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/113102/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/113081",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/113081/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/113081/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/113081/events",
      "html_url": "https://github.com/python/cpython/issues/113081",
      "id": 2040800053,
      "node_id": "I_kwDOBN0Z8c55pCM1",
      "number": 113081,
      "title": "Colorize pdb",
      "user": {
        "login": "gaogaotiantian",
        "id": 13121107,
        "node_id": "MDQ6VXNlcjEzMTIxMTA3",
        "avatar_url": "https://avatars.githubusercontent.com/u/13121107?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaogaotiantian",
        "html_url": "https://github.com/gaogaotiantian",
        "followers_url": "https://api.github.com/users/gaogaotiantian/followers",
        "following_url": "https://api.github.com/users/gaogaotiantian/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaogaotiantian/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaogaotiantian/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaogaotiantian/subscriptions",
        "organizations_url": "https://api.github.com/users/gaogaotiantian/orgs",
        "repos_url": "https://api.github.com/users/gaogaotiantian/repos",
        "events_url": "https://api.github.com/users/gaogaotiantian/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaogaotiantian/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2023-12-14T02:47:56Z",
      "updated_at": "2023-12-14T02:51:06Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\n`pdb` is one of the most interactive module in stdlib. Now that we already put ANSI colors in traceback, we should do it in `pdb` as well.\n\nWe can start small, but I think eventually we want `pdb` colorized well.\n\n### Has this already been discussed elsewhere?\n\nThis is a minor feature, which does not need previous discussion elsewhere\n\n### Links to previous discussion of this feature:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-113082\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/113081/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/113081/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/113027",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/113027/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/113027/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/113027/events",
      "html_url": "https://github.com/python/cpython/issues/113027",
      "id": 2038336963,
      "node_id": "I_kwDOBN0Z8c55fo3D",
      "number": 113027,
      "title": "test_variable_tzname fails in 3.11.7 and 3.12.1 due to timezone change",
      "user": {
        "login": "pablogsal",
        "id": 11718525,
        "node_id": "MDQ6VXNlcjExNzE4NTI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablogsal",
        "html_url": "https://github.com/pablogsal",
        "followers_url": "https://api.github.com/users/pablogsal/followers",
        "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
        "organizations_url": "https://api.github.com/users/pablogsal/orgs",
        "repos_url": "https://api.github.com/users/pablogsal/repos",
        "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pablogsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 11,
      "created_at": "2023-12-12T18:27:38Z",
      "updated_at": "2024-11-06T13:42:20Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Commit 46407fe79ca78051cbf6c80e8b8e70a228f9fa50 seems to not be generic enough because running the test in a system where tests where passing before now fails:\r\n\r\n```\r\n\r\n ======================================================================\r\nFAIL: test_variable_tzname (test.test_email.test_utils.LocaltimeTests.test_variable_tzname)\r\n] ----------------------------------------------------------------------\r\n Traceback (most recent call last):\r\n File \"python3.12/test/support/__init__.py\", line 890, in inner\r\n return func(*args, **kwds)\r\nFile \"python3.12/test/test_email/test_utils.py\", line 152, in test_variable_tzname\r\nself.assertEqual(t1.tzname(), 'MSK')\r\nAssertionError: 'Europe' != 'MSK'\r\n - Europe\r\n+ MSK\r\n----------------------------------------------------------------------\r\n```\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-113821\n* gh-113831\n* gh-113832\n* gh-113835\n* gh-126438\n* gh-126477\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "serhiy-storchaka",
        "id": 3659035,
        "node_id": "MDQ6VXNlcjM2NTkwMzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/serhiy-storchaka",
        "html_url": "https://github.com/serhiy-storchaka",
        "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
        "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
        "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
        "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
        "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/113027/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/113027/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/112953",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/112953/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/112953/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/112953/events",
      "html_url": "https://github.com/python/cpython/issues/112953",
      "id": 2035004125,
      "node_id": "I_kwDOBN0Z8c55S7Ld",
      "number": 112953,
      "title": "idlelib/News3.txt for 3.13.0 and backports",
      "user": {
        "login": "terryjreedy",
        "id": 19036496,
        "node_id": "MDQ6VXNlcjE5MDM2NDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/19036496?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/terryjreedy",
        "html_url": "https://github.com/terryjreedy",
        "followers_url": "https://api.github.com/users/terryjreedy/followers",
        "following_url": "https://api.github.com/users/terryjreedy/following{/other_user}",
        "gists_url": "https://api.github.com/users/terryjreedy/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/terryjreedy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/terryjreedy/subscriptions",
        "organizations_url": "https://api.github.com/users/terryjreedy/orgs",
        "repos_url": "https://api.github.com/users/terryjreedy/repos",
        "events_url": "https://api.github.com/users/terryjreedy/events{/privacy}",
        "received_events_url": "https://api.github.com/users/terryjreedy/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018676472,
          "node_id": "LA_kwDOBN0Z8c7viCL4",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-IDLE",
          "name": "topic-IDLE",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "terryjreedy",
        "id": 19036496,
        "node_id": "MDQ6VXNlcjE5MDM2NDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/19036496?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/terryjreedy",
        "html_url": "https://github.com/terryjreedy",
        "followers_url": "https://api.github.com/users/terryjreedy/followers",
        "following_url": "https://api.github.com/users/terryjreedy/following{/other_user}",
        "gists_url": "https://api.github.com/users/terryjreedy/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/terryjreedy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/terryjreedy/subscriptions",
        "organizations_url": "https://api.github.com/users/terryjreedy/orgs",
        "repos_url": "https://api.github.com/users/terryjreedy/repos",
        "events_url": "https://api.github.com/users/terryjreedy/events{/privacy}",
        "received_events_url": "https://api.github.com/users/terryjreedy/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "terryjreedy",
          "id": 19036496,
          "node_id": "MDQ6VXNlcjE5MDM2NDk2",
          "avatar_url": "https://avatars.githubusercontent.com/u/19036496?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/terryjreedy",
          "html_url": "https://github.com/terryjreedy",
          "followers_url": "https://api.github.com/users/terryjreedy/followers",
          "following_url": "https://api.github.com/users/terryjreedy/following{/other_user}",
          "gists_url": "https://api.github.com/users/terryjreedy/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/terryjreedy/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/terryjreedy/subscriptions",
          "organizations_url": "https://api.github.com/users/terryjreedy/orgs",
          "repos_url": "https://api.github.com/users/terryjreedy/repos",
          "events_url": "https://api.github.com/users/terryjreedy/events{/privacy}",
          "received_events_url": "https://api.github.com/users/terryjreedy/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2023-12-11T07:28:38Z",
      "updated_at": "2023-12-17T08:14:18Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Branch 'main' became 3.13.0a0 as of 3.12.0 beta 1: 2023-05-22\r\nHowever, unless an patch is not backported to 3.12.b#, idlelib/News3.txt items continue going under\r\nWhat's New in IDLE 3.12.0 on both main and 3.12 until 3.12.0rc?, 2023-08 or so.  (None for 3.12.0b_.)\r\nSubsequent news items go under\r\nWhat's New in IDLE 3.13.0 (new header) on main branch\r\nWhat's New in IDLE 3.12.z (new header) on 3.12 branch\r\nWhat's New in IDLE 3.11.z (existing) on 3.11 branch\r\nIn other words, idlelib News3.txt is handled as if main were branched off as of about 3.x.0rc1.\r\nThis is different from the changelog attached to What's New in 3.x.\r\n\r\nRelease peps -- needed for proposed and actual release dates.\r\n3.11 [PEP-664](https://peps.python.org/pep-0664/)\r\n3.12 [PEP-693](https://peps.python.org/pep-0693/)\r\n3.13 [PEP-719](https://peps.python.org/pep-0719/)\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-112988\r\n* gh-112990\n* gh-112992\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/112953/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/112953/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/112945",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/112945/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/112945/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/112945/events",
      "html_url": "https://github.com/python/cpython/issues/112945",
      "id": 2034548344,
      "node_id": "I_kwDOBN0Z8c55RL54",
      "number": 112945,
      "title": "Logging: Allow TLS configuration for SysLogHandler ",
      "user": {
        "login": "epsilon-0",
        "id": 8932410,
        "node_id": "MDQ6VXNlcjg5MzI0MTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8932410?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/epsilon-0",
        "html_url": "https://github.com/epsilon-0",
        "followers_url": "https://api.github.com/users/epsilon-0/followers",
        "following_url": "https://api.github.com/users/epsilon-0/following{/other_user}",
        "gists_url": "https://api.github.com/users/epsilon-0/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/epsilon-0/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/epsilon-0/subscriptions",
        "organizations_url": "https://api.github.com/users/epsilon-0/orgs",
        "repos_url": "https://api.github.com/users/epsilon-0/repos",
        "events_url": "https://api.github.com/users/epsilon-0/events{/privacy}",
        "received_events_url": "https://api.github.com/users/epsilon-0/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2023-12-10T21:50:41Z",
      "updated_at": "2023-12-14T21:30:01Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\nThe syslog handler doesn\u2019t have support for sending logs to a TLS syslog address. The acceptance of TLS for logging is evident by current presence of the SMTP log handler which supports the secure parameter. Modern syslog servers now have support for TLS listeners - rsyslog (the default on ubuntu) - [RSyslog Documentation - rsyslog](https://www.rsyslog.com/doc/master/tutorials/tls.html) and syslog-ng - [syslog-ng Open Source Edition 3.16 - Mutual authentication using TLS](https://www.syslog-ng.com/technical-documents/doc/syslog-ng-open-source-edition/3.16/mutual-authentication-using-tls).\n\nThe implementation could be done by implementing the TLS configuration inside the SysLogHandler, or allowing the user to pre-configure the TLS socket by doing the wrapping themselves and only passing final the socket to SysLogHandler.\n\nThere are a couple of unmaintained pypi packages that tried to make a TLS syslog handler but don\u2019t seem to have been maintained for a long time. For a feature like this, it makes sense to have it in core python rather than an unmaintained package.\n\n### Has this already been discussed elsewhere?\n\nNo response given\n\n### Links to previous discussion of this feature:\n\nhttps://discuss.python.org/t/allow-passing-a-pre-configured-socket-mainly-for-tls-for-sysloghandler/40785\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-112946\n* gh-112947\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/112945/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/112945/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/112346",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/112346/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/112346/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/112346/events",
      "html_url": "https://github.com/python/cpython/issues/112346",
      "id": 2008652802,
      "node_id": "I_kwDOBN0Z8c53uZwC",
      "number": 112346,
      "title": "gzip.compress(..., mtime=0) in cpython 3.11+ unexpectedly sets OS byte in gzip header",
      "user": {
        "login": "dennisvang",
        "id": 29799340,
        "node_id": "MDQ6VXNlcjI5Nzk5MzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/29799340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dennisvang",
        "html_url": "https://github.com/dennisvang",
        "followers_url": "https://api.github.com/users/dennisvang/followers",
        "following_url": "https://api.github.com/users/dennisvang/following{/other_user}",
        "gists_url": "https://api.github.com/users/dennisvang/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dennisvang/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dennisvang/subscriptions",
        "organizations_url": "https://api.github.com/users/dennisvang/orgs",
        "repos_url": "https://api.github.com/users/dennisvang/repos",
        "events_url": "https://api.github.com/users/dennisvang/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dennisvang/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 14,
      "created_at": "2023-11-23T18:11:46Z",
      "updated_at": "2024-06-17T05:47:49Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n## description \r\n\r\nUsing [`gzip.compress()`][2] with `mtime=0` in 3.8<=cpython<=3.10, the `OS` byte, i.e. the 10th byte in the [GZIP header][1], is set to `255` \"unknown\" (also see e.g. #83302):\r\n\r\nhttps://github.com/python/cpython/blob/dc0adb44d8d4a33121deaad398f24b5d8ae36d19/Lib/gzip.py#L599\r\n\r\nHowever, in cpython 3.11 and 3.12, the `OS` byte is suddenly set to a \"known\" value, e.g. `3` (\"Unix\") on Ubuntu.\r\n\r\nThis is *not* mentioned in the [changelog for Python 3.11][3].\r\n\r\nThis may lead to problems in the context of [reproducible builds][5]. In our case, hash checking fails after decompressing and re-compressing a gzipped archive.\r\n\r\n## how to reproduce\r\n\r\nHere's an example, where byte 10 is `\\xff` in python 3.10 and `\\x03` in python 3.11:\r\n\r\n```python\r\n~ $ python\r\nPython 3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0] on linux\r\n>>> import gzip\r\n>>> gzip.compress(b'', mtime=0)\r\nb'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x02\\xff\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\r\n\r\n~ $ pyenv shell 3.11\r\n~ $ python\r\nPython 3.11.6 (main, Nov 23 2023, 17:30:16) [GCC 11.4.0] on linux\r\n>>> import gzip\r\n>>> gzip.compress(b'', mtime=0)\r\nb'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x02\\x03\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\r\n```\r\n\r\n## cause\r\n\r\nI guess this is caused by python 3.11 delegating the `gzip.compress()` call to `zlib` if `mtime=0`, as mentioned in the [docs][2]:\r\n\r\n>Changed in version 3.11: Speed is improved by compressing all data at once instead of in a streamed fashion. Calls with mtime set to 0 are delegated to [zlib.compress()](https://docs.python.org/3.12/library/zlib.html#zlib.compress) for better speed.\r\n\r\nand source:\r\n\r\nhttps://github.com/python/cpython/blob/89ddea4886942b0c27a778a0ad3f0d5ac5f518f0/Lib/gzip.py#L609-L612\r\n\r\nApparently `zlib` *does* set the `OS` byte.\r\n\r\n[1]: https://datatracker.ietf.org/doc/html/rfc1952#page-7\r\n[2]: https://docs.python.org/3.12/library/gzip.html#gzip.compress\r\n[3]: https://docs.python.org/3.12/whatsnew/3.11.html\r\n[4]: https://github.com/python/cpython/blob/89ddea4886942b0c27a778a0ad3f0d5ac5f518f0/Lib/gzip.py#L612C17-L612C66\r\n[5]: https://reproducible-builds.org/\r\n\r\n### CPython versions tested on:\r\n\r\n3.8, 3.9, 3.10, 3.11, 3.12\r\n\r\n### Operating systems tested on:\r\n\r\nLinux, macOS, Windows\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-114116\n* gh-120480\n* gh-120486\n* gh-120563\n* gh-120612\n* gh-120613\n* gh-120614\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/112346/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/112346/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/112306",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/112306/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/112306/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/112306/events",
      "html_url": "https://github.com/python/cpython/issues/112306",
      "id": 2005337910,
      "node_id": "I_kwDOBN0Z8c53hwc2",
      "number": 112306,
      "title": "What's new in 3.7 incorrectly states PEP 563 will be default in 3.10",
      "user": {
        "login": "davetapley",
        "id": 48232,
        "node_id": "MDQ6VXNlcjQ4MjMy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48232?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davetapley",
        "html_url": "https://github.com/davetapley",
        "followers_url": "https://api.github.com/users/davetapley/followers",
        "following_url": "https://api.github.com/users/davetapley/following{/other_user}",
        "gists_url": "https://api.github.com/users/davetapley/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/davetapley/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/davetapley/subscriptions",
        "organizations_url": "https://api.github.com/users/davetapley/orgs",
        "repos_url": "https://api.github.com/users/davetapley/repos",
        "events_url": "https://api.github.com/users/davetapley/events{/privacy}",
        "received_events_url": "https://api.github.com/users/davetapley/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018743106,
          "node_id": "LA_kwDOBN0Z8c7viSdC",
          "url": "https://api.github.com/repos/python/cpython/labels/easy",
          "name": "easy",
          "color": "0e8a16",
          "default": false,
          "description": null
        },
        {
          "id": 4030784939,
          "node_id": "LA_kwDOBN0Z8c7wQOWr",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-typing",
          "name": "topic-typing",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2023-11-22T00:03:48Z",
      "updated_at": "2024-06-21T15:49:53Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Documentation\r\n\r\nIt was correct at the time, but is a bit confusing now:\r\n\r\n> # PEP 563: Postponed Evaluation of Annotations\r\n> ...\r\n> It will become the default in Python 3.10.\r\n\r\nhttps://docs.python.org/3/whatsnew/3.7.html#pep-563-postponed-evaluation-of-annotations\r\n\r\n---\r\n\r\nBut this is no longer the case as clarified:\r\n> from __future__ import annotations was previously scheduled to become mandatory in Python 3.10, but the Python Steering Council twice decided to delay the change ([announcement for Python 3.10](https://mail.python.org/archives/list/python-dev@python.org/message/CLVXXPQ2T2LQ5MP2Y53VVQFCXYWQJHKZ/); [announcement for Python 3.11](https://mail.python.org/archives/list/python-dev@python.org/message/VIZEBX5EYMSYIJNDBF6DMUMZOCWHARSO/)). No final decision has been made yet. See also [PEP 563](https://peps.python.org/pep-0563/) and [PEP 649](https://peps.python.org/pep-0649/).\r\n\r\nhttps://docs.python.org/3/library/__future__.html\r\n\r\n---\r\n\r\nConfused me as I learned of PEP 563 via the 3.7 \"What's new\" link being top search result.\r\nI first _assumed_ it wasn't the issue I was seeing as I'm on 3.11, but turns out it was,\r\nand my issue went away when I added `__future__` import \ud83d\ude11 \n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-119160\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/112306/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/112306/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/112302",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/112302/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/112302/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/112302/events",
      "html_url": "https://github.com/python/cpython/issues/112302",
      "id": 2005036245,
      "node_id": "I_kwDOBN0Z8c53gmzV",
      "number": 112302,
      "title": "Add Software Bill of Materials (SBOM) for Python releases",
      "user": {
        "login": "sethmlarson",
        "id": 18519037,
        "node_id": "MDQ6VXNlcjE4NTE5MDM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/18519037?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sethmlarson",
        "html_url": "https://github.com/sethmlarson",
        "followers_url": "https://api.github.com/users/sethmlarson/followers",
        "following_url": "https://api.github.com/users/sethmlarson/following{/other_user}",
        "gists_url": "https://api.github.com/users/sethmlarson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sethmlarson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sethmlarson/subscriptions",
        "organizations_url": "https://api.github.com/users/sethmlarson/orgs",
        "repos_url": "https://api.github.com/users/sethmlarson/repos",
        "events_url": "https://api.github.com/users/sethmlarson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sethmlarson/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 544837556,
          "node_id": "MDU6TGFiZWw1NDQ4Mzc1NTY=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-security",
          "name": "type-security",
          "color": "b60205",
          "default": false,
          "description": "A security issue"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2023-11-21T20:00:15Z",
      "updated_at": "2024-02-14T19:47:30Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\n### Proposal:\r\n\r\nSoftware Bill of Materials (SBOM) is a format for tracking software and its components. This information will also soon become relevant for Python users due to [this Executive Order](https://www.federalregister.gov/documents/2021/06/02/2021-11592/software-bill-of-materials-elements-and-considerations) and other requirements elsewhere in the world. Instead of requiring each individual consumer and redistributor to create their own documents we can provide an authoritative document for each Python release.\r\n\r\nThis would not require a change to Python itself, instead I imagine the SBOM files would be provided alongside the release artifacts on python.org/downloads.\r\n\r\nMy goal with this project is to provide this information to consumers with minimal modification to core developer workflows. I've experimented with [creating SBOMs for past and present Python versions](https://github.com/sethmlarson/cpython-sbom) and have found that most of the work comes when dependencies are updated and in those cases the SBOM metadata needs to also be updated (ie: versions, hashes). Beyond that the rest can be automated downstream with the Python release tooling.\r\n\r\nI'm happy to make all the changes required to implement this proposal. I'm also happy to be the reviewer for all SBOM related PRs while I'm the Security Developer-in-Residence.\r\n\r\n## Proposed changes\r\n\r\n* Create a file which tracks all bundled dependency paths and ignored files (ie `Modules/_hacl/...`)\r\n* Add a new makefile target `regen-sbom` which regenerates the SBOM file containing hashes\r\n* Run this target as a part of CI (via `regen-all`) to ensure that all updates to dependencies require an update to the SBOM metadata.\r\n\r\nThen downstream in the release-tools repository:\r\n\r\n* Grab the SBOM file for each tagged release to use as a base for each artifact\r\n* Generate metadata for that Python release (files, relationships, etc).\r\n* For each artifact, there may be specific dependencies pulled in that will be recorded (ie https://github.com/python/cpython-source-deps, https://github.com/python/cpython-bin-deps)\r\n* Upload SBOM files to python.org/downloads similar to Sigstore signatures.\r\n\r\n## Example of updating dependencies\r\n\r\n* Pull a new version of hacl-star, for example.\r\n* `make regen-all` would cause changes to the checked in SBOM file. This would either fail in CI or require user to inspect the SBOM locally.\r\n* Dev would read the instructions on how to update the version of the SBOM. Usually this would only require updating the version number and committing the generated changes to file checksums.\r\n* Tool would check consistency of version information in other identifiers (PURL, CPE, download URL, etc)\r\n\r\n### Sub-issues\r\n\r\n- Create an informational PEP on SBOMs in CPython\r\n- Create a \"What's New\" entry for Python 3.13\r\n- https://github.com/python/pythondotorg/issues/2339\r\n- https://github.com/python/devguide/issues/1241\r\n- https://github.com/python/cpython/issues/112844\r\n- https://github.com/python/pythondotorg/issues/2340\r\n\r\n### Has this already been discussed elsewhere?\r\n\r\nI have already discussed this feature proposal on Discourse\r\n\r\n### Links to previous discussion of this feature:\r\n\r\nI've created [a Discourse topic](https://discuss.python.org/t/create-and-distribute-software-bill-of-materials-sbom-for-python-artifacts/39293) to discuss the impact to core developers and maintenance.\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-112303\r\n* gh-112854\r\n* gh-113490\n* gh-114730\n* gh-115038\n* gh-115088\n* gh-115360\n* gh-115486\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/112302/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/112302/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/112215",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/112215/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/112215/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/112215/events",
      "html_url": "https://github.com/python/cpython/issues/112215",
      "id": 1999845350,
      "node_id": "I_kwDOBN0Z8c53Mzfm",
      "number": 112215,
      "title": "3.12 setrecursionlimit is ignored in connection with `@functools.cache`",
      "user": {
        "login": "PeterLuschny",
        "id": 876830,
        "node_id": "MDQ6VXNlcjg3NjgzMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/876830?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PeterLuschny",
        "html_url": "https://github.com/PeterLuschny",
        "followers_url": "https://api.github.com/users/PeterLuschny/followers",
        "following_url": "https://api.github.com/users/PeterLuschny/following{/other_user}",
        "gists_url": "https://api.github.com/users/PeterLuschny/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/PeterLuschny/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/PeterLuschny/subscriptions",
        "organizations_url": "https://api.github.com/users/PeterLuschny/orgs",
        "repos_url": "https://api.github.com/users/PeterLuschny/repos",
        "events_url": "https://api.github.com/users/PeterLuschny/events{/privacy}",
        "received_events_url": "https://api.github.com/users/PeterLuschny/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "markshannon",
          "id": 9448417,
          "node_id": "MDQ6VXNlcjk0NDg0MTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/markshannon",
          "html_url": "https://github.com/markshannon",
          "followers_url": "https://api.github.com/users/markshannon/followers",
          "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
          "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
          "organizations_url": "https://api.github.com/users/markshannon/orgs",
          "repos_url": "https://api.github.com/users/markshannon/repos",
          "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/markshannon/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 40,
      "created_at": "2023-11-17T20:06:22Z",
      "updated_at": "2024-11-27T23:07:28Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n# A minimal example:\r\n\r\n```python\r\n\r\n#  fib.py \r\nimport sys\r\nsys.setrecursionlimit(2000)\r\n\r\nfrom functools import cache\r\n\r\n@cache\r\ndef fib(n):\r\n    if n<1: return 0\r\n    if n==1: return 1\r\n    return fib(n-1) + fib(n-2)\r\n\r\nprint(fib(500))\r\n```\r\n\r\n### CPython versions tested on:\r\n\r\nCPython main branch\r\n\r\n### Operating systems tested on:\r\n\r\nWindows\r\n\r\nEdit: This (simpler) example is from @dimpase .\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-113397\n* gh-113403\n* gh-115083\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/112215/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/112215/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/112014",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/112014/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/112014/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/112014/events",
      "html_url": "https://github.com/python/cpython/issues/112014",
      "id": 1989787759,
      "node_id": "I_kwDOBN0Z8c52mcBv",
      "number": 112014,
      "title": "Allow memoryview objects to support ctypes Arrays",
      "user": {
        "login": "rianhunter",
        "id": 120658,
        "node_id": "MDQ6VXNlcjEyMDY1OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120658?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rianhunter",
        "html_url": "https://github.com/rianhunter",
        "followers_url": "https://api.github.com/users/rianhunter/followers",
        "following_url": "https://api.github.com/users/rianhunter/following{/other_user}",
        "gists_url": "https://api.github.com/users/rianhunter/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rianhunter/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rianhunter/subscriptions",
        "organizations_url": "https://api.github.com/users/rianhunter/orgs",
        "repos_url": "https://api.github.com/users/rianhunter/repos",
        "events_url": "https://api.github.com/users/rianhunter/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rianhunter/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 2211400743,
          "node_id": "MDU6TGFiZWwyMjExNDAwNzQz",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-ctypes",
          "name": "topic-ctypes",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2023-11-13T02:49:11Z",
      "updated_at": "2023-11-13T02:57:52Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Proposal:\n\nCurrently this fails:\n\n```python\nimport ctypes\n\nArrayType = (ctypes.c_ubyte * 10)\n\na = ArrayType()\nb = memoryview(a)\nb[0] = 1 # this throws an exception but it doesn't have to \n```\n\nI already created a PR to address it: #112013  \n\n\n\n### Has this already been discussed elsewhere?\n\nThis is a minor feature, which does not need previous discussion elsewhere\n\n### Links to previous discussion of this feature:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-112013\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/112014/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/112014/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/111924",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/111924/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/111924/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/111924/events",
      "html_url": "https://github.com/python/cpython/issues/111924",
      "id": 1986563174,
      "node_id": "I_kwDOBN0Z8c52aIxm",
      "number": 111924,
      "title": "Avoid changing the PYMEM_DOMAIN_RAW allocator during initialization and finalization",
      "user": {
        "login": "colesbury",
        "id": 655866,
        "node_id": "MDQ6VXNlcjY1NTg2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/colesbury",
        "html_url": "https://github.com/colesbury",
        "followers_url": "https://api.github.com/users/colesbury/followers",
        "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
        "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
        "organizations_url": "https://api.github.com/users/colesbury/orgs",
        "repos_url": "https://api.github.com/users/colesbury/repos",
        "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
        "received_events_url": "https://api.github.com/users/colesbury/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2023-11-09T23:13:07Z",
      "updated_at": "2024-12-16T20:19:41Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\nCPython current temporarily changes `PYMEM_DOMAIN_RAW` to the default allocator during initialization and shutdown. The motivation is to ensure that core runtime structures are allocated and freed using the same allocator. However, modifying the current allocator changes global state and is not thread-safe even with the GIL. Other threads may be allocating or freeing objects use `PYMEM_DOMAIN_RAW`; they are not required to hold the GIL to call `PyMem_RawMalloc`/`PyMem_RawFree`.\r\n\r\nWe can avoid changing global state while still ensuring that we use a consistent allocator during initialization and shutdown.\r\n\r\n### `PyThread_type_lock`\r\n\r\nMany of the runtime structures are `PyThread_type_lock` objects. We can avoid allocation/freeing entirely for these locks by using `PyMutex` or `PyRawMutex` instead.\r\n\r\nhttps://github.com/python/cpython/blob/b9f814ce6fdc2fd636bb01e60c60f3ed708a245f/Python/pystate.c#L396-L418\r\n\r\n### Calls to `PyMem_RawMalloc`, `PyMem_RawCalloc`, `PyMem_RawFree`, etc.\r\n\r\nFor the other calls to `PyMem_RawMalloc`, etc. where we *know* we want to use the default allocator, we should directly call a new internal-only function that always uses the default allocator. This will avoid unnecessarily modifying global state.\r\n\r\nFor example, we can add a new function `_PyMem_DefaultRawMalloc` that behaves like `PyMem_RawMalloc`, except that it is not modifiable by `_PyMem_SetDefaultAllocator`.\r\n\r\nFor an example implementation in the nogil-3.12 fork, see https://github.com/colesbury/nogil-3.12/commit/d13c63dee9.\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-112207\r\n* gh-125321\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/111924/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/111924/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/111896",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/111896/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/111896/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/111896/events",
      "html_url": "https://github.com/python/cpython/issues/111896",
      "id": 1985894918,
      "node_id": "I_kwDOBN0Z8c52XloG",
      "number": 111896,
      "title": "Use a more efficient representation of the micro-op sequence in the tier 2 interpreter than in the tier 2 IR.",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2023-11-09T15:38:44Z",
      "updated_at": "2024-09-27T03:10:59Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "The representation of tier 2 micro-ops is as follows:\r\n```\r\ntypedef struct {\r\n    uint32_t opcode;\r\n    uint32_t oparg;\r\n    uint64_t operand;  // A cache entry\r\n} _PyUOpInstruction;\r\n```\r\nwhich is 16 bytes per micro-op (not so \"micro\").\r\n \r\nThis is fine for an ephemeral IR in a buffer, but uses too much memory and is too slow for interpretation.\r\n\r\nTier 1 instructions are formed of 1 or more 16 bit \"code unit\"s. \r\nWe should do the same for tier 2, although it probably makes sense to use 32 bit code units:\r\n```\r\ntypedef union {\r\n    uint32_t operand;\r\n    struct {\r\n        uint16_t code;\r\n        uint16_t arg;\r\n    } op;\r\n} _PyUopCodeUnit;\r\n```\r\nAn instruction with just an oparg or a 16 bit cache entry will fit into a single code unit. Other instructions will fit into 2 or 3.\r\nThis should reduce the size of the code to 30-40% of its current size. With fewer memory loads and less cache pressure, we should expect a decent speedup as well.\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-111901\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/111896/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/111896/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/111735",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/111735/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/111735/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/111735/events",
      "html_url": "https://github.com/python/cpython/issues/111735",
      "id": 1977293510,
      "node_id": "I_kwDOBN0Z8c512xrG",
      "number": 111735,
      "title": "`Doc/library/turtle.rst` doctests are failing when `tkinter` is not present",
      "user": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018676065,
          "node_id": "LA_kwDOBN0Z8c7viCFh",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-tkinter",
          "name": "topic-tkinter",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "sobolevn",
          "id": 4660275,
          "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sobolevn",
          "html_url": "https://github.com/sobolevn",
          "followers_url": "https://api.github.com/users/sobolevn/followers",
          "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
          "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
          "organizations_url": "https://api.github.com/users/sobolevn/orgs",
          "repos_url": "https://api.github.com/users/sobolevn/repos",
          "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sobolevn/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2023-11-04T11:35:53Z",
      "updated_at": "2023-11-04T11:54:36Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\nThere are multiple places where `:skipif: _tkinter is None` is missing. So, local builds are failing with something like:\r\n\r\n```pytb\r\nDocument: library/turtle\r\n------------------------\r\n\r\nWarning, treated as error:\r\n**********************************************************************\r\nFile \"library/turtle.rst\", line 2797, in default\r\nFailed example:\r\n    for turtle in turtles():\r\n         turtle.reset()\r\nException raised:\r\n    Traceback (most recent call last):\r\n      File \"/Users/sobolev/Desktop/cpython2/Lib/doctest.py\", line 1374, in __run\r\n        exec(compile(example.source, filename, \"single\",\r\n      File \"<doctest default[0]>\", line 1, in <module>\r\n        for turtle in turtles():\r\n                      ^^^^^^^\r\n    NameError: name 'turtles' is not defined\r\n\r\nmake[1]: *** [build] Error 2\r\nTesting of doctests in the sources finished, look at the results in build/doctest/output.txt\r\nmake: *** [doctest] Error 1\r\n```\r\n\r\nI have a PR ready.\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-111736\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/111735/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/111735/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/111609",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/111609/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/111609/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/111609/events",
      "html_url": "https://github.com/python/cpython/issues/111609",
      "id": 1972661399,
      "node_id": "I_kwDOBN0Z8c51lGyX",
      "number": 111609,
      "title": "`end_offset` is ignored in subclasses of SyntaxError (3.12-only)",
      "user": {
        "login": "stbech",
        "id": 63868629,
        "node_id": "MDQ6VXNlcjYzODY4NjI5",
        "avatar_url": "https://avatars.githubusercontent.com/u/63868629?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stbech",
        "html_url": "https://github.com/stbech",
        "followers_url": "https://api.github.com/users/stbech/followers",
        "following_url": "https://api.github.com/users/stbech/following{/other_user}",
        "gists_url": "https://api.github.com/users/stbech/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/stbech/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/stbech/subscriptions",
        "organizations_url": "https://api.github.com/users/stbech/orgs",
        "repos_url": "https://api.github.com/users/stbech/repos",
        "events_url": "https://api.github.com/users/stbech/events{/privacy}",
        "received_events_url": "https://api.github.com/users/stbech/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6933214501,
          "node_id": "LA_kwDOBN0Z8c8AAAABnUB1JQ",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-repl",
          "name": "topic-repl",
          "color": "0052cc",
          "default": false,
          "description": "Related to the interactive shell"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 12,
      "created_at": "2023-11-01T16:05:04Z",
      "updated_at": "2024-12-11T15:39:47Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nWhen I tried to implement a subclass of `SyntaxError`, the exception details ignored the `end_offset`-variable and just showed one caret at the position of `offset`.\n\n```python\nraise SyntaxError(\"Error message\", (None, 1, 5, 'a = sin(3)', 1, 9))\n```\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<string>\", line 1\n    a = sin(3)\n        ^^^^\nSyntaxError: Error message\n```\n\n```python\nclass CustomSyntaxError(SyntaxError):\n    pass\nraise CustomSyntaxError(\"Error message\", (None, 1, 5, 'a = sin(3)', 1, 9))\n```\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<string>\", line 1\n    a = sin(3)\n        ^\nCustomSyntaxError: Error message\n```\n\n\n### CPython versions tested on:\n\n3.11, 3.12\n\n### Operating systems tested on:\n\nWindows\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-127554\n* gh-127830\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/111609/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/111609/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/111506",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/111506/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/111506/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/111506/events",
      "html_url": "https://github.com/python/cpython/issues/111506",
      "id": 1968831382,
      "node_id": "I_kwDOBN0Z8c51WfuW",
      "number": 111506,
      "title": "`--disable-gil` builds are not compatible with the limited API",
      "user": {
        "login": "colesbury",
        "id": 655866,
        "node_id": "MDQ6VXNlcjY1NTg2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/colesbury",
        "html_url": "https://github.com/colesbury",
        "followers_url": "https://api.github.com/users/colesbury/followers",
        "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
        "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
        "organizations_url": "https://api.github.com/users/colesbury/orgs",
        "repos_url": "https://api.github.com/users/colesbury/repos",
        "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
        "received_events_url": "https://api.github.com/users/colesbury/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4019060898,
          "node_id": "LA_kwDOBN0Z8c7vjgCi",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-C-API",
          "name": "topic-C-API",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 8,
      "created_at": "2023-10-30T17:01:12Z",
      "updated_at": "2024-12-04T08:07:05Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\n\nAfter https://github.com/python/cpython/pull/110764, `--disable-gil` builds of CPython 3.13 are (temporarily) not be compatible with the limited API or the stable ABI due to modifications to the `PyObject` header. For context, this was noted in the [\"Backwards Compatibility\"](https://peps.python.org/pep-0703/#backwards-compatibility) section of PEP 703.\n\nBased on feedback on the related [discuss post](https://discuss.python.org/t/python-abis-and-pep-703/34018/) and discussions with Gregory Smith, Guido, Petr, and Victor at the core dev sprint, I believe we can make changes to the stable ABI so that extension author can target a single stable ABI that supports CPython 3.7+ and both the default build and the `--disable-gil` builds of CPython 3.13+. \n\n**These changes will require a PEP**. This issue is intended just to keep track of the known problem.\n\nThe rough idea is:\n1) make a number of macro/inline functions (e.g., `Py_SIZE`, `Py_TYPE`, `Py_SET_REFCNT`, `Py_REFCNT`) \"real\" function calls in the stable ABI for CPython 3.13+\n2) When targeting CPython <= 3.12, use dynamic symbol lookup (`GetProcAddress` on Windows) or weak symbols (on Linux/macOS) to determine at runtime if the active CPython version provides the desired functions. Otherwise, fall back to old definitions of the above functions for CPython <= 3.12.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-111508\n* gh-112747\n* gh-112794\n* gh-112798\n* gh-117762\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/111506/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/111506/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/111358",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/111358/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/111358/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/111358/events",
      "html_url": "https://github.com/python/cpython/issues/111358",
      "id": 1963471803,
      "node_id": "I_kwDOBN0Z8c51CDO7",
      "number": 111358,
      "title": "shutdown_default_executor / wait_for_tstate_lock deadlock (?) after Ctrl+C",
      "user": {
        "login": "xbeastx",
        "id": 3618442,
        "node_id": "MDQ6VXNlcjM2MTg0NDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3618442?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/xbeastx",
        "html_url": "https://github.com/xbeastx",
        "followers_url": "https://api.github.com/users/xbeastx/followers",
        "following_url": "https://api.github.com/users/xbeastx/following{/other_user}",
        "gists_url": "https://api.github.com/users/xbeastx/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/xbeastx/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/xbeastx/subscriptions",
        "organizations_url": "https://api.github.com/users/xbeastx/orgs",
        "repos_url": "https://api.github.com/users/xbeastx/repos",
        "events_url": "https://api.github.com/users/xbeastx/events{/privacy}",
        "received_events_url": "https://api.github.com/users/xbeastx/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 557226369,
          "node_id": "MDU6TGFiZWw1NTcyMjYzNjk=",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-asyncio",
          "name": "topic-asyncio",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 10,
      "created_at": "2023-10-26T12:37:16Z",
      "updated_at": "2024-02-19T00:01:16Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nBlocking function running in thread executor will produce deadlock on shutdown after Ctrl+C pressed.\n\nHere is minimal reproducing **example**:\n```python\nimport asyncio\nimport time\n\ndef blocking():\n    print(\"sleep start\")\n    time.sleep(1000)\n    print(\"sleep end\")\n\nasync def main():\n    await asyncio.to_thread(blocking)\n\nasyncio.run(main())\n```\n\n**Steps to reproduce**:\n1. Run script\n2. Try press Ctrl+C when blocking func sleeps | Nothing produced\n3. If press Ctrl+C again | Will print KeyboardInterrupt exception but script will still hang\n4. If press Ctrl+C again | Will print one more KeyboardInterrupt and will shutdown.\n\n(Tested on 3.9<=python<=3.12 on Ubuntu 22.04 all have same behaviour)\n\n\n**Output**:\n```shell\n$ python3.11 test.py \nsleep start\n^C^CTraceback (most recent call last):\n  File \"/usr/lib/python3.11/asyncio/runners.py\", line 118, in run\n    return self._loop.run_until_complete(task)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/asyncio/base_events.py\", line 653, in run_until_complete\n    return future.result()\n           ^^^^^^^^^^^^^^^\n  File \"/home/ilya/test.py\", line 13, in main\n    await asyncio.to_thread(blocking)\n  File \"/usr/lib/python3.11/asyncio/threads.py\", line 25, in to_thread\n    return await loop.run_in_executor(None, func_call)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nasyncio.exceptions.CancelledError\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/lib/python3.11/asyncio/runners.py\", line 190, in run\n    return runner.run(main)\n           ^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/asyncio/runners.py\", line 123, in run\n    raise KeyboardInterrupt()\nKeyboardInterrupt\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/ilya/test.py\", line 15, in <module>\n    asyncio.run(main())\n  File \"/usr/lib/python3.11/asyncio/runners.py\", line 189, in run\n    with Runner(debug=debug) as runner:\n  File \"/usr/lib/python3.11/asyncio/runners.py\", line 63, in __exit__\n    self.close()\n  File \"/usr/lib/python3.11/asyncio/runners.py\", line 73, in close\n    loop.run_until_complete(loop.shutdown_default_executor())\n  File \"/usr/lib/python3.11/asyncio/base_events.py\", line 640, in run_until_complete\n    self.run_forever()\n  File \"/usr/lib/python3.11/asyncio/base_events.py\", line 607, in run_forever\n    self._run_once()\n  File \"/usr/lib/python3.11/asyncio/base_events.py\", line 1884, in _run_once\n    event_list = self._selector.select(timeout)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/selectors.py\", line 468, in select\n    fd_event_list = self._selector.poll(timeout, max_ev)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nKeyboardInterrupt\n^CException ignored in: <module 'threading' from '/usr/lib/python3.11/threading.py'>\nTraceback (most recent call last):\n  File \"/usr/lib/python3.11/threading.py\", line 1560, in _shutdown\n    atexit_call()\n  File \"/usr/lib/python3.11/concurrent/futures/thread.py\", line 31, in _python_exit\n    t.join()\n  File \"/usr/lib/python3.11/threading.py\", line 1119, in join\n    self._wait_for_tstate_lock()\n  File \"/usr/lib/python3.11/threading.py\", line 1139, in _wait_for_tstate_lock\n    if lock.acquire(block, timeout):\n       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nKeyboardInterrupt: \n```\n\n**Additional**:\nFound a blog post https://www.roguelynn.com/words/asyncio-sync-and-threaded/ with looks like similar behavior back in 2019 where someone is trying to workaround this.\n\n### CPython versions tested on:\n\n3.9, 3.10, 3.11, 3.12\n\n### Operating systems tested on:\n\nLinux\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-115622\n* gh-115641\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/111358/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/111358/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/111306",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/111306/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/111306/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/111306/events",
      "html_url": "https://github.com/python/cpython/issues/111306",
      "id": 1960877379,
      "node_id": "I_kwDOBN0Z8c504J1D",
      "number": 111306,
      "title": "Out of bounds access when passing duck-typed datetime object to zoneinfo functions",
      "user": {
        "login": "wence-",
        "id": 1126981,
        "node_id": "MDQ6VXNlcjExMjY5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/wence-",
        "html_url": "https://github.com/wence-",
        "followers_url": "https://api.github.com/users/wence-/followers",
        "following_url": "https://api.github.com/users/wence-/following{/other_user}",
        "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
        "organizations_url": "https://api.github.com/users/wence-/orgs",
        "repos_url": "https://api.github.com/users/wence-/repos",
        "events_url": "https://api.github.com/users/wence-/events{/privacy}",
        "received_events_url": "https://api.github.com/users/wence-/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018672955,
          "node_id": "LA_kwDOBN0Z8c7viBU7",
          "url": "https://api.github.com/repos/python/cpython/labels/extension-modules",
          "name": "extension-modules",
          "color": "09fc59",
          "default": false,
          "description": "C modules in the Modules dir"
        },
        {
          "id": 4018848914,
          "node_id": "LA_kwDOBN0Z8c7visSS",
          "url": "https://api.github.com/repos/python/cpython/labels/type-crash",
          "name": "type-crash",
          "color": "b60205",
          "default": false,
          "description": "A hard crash of the interpreter, possibly with a core dump"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2023-10-25T08:48:15Z",
      "updated_at": "2024-02-18T15:13:59Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Crash report\n\n### What happened?\n\n```python\n# As bug.py\nimport zoneinfo\nimport datetime\n\nclass datetime:\n    def toordinal(self):\n        return 0\n    year = 1\n    month = 1\n    day = 1\n    hour = 0\n    minute = 0\n    second = 0\n\ntz = zoneinfo.ZoneInfo(\"America/New_York\")\nts = datetime()\nprint(ts)\nprint(type(ts))\ntz.tzname(ts)\n```\n\nRun as:\n```shell\n$ python -VV\nPython 3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0]\n$ python\nPython 3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from bug import *\n<bug.datetime object at 0x7ff4716e0e20>\n<class 'bug.datetime'>\n[1]    14420 segmentation fault (core dumped)  python\n```\n\nOn trunk (with valgrind/pydebug/assertions enabled):\n```shell\n$ ./python -VV\nPython 3.13.0a1+ (heads/main-dirty:9bb202a1a9, Oct 24 2023, 15:41:54) [GCC 11.4.0]\n$ valgrind ./python -c \"from bug import *\"\n==14548== Memcheck, a memory error detector\n==14548== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==14548== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info\n==14548== Command: ./python -c from\\ bug\\ import\\ *\n==14548== \n<bug.datetime object at 0x5d920d0>\n<class 'bug.datetime'>\n==14548== Invalid read of size 1\n==14548==    at 0x486A147: find_ttinfo (_zoneinfo.c:2206)\n==14548==    by 0x486A27B: zoneinfo_ZoneInfo_tzname_impl (_zoneinfo.c:599)\n==14548==    by 0x486A3B3: zoneinfo_ZoneInfo_tzname (_zoneinfo.c.h:316)\n==14548==    by 0x247F73: method_vectorcall_FASTCALL_KEYWORDS_METHOD (descrobject.c:372)\n==14548==    by 0x235688: _PyObject_VectorcallTstate (pycore_call.h:187)\n==14548==    by 0x2357A7: PyObject_Vectorcall (call.c:327)\n==14548==    by 0x3A7D7C: _PyEval_EvalFrameDefault (generated_cases.c.h:3835)\n==14548==    by 0x3B19C7: _PyEval_EvalFrame (pycore_ceval.h:123)\n==14548==    by 0x3B19C7: _PyEval_Vector (ceval.c:1638)\n==14548==    by 0x3B1A85: PyEval_EvalCode (ceval.c:590)\n==14548==    by 0x383CB4: builtin_exec_impl (bltinmodule.c:1119)\n==14548==    by 0x383E89: builtin_exec (bltinmodule.c.h:540)\n==14548==    by 0x2A5B4A: cfunction_vectorcall_FASTCALL_KEYWORDS (methodobject.c:441)\n==14548==  Address 0x5d920f3 is 3 bytes after a block of size 96 alloc'd\n==14548==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)\n==14548==    by 0x2AF7C4: _PyMem_RawMalloc (obmalloc.c:46)\n==14548==    by 0x2AFCBA: _PyMem_DebugRawAlloc (obmalloc.c:2097)\n==14548==    by 0x2AFCF6: _PyMem_DebugRawMalloc (obmalloc.c:2130)\n==14548==    by 0x2B0C5F: PyMem_RawMalloc (obmalloc.c:663)\n==14548==    by 0x2B309C: _PyObject_Malloc (obmalloc.c:1570)\n==14548==    by 0x2AFCBA: _PyMem_DebugRawAlloc (obmalloc.c:2097)\n==14548==    by 0x2AFCF6: _PyMem_DebugRawMalloc (obmalloc.c:2130)\n==14548==    by 0x2B0748: _PyMem_DebugMalloc (obmalloc.c:2282)\n==14548==    by 0x2B1844: PyObject_Malloc (obmalloc.c:802)\n==14548==    by 0x2D0674: _PyType_AllocNoTrack (typeobject.c:1743)\n==14548==    by 0x2D084B: PyType_GenericAlloc (typeobject.c:1767)\n==14548== \n==14548== \n==14548== HEAP SUMMARY:\n==14548==     in use at exit: 37,361 bytes in 250 blocks\n==14548==   total heap usage: 49,231 allocs, 48,981 frees, 9,694,317 bytes allocated\n==14548== \n==14548== LEAK SUMMARY:\n==14548==    definitely lost: 0 bytes in 0 blocks\n==14548==    indirectly lost: 0 bytes in 0 blocks\n==14548==      possibly lost: 32,141 bytes in 238 blocks\n==14548==    still reachable: 5,220 bytes in 12 blocks\n==14548==         suppressed: 0 bytes in 0 blocks\n==14548== Rerun with --leak-check=full to see details of leaked memory\n==14548== \n==14548== For lists of detected and suppressed errors, rerun with: -s\n==14548== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\n```\n\nI think this bug exhibits in all versions since the introduction of `_zoneinfo.c` in \n62972d9d73e83d6eea157617cc69500ffec9e3f0.\n\nThe problematic code in `find_ttinfo`:\n```\n2188 static _ttinfo *\n2189 find_ttinfo(zoneinfo_state *state, PyZoneInfo_ZoneInfo *self, PyObject *dt)\n[...]\n2202    if (get_local_timestamp(dt, &ts)) {\n2203        return NULL;\n2204    }\n2205\n2206    unsigned char fold = PyDateTime_DATE_GET_FOLD(dt);\n2207    assert(fold < 2);\n2208    int64_t *local_transitions = self->trans_list_wall[fold];\n2209    size_t num_trans = self->num_transitions;\n2210\n2211    if (num_trans && ts < local_transitions[0]) {\n2212        return self->ttinfo_before;\n2213    }\n2214    else if (!num_trans || ts > local_transitions[self->num_transitions - 1]) {\n2215        return find_tzrule_ttinfo(&(self->tzrule_after), ts, fold,\n2216                                  PyDateTime_GET_YEAR(dt));\n```\n\nWe accept an arbitrary `PyObject` as the datetime type, `get_local_timestamp` can succeed (it has fast-path code for the case that `dt` is a `PyDateTime_DateTime` and generic fallback for a duck-typed datatime). However on line 2206 we do an unchecked type-specific access to the `fold` field of a `PyDateTime_DateTime` struct (and similarly on line 2216 for the `year` field). For a general `PyObject` this field doesn't exist and therefore reads arbitrary memory. When assertions are off, this then turns into an out of bounds read on line 2208 and then on line 2211 `local_transitions[0]` derefences a garbage pointer.\n\nI suppose this code should either have slow-path fallbacks for generic duck-typed objects, or else raise if the type is not a `PyDateTime_DateTime`.\n\n\n\n### CPython versions tested on:\n\n3.10, 3.12, CPython main branch\n\n### Operating systems tested on:\n\nLinux\n\n### Output from running 'python -VV' on the command line:\n\n_No response_\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-111458\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/111306/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/111306/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/110812",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/110812/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/110812/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/110812/events",
      "html_url": "https://github.com/python/cpython/issues/110812",
      "id": 1941505600,
      "node_id": "I_kwDOBN0Z8c5zuQZA",
      "number": 110812,
      "title": "It Is Hard to Keep Track of the Instructions In the \"Isolating Extension Modules\" How-to",
      "user": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018993468,
          "node_id": "LA_kwDOBN0Z8c7vjPk8",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-subinterpreters",
          "name": "topic-subinterpreters",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4019060898,
          "node_id": "LA_kwDOBN0Z8c7vjgCi",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-C-API",
          "name": "topic-C-API",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2023-10-13T08:35:57Z",
      "updated_at": "2024-02-14T09:32:07Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Documentation\r\n\r\n(https://docs.python.org/3/howto/isolating-extensions.html)\r\n\r\nThis how-to doc contains a lot of useful information.  However, it can be difficult to keep track of all the instructions it provides.  It is also easy to miss important steps or lose track of everything that needs to be done.  I expect that doing something about this would improve the experience of people porting modules to multi-phase init, reducing their frustration.\r\n\r\nOne thing that could help is a checklist (or two [^1]) that condenses the instructions throughout the doc into a succinct TODO list.  Imagine someone porting a module with the checklist open side-by-side with the code for the module they are porting.  That would make it much easier to keep track of what needs to be (or has been) done.\r\n\r\n[^1]: I expect we would have one checklist for converting a module to multi-phase init and one specifically for converting a static type to a heap type.\r\n\r\nThe checklist would probably go in a later section of the doc, possibly at the very bottom.  However, we would want a distinct link at the very top of the doc.\r\n\r\nCC @encukou\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-111504\n* gh-112147\n* gh-112148\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/110812/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/110812/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/110722",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/110722/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/110722/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/110722/events",
      "html_url": "https://github.com/python/cpython/issues/110722",
      "id": 1938037935,
      "node_id": "I_kwDOBN0Z8c5zhByv",
      "number": 110722,
      "title": "Make regrtest collect test line coverage using sys.monitoring",
      "user": {
        "login": "ambv",
        "id": 55281,
        "node_id": "MDQ6VXNlcjU1Mjgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/55281?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ambv",
        "html_url": "https://github.com/ambv",
        "followers_url": "https://api.github.com/users/ambv/followers",
        "following_url": "https://api.github.com/users/ambv/following{/other_user}",
        "gists_url": "https://api.github.com/users/ambv/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ambv/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ambv/subscriptions",
        "organizations_url": "https://api.github.com/users/ambv/orgs",
        "repos_url": "https://api.github.com/users/ambv/repos",
        "events_url": "https://api.github.com/users/ambv/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ambv/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "ambv",
        "id": 55281,
        "node_id": "MDQ6VXNlcjU1Mjgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/55281?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ambv",
        "html_url": "https://github.com/ambv",
        "followers_url": "https://api.github.com/users/ambv/followers",
        "following_url": "https://api.github.com/users/ambv/following{/other_user}",
        "gists_url": "https://api.github.com/users/ambv/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ambv/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ambv/subscriptions",
        "organizations_url": "https://api.github.com/users/ambv/orgs",
        "repos_url": "https://api.github.com/users/ambv/repos",
        "events_url": "https://api.github.com/users/ambv/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ambv/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "ambv",
          "id": 55281,
          "node_id": "MDQ6VXNlcjU1Mjgx",
          "avatar_url": "https://avatars.githubusercontent.com/u/55281?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ambv",
          "html_url": "https://github.com/ambv",
          "followers_url": "https://api.github.com/users/ambv/followers",
          "following_url": "https://api.github.com/users/ambv/following{/other_user}",
          "gists_url": "https://api.github.com/users/ambv/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ambv/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ambv/subscriptions",
          "organizations_url": "https://api.github.com/users/ambv/orgs",
          "repos_url": "https://api.github.com/users/ambv/repos",
          "events_url": "https://api.github.com/users/ambv/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ambv/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 17,
      "created_at": "2023-10-11T15:05:21Z",
      "updated_at": "2023-11-03T19:10:02Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\nCurrently, there is no good way to collect test line coverage of the standard library.\n\n### `python -m test -T`\n`python -m test -T` is using `sys.settrace` through the `trace` module, which slows things down significantly. Moreover, it is set relatively late, after a ton of standard library modules were already imported, making collecting full coverage from them hard. What's more, this way of collecting coverage doesn't work with `-j`, and we want to switch to `-j0` by default in the test runner since the battle for tests to be fully idempotent is impossible.\n\n### coverage.py?\nWe had a hack in [coverage.py](https://github.com/nedbat/coveragepy) called \"fullcoverage\", which mimicked the `encodings` module to install early, but [it was recently removed](https://github.com/nedbat/coveragepy/commit/7b8dec9a2ef9e0abe50607982b79e6454d0e4ec8#diff-26f42b12b07a860da51cd0a0ceed905677bc71af154752f938ac0b211e76b393) because it didn't work in 3.13 and we haven't been tracking coverage in CI since 2021.\n\n### Use `sys.monitoring`\nI want to use PEP 669 for this because it's faster and works across threads, which will become relevant with PEP 703. The idea is to gather partial coverage in each regrtest worker subprocess and then combine the results through the main process when tests are done.\n\n### Set up monitoring before `site.py`\nTo gather coverage, we need to register a callback for the line event with `sys.monitoring`. Moreover, to get reliable data for this, this gathering needs to start very early in the interpreter, before `site.py` executed, as that triggers a large amount of standard library imports.\n\nThis will need a small addition to the interpreter environment, an environment variable called `PYTHONPRESITE`, which takes a module name. Setting it makes the interpreter attempt to import this module before `site.py` and the `__main__` module are created. To allow for input/output, the module is imported after encodings were loaded, stdout/stderr/stdin have been set, and `open()` was exposed. The module is *not* considered `__main__`, and stays imported after loading, making it possible for tooling loaded later to use data gathered by it.\n\n### Why even gather coverage?\nI don't plan to beat people with a stick because line coverage fell from 81% to 79%.\n\nThere's been a lot of churn lately in terms of test refactors, and it's not entirely clear while reviewing those changes whether we are still running the same checks as before. In effect, I don't feel very confident approving such large changes with rearranged TestCase base classes. In those cases, I run `coverage.py` with some hacks to confirm that we're not losing coverage with the change, but ultimately this is slow,  painful to do, and still generates data that isn't trustworthy.\n\nAn easy way to get simple test line coverage stats without installing anything would solve my issue, and hopefully, more people would then use it.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-110769\n* gh-111710\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/110722/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/110722/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/110616",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/110616/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/110616/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/110616/events",
      "html_url": "https://github.com/python/cpython/issues/110616",
      "id": 1935113992,
      "node_id": "I_kwDOBN0Z8c5zV38I",
      "number": 110616,
      "title": "Move eval-breaker checks into their own micro-ops",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2023-10-10T11:19:10Z",
      "updated_at": "2023-11-28T08:10:04Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Having the eval-breaker checks embedding in the C code for instructions means that they cannot be eliminated by the optimizer, and it can bloat the machine code for those instructions as the code cannot simply de-opt.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-110618\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/110616/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/110616/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/110543",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/110543/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/110543/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/110543/events",
      "html_url": "https://github.com/python/cpython/issues/110543",
      "id": 1932595867,
      "node_id": "I_kwDOBN0Z8c5zMRKb",
      "number": 110543,
      "title": "code.replace() fails to preserve CO_FAST_HIDDEN flag on locals",
      "user": {
        "login": "rokm",
        "id": 5579125,
        "node_id": "MDQ6VXNlcjU1NzkxMjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5579125?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rokm",
        "html_url": "https://github.com/rokm",
        "followers_url": "https://api.github.com/users/rokm/followers",
        "following_url": "https://api.github.com/users/rokm/following{/other_user}",
        "gists_url": "https://api.github.com/users/rokm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rokm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rokm/subscriptions",
        "organizations_url": "https://api.github.com/users/rokm/orgs",
        "repos_url": "https://api.github.com/users/rokm/repos",
        "events_url": "https://api.github.com/users/rokm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rokm/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "carljm",
        "id": 61586,
        "node_id": "MDQ6VXNlcjYxNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/carljm",
        "html_url": "https://github.com/carljm",
        "followers_url": "https://api.github.com/users/carljm/followers",
        "following_url": "https://api.github.com/users/carljm/following{/other_user}",
        "gists_url": "https://api.github.com/users/carljm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/carljm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/carljm/subscriptions",
        "organizations_url": "https://api.github.com/users/carljm/orgs",
        "repos_url": "https://api.github.com/users/carljm/repos",
        "events_url": "https://api.github.com/users/carljm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/carljm/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "carljm",
          "id": 61586,
          "node_id": "MDQ6VXNlcjYxNTg2",
          "avatar_url": "https://avatars.githubusercontent.com/u/61586?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/carljm",
          "html_url": "https://github.com/carljm",
          "followers_url": "https://api.github.com/users/carljm/followers",
          "following_url": "https://api.github.com/users/carljm/following{/other_user}",
          "gists_url": "https://api.github.com/users/carljm/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/carljm/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/carljm/subscriptions",
          "organizations_url": "https://api.github.com/users/carljm/orgs",
          "repos_url": "https://api.github.com/users/carljm/repos",
          "events_url": "https://api.github.com/users/carljm/events{/privacy}",
          "received_events_url": "https://api.github.com/users/carljm/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 8,
      "created_at": "2023-10-09T08:56:19Z",
      "updated_at": "2024-09-17T15:14:32Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\n\n### Bug description:\n\nSupport for inlining list/dict/set comprehensions in c3b595e73efac59360d6dc869802abc752092460 introduced a `CO_FAST_HIDDEN`, which is applied in combination with a different type code, for example `CO_FAST_LOCAL`. However, when the `code` object is copied via `code.replace()` function call, this additional flag is lost; consequently, execution of the returned code object results in a bizarre-looking error.\n\nExample:\n\nConsider the following example program\n\n```python\n# program.py\nimport sys\n\nif len(sys.argv) != 2:\n    print(f\"usage: {sys.argv[0]} <dir|locals|globals>\")\n    sys.exit(1)\nmode = sys.argv[1]\n\n# The comprehension must use same variable name as the code that attempts `del`.\n_allvalues = ''.join([myobj for myobj in ['a', 'b', 'c']])\n\nmyobj = None  # for del below\nif mode == 'dir':\n    print(\"DIR():\", dir())\nelif mode == 'locals':\n    print(\"LOCALS():\", locals())\nelif mode == 'globals':\n    print(\"GLOBALS():\", globals())\n\ndel myobj\n```\n\nand the following script that compiles the program to byte-code .pyc:\n\n```python\n# compile_script.py\nimport sys\nimport os\nimport struct\nimport marshal\nimport importlib.util\n\nif len(sys.argv) < 3:\n    print(f\"usage: {sys.argv[0]} <source> <dest> [0|1]\")\n    sys.exit(1)\n\nfilename = sys.argv[1]\nout_filename = sys.argv[2]\n\nstrip_co = False if len(sys.argv) < 4 else sys.argv[3] != '0'\n\nwith open(filename, 'rb') as fp:\n    src = fp.read()\n\nco = compile(src, filename, 'exec')\nif strip_co:\n    co = co.replace()  # In real use-case, we would be replacing filename here\n\nwith open(out_filename, 'wb') as fp:\n    fp.write(importlib.util.MAGIC_NUMBER)\n    fp.write(struct.pack('<I', 0b01))  # PEP-552: hash-based pyc, check_source=False\n    fp.write(b'\\00' * 8)  # Zero the source hash\n    marshal.dump(co, fp)\n```\n\nFor some context, the above example is a distilled reproduction of what is going in `PyInstaller` and `scipy.stats._distn_infrastructure` module in pyinstaller/pyinstaller#7992: the collected module is byte-compiled, and the absolute filename in the code-object is anonymized into environment-relative path via `co.replace()` (see [here](https://github.com/pyinstaller/pyinstaller/blob/e7c252573f424ad9b79169ab01229d27599004b1/PyInstaller/building/utils.py#L535-L558) for details).\n\nBut in the above example, no replacement is done, and so one would expect of `co.replace()` to return an identical code object.\n\nHowever, this is not the case (even though `co == co.replace()` in python claims that they are identical):\n\n```shell\n$ python3.12 compile_script.py program.py compiled-orig.pyc 0  # Compile without co.replace()\n$ python3.12 compile_script.py program.py compiled-copy.pyc 1  # Compile with co.replace()\n```\n\n```shell\n$ sha256sum *.pyc\n2e03af03bcbb41b3a6cc6f592f5143acf7d82edc089913504c1f8446764795e1  compiled-copy.pyc\n5034955819efba0dc7ff3ee94101c1f6dfe33b102d547efc77577d77a99f1732  compiled-orig.pyc\n```\n\nRunning the original version:\n```shell\n$ python3.12 compiled-orig.pyc globals\nGLOBALS(): {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourcelessFileLoader object at 0x7fe7fb327830>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>, '__file__': '[...]/compiled-orig.pyc', '__cached__': None, 'sys': <module 'sys' (built-in)>, 'mode': 'globals', '_allvalues': 'abc', 'myobj': None}\n\n$ python3.12 compiled-orig.pyc dir\nDIR(): ['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_allvalues', 'mode', 'myobj', 'sys']\n\n$ python3.12 compiled-orig.pyc locals\nLOCALS(): {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourcelessFileLoader object at 0x7f2846527830>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>, '__file__': '[...]/compiled-orig.pyc', '__cached__': None, 'sys': <module 'sys' (built-in)>, 'mode': 'locals', '_allvalues': 'abc', 'myobj': None}\n```\n\nRunning the version with `co.replace()`:\n```shell\n$ python3.12 compiled-copy.pyc globals\nGLOBALS(): {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourcelessFileLoader object at 0x7fd7f1b27830>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>, '__file__': '[...]/compiled-copy.pyc', '__cached__': None, 'sys': <module 'sys' (built-in)>, 'mode': 'globals', '_allvalues': 'abc', 'myobj': None}\n\n$ python3.12 compiled-copy.pyc dir\nDIR(): ['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_allvalues', 'mode', 'sys']\nTraceback (most recent call last):\n  File \"program.py\", line 20, in <module>\n    del myobj\n        ^^^^^\nNameError: name 'myobj' is not defined\n\n$ python3.12 compiled-copy.pyc locals\nLOCALS(): {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourcelessFileLoader object at 0x7f8a35d27830>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>, '__file__': '[...]/compiled-copy.pyc', '__cached__': None, 'sys': <module 'sys' (built-in)>, 'mode': 'locals', '_allvalues': 'abc'}\nTraceback (most recent call last):\n  File \"program.py\", line 20, in <module>\n    del myobj\n        ^^^^^\nNameError: name 'myobj' is not defined\n```\n\nComparing the compiled-orig.pyc and compiled-copy.pyc in a hex editor, there is one byte of difference; its position corresponds to marshaled `co_localspluskinds`, and the value is 0x30 (`CO_FAST_LOCAL | CO_FAST_HIDDEN`) in original and 0x20 (`CO_FAST_LOCAL`) in copy variant.\n\n\n### CPython versions tested on:\n\n3.12\n\n### Operating systems tested on:\n\nLinux, Windows\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-110586\n* gh-111866\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "hugovk",
        "id": 1324225,
        "node_id": "MDQ6VXNlcjEzMjQyMjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1324225?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugovk",
        "html_url": "https://github.com/hugovk",
        "followers_url": "https://api.github.com/users/hugovk/followers",
        "following_url": "https://api.github.com/users/hugovk/following{/other_user}",
        "gists_url": "https://api.github.com/users/hugovk/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hugovk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hugovk/subscriptions",
        "organizations_url": "https://api.github.com/users/hugovk/orgs",
        "repos_url": "https://api.github.com/users/hugovk/repos",
        "events_url": "https://api.github.com/users/hugovk/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hugovk/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/110543/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/110543/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/110105",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/110105/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/110105/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/110105/events",
      "html_url": "https://github.com/python/cpython/issues/110105",
      "id": 1919260070,
      "node_id": "I_kwDOBN0Z8c5yZZWm",
      "number": 110105,
      "title": "_Py_atomic_add_int16 failure on Windows ARM64",
      "user": {
        "login": "zooba",
        "id": 1693688,
        "node_id": "MDQ6VXNlcjE2OTM2ODg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zooba",
        "html_url": "https://github.com/zooba",
        "followers_url": "https://api.github.com/users/zooba/followers",
        "following_url": "https://api.github.com/users/zooba/following{/other_user}",
        "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
        "organizations_url": "https://api.github.com/users/zooba/orgs",
        "repos_url": "https://api.github.com/users/zooba/repos",
        "events_url": "https://api.github.com/users/zooba/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zooba/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 570103914,
          "node_id": "MDU6TGFiZWw1NzAxMDM5MTQ=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-windows",
          "name": "OS-windows",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "zooba",
        "id": 1693688,
        "node_id": "MDQ6VXNlcjE2OTM2ODg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zooba",
        "html_url": "https://github.com/zooba",
        "followers_url": "https://api.github.com/users/zooba/followers",
        "following_url": "https://api.github.com/users/zooba/following{/other_user}",
        "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
        "organizations_url": "https://api.github.com/users/zooba/orgs",
        "repos_url": "https://api.github.com/users/zooba/repos",
        "events_url": "https://api.github.com/users/zooba/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zooba/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "zooba",
          "id": 1693688,
          "node_id": "MDQ6VXNlcjE2OTM2ODg=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/zooba",
          "html_url": "https://github.com/zooba",
          "followers_url": "https://api.github.com/users/zooba/followers",
          "following_url": "https://api.github.com/users/zooba/following{/other_user}",
          "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
          "organizations_url": "https://api.github.com/users/zooba/orgs",
          "repos_url": "https://api.github.com/users/zooba/repos",
          "events_url": "https://api.github.com/users/zooba/events{/privacy}",
          "received_events_url": "https://api.github.com/users/zooba/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2023-09-29T13:18:54Z",
      "updated_at": "2023-09-29T17:41:02Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "I saw this error on my private ARM64 builder:\r\n\r\n```\r\nAssertion failed: _Py_atomic_add_int16(&x, -2) == (int16_t)-1, file D:\\a\\1\\s\\cpython\\Modules\\_testcapi\\pyatomic.c, line 54\r\n```\r\n\r\nIt's a codegen issue in slightly older versions of MSVC, where it does not properly sign extend the value read from `x` before comparing to a properly sign-extended `(int16_t)-1` (comparisons happen in 32 bits).\r\n\r\n```\r\n\tldaxrh      w19,[x9]\r\n\tsxth        w19,w19    # this line was missing\r\n\tadd         w8,w19,#1\r\n\tstlxrh      wip1,w8,[x9]\r\n\tcbnz        wip1,|$LN10@main|\r\n\tdmb         ish\r\n```\r\n\r\nMSVC 19.35 has the issue and MSVC 19.38 seems to have fixed it, but I'm not sure exactly which version. We don't currently use the 16-bit functions anywhere AFAIK, so the only possible change would be to exclude the latter part of the test on older compilers (which is annoying because it's macrofied for all types).\r\n\r\nSo I guess I'll leave this here as an FYI for when someone sees the crash on their buildbot and has to investigate! And we'll probably close it once we see GHA and AzP on the latest compilers. (@colesbury FYI, not that there's anything to do here)\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-110116\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/110105/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/110105/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/110052",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/110052/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/110052/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/110052/events",
      "html_url": "https://github.com/python/cpython/issues/110052",
      "id": 1918213769,
      "node_id": "I_kwDOBN0Z8c5yVZ6J",
      "number": 110052,
      "title": "test_threading.test_4_daemon_threads() crash randomly",
      "user": {
        "login": "vstinner",
        "id": 194129,
        "node_id": "MDQ6VXNlcjE5NDEyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vstinner",
        "html_url": "https://github.com/vstinner",
        "followers_url": "https://api.github.com/users/vstinner/followers",
        "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
        "organizations_url": "https://api.github.com/users/vstinner/orgs",
        "repos_url": "https://api.github.com/users/vstinner/repos",
        "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vstinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "ericsnowcurrently",
          "id": 1152074,
          "node_id": "MDQ6VXNlcjExNTIwNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ericsnowcurrently",
          "html_url": "https://github.com/ericsnowcurrently",
          "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
          "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
          "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
          "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
          "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
          "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 35,
      "created_at": "2023-09-28T20:19:36Z",
      "updated_at": "2023-11-27T00:09:08Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "On Linux, when I stress test test_threading.test_4_daemon_threads(), it does crash randomly:\r\n\r\n```\r\n./python -m test test_threading -m test_4_daemon_threads -j50 -F --fail-env-changed  \r\n```\r\n\r\ngdb traceback:\r\n\r\n```\r\nProgram terminated with signal SIGSEGV, Segmentation fault.\r\n#0  0x00000000006e02f4 in PyInterpreterState_ThreadHead (interp=0xdddddddddddddddd) at Python/pystate.c:1961\r\n\r\nwarning: Source file is more recent than executable.\r\n1961\t    return interp->threads.head;\r\n[Current thread is 1 (Thread 0x7fcbb8ff96c0 (LWP 510515))]\r\nMissing separate debuginfos, use: dnf debuginfo-install bzip2-libs-1.0.8-13.fc38.x86_64 glibc-2.37-5.fc38.x86_64 libffi-3.4.4-2.fc38.x86_64 libgcc-13.2.1-1.fc38.x86_64 openssl-libs-3.0.9-2.fc38.x86_64 xz-libs-5.4.1-1.fc38.x86_64 zlib-1.2.13-3.fc38.x86_64\r\n(gdb) where\r\n#0  0x00000000006e02f4 in PyInterpreterState_ThreadHead (interp=0xdddddddddddddddd) at Python/pystate.c:1961\r\n#1  0x0000000000703090 in _Py_DumpTracebackThreads (fd=2, interp=0xdddddddddddddddd, current_tstate=0x24a34e0) at Python/traceback.c:1331\r\n#2  0x000000000071bcef in faulthandler_dump_traceback (fd=2, all_threads=1, interp=0xa53688 <_PyRuntime+92712>) at ./Modules/faulthandler.c:195\r\n#3  0x000000000071bfed in faulthandler_fatal_error (signum=11) at ./Modules/faulthandler.c:313\r\n#4  <signal handler called>\r\n#5  0x000000000069f808 in take_gil (tstate=0x24a34e0) at Python/ceval_gil.c:360\r\n#6  0x00000000006a03ab in PyEval_RestoreThread (tstate=0x24a34e0) at Python/ceval_gil.c:714\r\n#7  0x000000000074dd93 in portable_lseek (self=0x7fcc186c3590, posobj=0x0, whence=1, suppress_pipe_error=false) at ./Modules/_io/fileio.c:934\r\n#8  0x000000000074de88 in _io_FileIO_tell_impl (self=0x7fcc186c3590) at ./Modules/_io/fileio.c:997\r\n#9  0x000000000074ea4c in _io_FileIO_tell (self=0x7fcc186c3590, _unused_ignored=0x0) at ./Modules/_io/clinic/fileio.c.h:460\r\n(...)\r\n```\r\n\r\ngdb debug:\r\n\r\n```\r\n\r\n(gdb) frame 5\r\n#5  0x000000000069f808 in take_gil (tstate=0x24a34e0) at Python/ceval_gil.c:360\r\n360\t    struct _gil_runtime_state *gil = ceval->gil;\r\n(gdb) l\r\n355\t    }\r\n356\t\r\n357\t    assert(_PyThreadState_CheckConsistency(tstate));\r\n358\t    PyInterpreterState *interp = tstate->interp;\r\n359\t    struct _ceval_state *ceval = &interp->ceval;\r\n360\t    struct _gil_runtime_state *gil = ceval->gil;\r\n361\t\r\n362\t    /* Check that _PyEval_InitThreads() was called to create the lock */\r\n363\t    assert(gil_created(gil));\r\n364\t\r\n\r\n(gdb) p /x ceval\r\n$1 = 0xdddddddddddddddd\r\n\r\n(gdb) p /x tstate->interp\r\n$2 = 0xdddddddddddddddd\r\n\r\n\r\n(gdb) p /x tstate\r\n$5 = 0x24a34e0\r\n\r\n(gdb) p /x _PyRuntime._finalizing._value \r\n$3 = 0xab8fa8\r\n\r\n(gdb) p /x _PyRuntime._finalizing_id \r\n$4 = 0x7fcc49fce740\r\n```\r\n\r\nI don't understand why the test didn't exit: _PyThreadState_MustExit() should return, no?\r\n\r\nI don't understand why ``assert(_PyThreadState_CheckConsistency(tstate));`` didn't fail.\r\n\r\n**Maybe** Py_Finalize() was called between the pre-check:\r\n\r\n```c\r\n    if (_PyThreadState_MustExit(tstate)) {\r\n        /* bpo-39877: If Py_Finalize() has been called and tstate is not the\r\n           thread which called Py_Finalize(), exit immediately the thread.\r\n\r\n           This code path can be reached by a daemon thread after Py_Finalize()\r\n           completes. In this case, tstate is a dangling pointer: points to\r\n           PyThreadState freed memory. */\r\n        PyThread_exit_thread();\r\n    }\r\n\r\n    assert(_PyThreadState_CheckConsistency(tstate));\r\n```\r\n\r\nand the code:\r\n\r\n```c\r\n    PyInterpreterState *interp = tstate->interp;\r\n    struct _ceval_state *ceval = &interp->ceval;\r\n    struct _gil_runtime_state *gil = ceval->gil;\r\n```\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-110069\n* gh-110071\n* gh-110072\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/110052/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/110052/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/109853",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/109853/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/109853/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/109853/events",
      "html_url": "https://github.com/python/cpython/issues/109853",
      "id": 1911816620,
      "node_id": "I_kwDOBN0Z8c5x9AGs",
      "number": 109853,
      "title": "sys.path[0] Is Set Differently From the Rest of sys.path",
      "user": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018993468,
          "node_id": "LA_kwDOBN0Z8c7vjPk8",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-subinterpreters",
          "name": "topic-subinterpreters",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4019060898,
          "node_id": "LA_kwDOBN0Z8c7vjgCi",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-C-API",
          "name": "topic-C-API",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 9,
      "created_at": "2023-09-25T15:50:43Z",
      "updated_at": "2024-04-25T10:17:21Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\nCurrently `sys.path[0]` is set by `pymain_run_python()` (in Modules/main.c).  This happens *after* `pymain_init()`, which initializes the runtime, including the rest of `sys.path` (via getpath.py and site.py).  This makes it harder to reason about and introduces extra complexity for subinterpreters.  (See gh-109793 and gh-109794.)\n\nWe should consider calculating `sys.path[0]` and setting it to its own `PyConfig` field via getpath.py, when the rest of the base `sys.path` is calculated.  We may need a later check to verify that there is a matching importer, as `pymain_run_python()` does.  (FWIW, it isn't clear that there's any value to storing the `sys.path[0]` value on the global `_PyPathConfig`.)\n\nAlso, we currently wait to actually set `sys.path[0]` (for the main interpreter) until after the readline/rlcompleter modules are imported in `pymain_run_python()`.  We'd need to factor that in.\n\nCC @zooba, @vstinner, @ncoghlan\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-109994\n* gh-110701\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/109853/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/109853/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/109617",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/109617/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/109617/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/109617/events",
      "html_url": "https://github.com/python/cpython/issues/109617",
      "id": 1905255278,
      "node_id": "I_kwDOBN0Z8c5xj-Nu",
      "number": 109617,
      "title": "Refresh Screen Provided By `curses.wrapper` Causes Seg Fault (macOS, xcode 15 Apple supplied ncurses 6.0 breakage)",
      "user": {
        "login": "timway",
        "id": 1091435,
        "node_id": "MDQ6VXNlcjEwOTE0MzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1091435?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/timway",
        "html_url": "https://github.com/timway",
        "followers_url": "https://api.github.com/users/timway/followers",
        "following_url": "https://api.github.com/users/timway/following{/other_user}",
        "gists_url": "https://api.github.com/users/timway/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/timway/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/timway/subscriptions",
        "organizations_url": "https://api.github.com/users/timway/orgs",
        "repos_url": "https://api.github.com/users/timway/repos",
        "events_url": "https://api.github.com/users/timway/events{/privacy}",
        "received_events_url": "https://api.github.com/users/timway/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 588881297,
          "node_id": "MDU6TGFiZWw1ODg4ODEyOTc=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-mac",
          "name": "OS-mac",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 4018848914,
          "node_id": "LA_kwDOBN0Z8c7visSS",
          "url": "https://api.github.com/repos/python/cpython/labels/type-crash",
          "name": "type-crash",
          "color": "b60205",
          "default": false,
          "description": "A hard crash of the interpreter, possibly with a core dump"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 32,
      "created_at": "2023-09-20T15:33:40Z",
      "updated_at": "2024-01-02T17:50:10Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Crash report\n\n### What happened?\n\nMacOS began pushing out updates to XCode Command Line Tools to install 15.0 recently. Upon updating I began having issues with `curses`. This happens with the Python provided by Apple. I'm not aware of the best way to communicate this issue to Apple, hopefully someone here knows who to ping or is watching.\n\n\nSave the below as `curses-segfault.py`:\n\n```python\nimport curses\n\ndef main(stdscr):\n    stdscr.refresh()\n\ncurses.wrapper(main)\n```\n\nRun the script in `zsh` in MacOS Terminal via:\n\n```zsh\n/usr/bin/python3 curses-segfault.py\n```\n\nAn easy way to see if you got the update is via the terminal by running:\n\n```zsh\nsoftwareupdate --history\n```\n\n### CPython versions tested on:\n\n3.9\n\n### Operating systems tested on:\n\nmacOS\n\n### Output from running 'python -VV' on the command line:\n\npython3 -VV Python 3.9.6 (default, Aug 11 2023, 19:44:49)  [Clang 15.0.0 (clang-1500.0.40.1)]\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-111258\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/109617/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/109617/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/109534",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/109534/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/109534/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/109534/events",
      "html_url": "https://github.com/python/cpython/issues/109534",
      "id": 1900764543,
      "node_id": "I_kwDOBN0Z8c5xS11_",
      "number": 109534,
      "title": "TLS/SSL asyncio leaks memory ",
      "user": {
        "login": "rojamit",
        "id": 86718351,
        "node_id": "MDQ6VXNlcjg2NzE4MzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/86718351?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rojamit",
        "html_url": "https://github.com/rojamit",
        "followers_url": "https://api.github.com/users/rojamit/followers",
        "following_url": "https://api.github.com/users/rojamit/following{/other_user}",
        "gists_url": "https://api.github.com/users/rojamit/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rojamit/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rojamit/subscriptions",
        "organizations_url": "https://api.github.com/users/rojamit/orgs",
        "repos_url": "https://api.github.com/users/rojamit/repos",
        "events_url": "https://api.github.com/users/rojamit/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rojamit/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 557226369,
          "node_id": "MDU6TGFiZWw1NTcyMjYzNjk=",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-asyncio",
          "name": "topic-asyncio",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4018672955,
          "node_id": "LA_kwDOBN0Z8c7viBU7",
          "url": "https://api.github.com/repos/python/cpython/labels/extension-modules",
          "name": "extension-modules",
          "color": "09fc59",
          "default": false,
          "description": "C modules in the Modules dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 87,
      "created_at": "2023-09-18T11:49:46Z",
      "updated_at": "2024-10-08T18:19:22Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n### Bug description:\r\n\r\npython3.9 without uvloop doesn't leaks memory (or noticeably smaller). \r\npython3.11+ (and others?) leaks memory A LOT under load (with or without uvloop) - up to +2gb per every test!\r\n\r\ntest commands: \r\nab -n50000 -c15000 -r https://127.0.0.1/\r\n(apt install apache2-utils)\r\n\r\n```python\r\nimport asyncio, ssl, uvloop\r\n\r\nclass HTTP(asyncio.Protocol):\r\n    \r\n    def __init__(self):\r\n        self.transport = None\r\n        \r\n    def connection_made(self, transport):\r\n        self.transport = transport\r\n\r\n    def data_received(self, data):\r\n        self.transport.write(\r\n            b'HTTP/1.1 200 OK\\r\\nContent-Length: 0\\r\\nConnection: keep-alive\\r\\n\\r\\n'\r\n        )\r\n        self.transport.close()\r\n        \r\ndef make_tls_context():\r\n    ctx = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\r\n    ctx.load_cert_chain('cert.crt', 'cert.key')\r\n    return ctx\r\n\r\ntls_context = make_tls_context()\r\nloop = uvloop.new_event_loop()\r\n\r\nasync def start_server(loop):\r\n    return await loop.create_server(\r\n        HTTP, '127.0.0.1', 443, backlog=65535,\r\n        ssl=tls_context)\r\n\r\nloop.run_until_complete(start_server(loop))\r\nloop.run_forever()\r\n```\r\n### CPython versions tested on:\r\n\r\n3.9, 3.11, 3.12\r\n\r\n### Operating systems tested on:\r\n\r\nDebian Linux\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-113338\r\n* gh-114074\r\n* gh-114311\r\n* gh-114367\r\n* gh-114829\r\n* gh-114830\r\n* gh-115643\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/109534/reactions",
        "total_count": 11,
        "+1": 4,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 2,
        "heart": 0,
        "rocket": 0,
        "eyes": 5
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/109534/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/108631",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/108631/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/108631/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/108631/events",
      "html_url": "https://github.com/python/cpython/issues/108631",
      "id": 1871549626,
      "node_id": "I_kwDOBN0Z8c5vjZS6",
      "number": 108631,
      "title": "Make ABCs compatible with match-case syntax",
      "user": {
        "login": "malemburg",
        "id": 6735498,
        "node_id": "MDQ6VXNlcjY3MzU0OTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6735498?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/malemburg",
        "html_url": "https://github.com/malemburg",
        "followers_url": "https://api.github.com/users/malemburg/followers",
        "following_url": "https://api.github.com/users/malemburg/following{/other_user}",
        "gists_url": "https://api.github.com/users/malemburg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/malemburg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/malemburg/subscriptions",
        "organizations_url": "https://api.github.com/users/malemburg/orgs",
        "repos_url": "https://api.github.com/users/malemburg/repos",
        "events_url": "https://api.github.com/users/malemburg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/malemburg/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2023-08-29T12:18:36Z",
      "updated_at": "2023-11-27T20:42:44Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "### Has this already been discussed elsewhere?\r\n\r\nThis is a minor feature, which does not need previous discussion elsewhere\r\n\r\n### Links to previous discussion of this feature:\r\n\r\n_No response_\r\n\r\n### Proposal:\r\n\r\nI believe this is a minor feature request, but could be wrong.\r\n\r\nMany builtin types and user defined classes can use capture variables as first argument, e.g.\r\n\r\n```python\r\nmatch instance:\r\n     case {'name': str(name), 'price': float(price), **extra}:\r\n         pass\r\n```\r\n\r\nWhen trying to match a number which can be both float or int, you can use the as construct and an or pattern to define the match:\r\n\r\n```python\r\nmatch instance:\r\n     case {'name': str(name), 'price': (float() | int()) as price, **extra}:\r\n         pass\r\n```\r\n\r\nHowever, this is lengthy and rather annoying if you have to repeat this over and over again. A more natural approach would be to use the numbers module and check against numbers.Real:\r\n\r\n```python\r\nimport numbers\r\nmatch instance:\r\n     case {'name': str(name), 'price': numbers.Real(price), **extra}:\r\n         pass\r\n```\r\n\r\nUnfortunately, this fails with a TypeError:\r\n\r\n```\r\nTypeError: Real() accepts 0 positional sub-patterns (1 given)\r\n```\r\n\r\nThere is a work-around, but it's not very newbie friendly:\r\n\r\n```python\r\nimport numbers\r\nmatch instance:\r\n     case {'name': str(name), 'price': numbers.Real() as price, **extra}:\r\n         pass\r\n```\r\n\r\nI'm not sure whether adding a `.__match_args__ = ('x',)` to e.g. the `numbers.Real` ABC would be enough (or even correct), or whether something else needs to be done to make the above work.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-108653\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/108631/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/108631/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/108598",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/108598/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/108598/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/108598/events",
      "html_url": "https://github.com/python/cpython/issues/108598",
      "id": 1870698975,
      "node_id": "I_kwDOBN0Z8c5vgJnf",
      "number": 108598,
      "title": "Consider a faster alternative algorithm for random.shuffle()",
      "user": {
        "login": "d-rideout",
        "id": 37720241,
        "node_id": "MDQ6VXNlcjM3NzIwMjQx",
        "avatar_url": "https://avatars.githubusercontent.com/u/37720241?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/d-rideout",
        "html_url": "https://github.com/d-rideout",
        "followers_url": "https://api.github.com/users/d-rideout/followers",
        "following_url": "https://api.github.com/users/d-rideout/following{/other_user}",
        "gists_url": "https://api.github.com/users/d-rideout/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/d-rideout/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/d-rideout/subscriptions",
        "organizations_url": "https://api.github.com/users/d-rideout/orgs",
        "repos_url": "https://api.github.com/users/d-rideout/repos",
        "events_url": "https://api.github.com/users/d-rideout/events{/privacy}",
        "received_events_url": "https://api.github.com/users/d-rideout/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 72,
      "created_at": "2023-08-29T00:43:50Z",
      "updated_at": "2024-12-09T19:27:14Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "The documentation for the [``shuffle()``](https://docs.python.org/3.13/library/random.html#random.shuffle) function in the random module expresses concern that, for sequences of length larger than 2080, the ``shuffle()`` function is not able to produce all permutations of the sequence.  While true, I find the emphasis on the finite period of the Mersenne Twister random number generator misleading, since the generator is only called n-1 times for a sequence of length n.  The real issue is that any  algorithm based on a sequence of calls to a pseudorandom number generator will not be able to generate more permutations than the generator has internal states.\r\n\r\n(I also wonder how large of a sequence can be sent to ``shuffle()`` in practice, to be guaranteed a uniform distribution over permutations.  Is 2079 small enough?  2078?  Might there be a check for this?)\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-108610\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/108598/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/108598/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/108580",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/108580/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/108580/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/108580/events",
      "html_url": "https://github.com/python/cpython/issues/108580",
      "id": 1870337604,
      "node_id": "I_kwDOBN0Z8c5vexZE",
      "number": 108580,
      "title": "Structure for importlib metadata identities",
      "user": {
        "login": "orbisvicis",
        "id": 730739,
        "node_id": "MDQ6VXNlcjczMDczOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730739?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/orbisvicis",
        "html_url": "https://github.com/orbisvicis",
        "followers_url": "https://api.github.com/users/orbisvicis/followers",
        "following_url": "https://api.github.com/users/orbisvicis/following{/other_user}",
        "gists_url": "https://api.github.com/users/orbisvicis/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/orbisvicis/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/orbisvicis/subscriptions",
        "organizations_url": "https://api.github.com/users/orbisvicis/orgs",
        "repos_url": "https://api.github.com/users/orbisvicis/repos",
        "events_url": "https://api.github.com/users/orbisvicis/events{/privacy}",
        "received_events_url": "https://api.github.com/users/orbisvicis/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4095883204,
          "node_id": "LA_kwDOBN0Z8c70IjfE",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-importlib",
          "name": "topic-importlib",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2023-08-28T19:25:16Z",
      "updated_at": "2024-09-12T23:27:23Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\n### Has this already been discussed elsewhere?\n\nNo response given\n\n### Links to previous discussion of this feature:\n\n[Structure for importlib metadata identities](https://discuss.python.org/t/structure-for-importlib-metadata-identities/32354)\n\n### Proposal:\n\nSee the linked discussion for the proposal, justification, conflicts, and examples.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-108585\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/108580/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/108580/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/108219",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/108219/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/108219/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/108219/events",
      "html_url": "https://github.com/python/cpython/issues/108219",
      "id": 1859686809,
      "node_id": "I_kwDOBN0Z8c5u2JGZ",
      "number": 108219,
      "title": "PEP 703 -- Making the Global Interpreter Lock Optional in CPython",
      "user": {
        "login": "colesbury",
        "id": 655866,
        "node_id": "MDQ6VXNlcjY1NTg2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/colesbury",
        "html_url": "https://github.com/colesbury",
        "followers_url": "https://api.github.com/users/colesbury/followers",
        "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
        "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
        "organizations_url": "https://api.github.com/users/colesbury/orgs",
        "repos_url": "https://api.github.com/users/colesbury/repos",
        "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
        "received_events_url": "https://api.github.com/users/colesbury/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2023-08-21T15:59:30Z",
      "updated_at": "2024-11-16T18:42:33Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\n\nThe steering council has [accepted](https://discuss.python.org/t/pep-703-making-the-global-interpreter-lock-optional-in-cpython-acceptance/37075) [PEP 703](https://peps.python.org/pep-0703/). This is intended as a top-level issue to keep track of integration status.\n\nThe \"up for grabs\" list contains issues that no one is currently working on and are ready to be implemented. If you are interested in working on one of them, please comment on the specific issue and CC me (@colesbury) on related PRs.\n\n```[tasklist]\n### Up For Grabs (comment on specific issue to take)\n```\n\n```[tasklist]\n### Linked issues\n- [ ] https://github.com/python/cpython/issues/111506\n- [ ] https://github.com/python/cpython/issues/111870\n- [ ] https://github.com/python/cpython/issues/111924\n- [ ] https://github.com/python/cpython/issues/112606\n- [ ] https://github.com/python/cpython/issues/114203\n- [ ] https://github.com/python/cpython/issues/114214\n- [ ] https://github.com/python/cpython/issues/115999\n- [ ] https://github.com/python/cpython/issues/116024\n- [ ] https://github.com/python/cpython/issues/116738\n- [ ] https://github.com/python/cpython/issues/117139\n- [ ] https://github.com/python/cpython/issues/117721\n- [ ] https://github.com/python/cpython/issues/117657\n- [ ] https://github.com/python/cpython/issues/119053\n```\n\n\n<details>\n<summary>Completed Issues</summary>\n\n```[tasklist]\n### Completed Issues\n- [ ] https://github.com/python/cpython/issues/108223\n- [ ] https://github.com/python/cpython/issues/108374\n- [ ] https://github.com/python/cpython/issues/108337\n- [ ] https://github.com/python/cpython/issues/108724\n- [ ] https://github.com/python/cpython/issues/109549\n- [ ] https://github.com/python/cpython/issues/109740\n- [ ] https://github.com/python/cpython/issues/110119\n- [ ] https://github.com/pypa/packaging/issues/727\n- [ ] https://github.com/python/cpython/issues/111062\n- [ ] https://github.com/python/cpython/issues/111569\n- [ ] https://github.com/python/cpython/issues/112062\n- [ ] https://github.com/python/cpython/issues/111903\n- [ ] https://github.com/python/cpython/issues/111916\n- [ ] https://github.com/python/cpython/issues/111928\n- [ ] https://github.com/python/cpython/issues/112070\n- [ ] https://github.com/python/cpython/issues/111956\n- [ ] https://github.com/python/cpython/issues/111965\n- [ ] https://github.com/python/cpython/issues/112213\n- [ ] https://github.com/python/cpython/issues/112071\n- [ ] https://github.com/python/cpython/issues/111972\n- [ ] https://github.com/python/cpython/issues/112538\n- [ ] https://github.com/python/cpython/issues/111962\n- [ ] https://github.com/python/cpython/issues/112535\n- [ ] https://github.com/python/cpython/issues/112205\n- [ ] https://github.com/python/cpython/issues/111971\n- [ ] https://github.com/python/cpython/issues/111650\n- [ ] https://github.com/python/cpython/issues/113750\n- [ ] https://github.com/python/cpython/issues/111964\n- [ ] https://github.com/python/cpython/issues/113884\n- [ ] https://github.com/python/cpython/issues/114569\n- [ ] https://github.com/python/cpython/issues/114329\n- [ ] https://github.com/python/cpython/issues/112066\n- [ ] https://github.com/python/cpython/issues/110481\n- [ ] https://github.com/python/cpython/issues/112532\n- [ ] https://github.com/python/cpython/issues/112050\n- [ ] https://github.com/python/cpython/issues/111968\n- [ ] https://github.com/python/cpython/issues/115491\n- [ ] https://github.com/python/cpython/issues/112175\n- [ ] https://github.com/python/cpython/issues/113743\n- [ ] https://github.com/python/cpython/issues/115103\n- [ ] https://github.com/python/cpython/issues/112087\n- [ ] https://github.com/python/cpython/issues/116616\n- [ ] https://github.com/python/cpython/issues/116167\n- [ ] https://github.com/python/cpython/issues/112536\n- [ ] https://github.com/python/cpython/issues/116522\n- [ ] https://github.com/python/cpython/issues/116664\n- [ ] https://github.com/python/cpython/issues/117323\n- [ ] https://github.com/python/cpython/issues/117300\n- [ ] https://github.com/python/cpython/issues/111926\n- [ ] https://github.com/python/cpython/issues/117293\n- [ ] https://github.com/python/cpython/issues/117435\n- [ ] https://github.com/python/cpython/issues/114271\n- [ ] https://github.com/python/cpython/issues/112069\n- [ ] https://github.com/python/cpython/issues/116329\n- [ ] https://github.com/python/cpython/issues/116818\n- [ ] https://github.com/python/cpython/issues/117514\n- [ ] https://github.com/python/cpython/issues/112529\n- [ ] https://github.com/python/cpython/issues/112075\n- [ ] https://github.com/python/cpython/issues/116322\n```\n</details>\n\n```[tasklist]\n### Deferred tasks\n- [ ] Revisit and update [`--disable-gil`](https://docs.python.org/dev/using/configure.html#cmdoption-disable-gil) configure documentation\n- [x] Reenable test_cppext on `--disable-gil` builds\n- [x] Audit usage of PyObject_Malloc for non-PyObject allocations\n- [ ] Consider avoiding refcounting `tp_mro` during PyType_IsSubtype\n```\n\n### Upstream functionality from nogil-3.12\n\nThis is a list of commits from the nogil-3.12 PR plan. The crossed-out entries are commits that do not need to be upstreamed, usually because the functionality is already in the main branch.\n\n\n- [ ] [`cefe5dfee9`](https://github.com/colesbury/nogil-3.12/commit/cefe5dfee9) configure: disallow \"--with-trace-refs\" for \"--disable-gil\" builds\n- [x] [`dcddbe2ddb`](https://github.com/colesbury/nogil-3.12/commit/dcddbe2ddb) configure: add support for --with-thread-sanitizer (#112536)\n- [x] [`f546dbf16a`](https://github.com/colesbury/nogil-3.12/commit/f546dbf16a) Enable/disable the GIL at runtime (gh-116167)\n- [x] [`f30d8d8f50`](https://github.com/colesbury/nogil-3.12/commit/f30d8d8f50) Add pyatomic.h\n- [x] ~~[`385eb1d99c`](https://github.com/colesbury/nogil-3.12/commit/385eb1d99c) pyport: add new macros~~\n- [x] ~~[`de2be447b3`](https://github.com/colesbury/nogil-3.12/commit/de2be447b3) Make PyThreadState_GET thread-local~~\n- [x] [`a24dc2ecc3`](https://github.com/colesbury/nogil-3.12/commit/a24dc2ecc3) pystate: keep track of attached vs. detached state\n- [x] [`4584be5950`](https://github.com/colesbury/nogil-3.12/commit/4584be5950) parking_lot: add mutexes and one-time notifications\n- [x] [`6845b133cc`](https://github.com/colesbury/nogil-3.12/commit/6845b133cc) critical_section: helpers for fine-grained locking (gh-111569)\n- [x] [`8ed62cab6a`](https://github.com/colesbury/nogil-3.12/commit/8ed62cab6a) pystate: use _PyRawMutex for internal mutexes (https://github.com/python/cpython/issues/111924)\n- [x] [`e15443b1f2`](https://github.com/colesbury/nogil-3.12/commit/e15443b1f2) ceval: move eval_breaker to per-thread state (#112175)\n- [x] [`b6b12a9a94`](https://github.com/colesbury/nogil-3.12/commit/b6b12a9a94) Implement biased reference counting\n- [x] [`b6b12a9a94`](https://github.com/colesbury/nogil-3.12/commit/b6b12a9a94) Implement BRC inter-thread queue (#110481)\n- [x] ~~[`7b6b6f1a01`](https://github.com/colesbury/nogil-3.12/commit/7b6b6f1a01) unicode: immortalize interned strings~~\n- [x] ~~[`fc173e3711`](https://github.com/colesbury/nogil-3.12/commit/fc173e3711) unicode: always immortalize interned strings~~\n- [x] [`dd9b78460c`](https://github.com/colesbury/nogil-3.12/commit/dd9b78460c) Add safe memory reclamation scheme based on FreeBSD's GUS\n- [x] [`901e134921`](https://github.com/colesbury/nogil-3.12/commit/901e134921) Add mimalloc v2.0.9 (DinoV)\n- [x] [`b6980856df`](https://github.com/colesbury/nogil-3.12/commit/d447b6980856df7e0050ecaba4fd6cf21747d4f2) Additional mimalloc changes (https://github.com/python/cpython/issues/112532)\n- [ ] [`d13c63dee9`](https://github.com/colesbury/nogil-3.12/commit/d13c63dee9) pymem: remove uses of _PyMem_SetDefaultAllocator during finalization (https://github.com/python/cpython/issues/111924)\n- [x] [`654be8ffd6`](https://github.com/colesbury/nogil-3.12/commit/654be8ffd6) gc: make the garbage collector non-generational (#112529)\n- [x] [`967fe31473`](https://github.com/colesbury/nogil-3.12/commit/967fe31473) gc: Traverese mimalloc heaps to find all objects. (#112529)\n- [x] [`2864b6b36e`](https://github.com/colesbury/nogil-3.12/commit/2864b6b36e) Implement stop-the-world pauses (#111964)\n- [x] [`2864b6b36e`](https://github.com/colesbury/nogil-3.12/commit/2864b6b36e) gc: implement stop-the-world GC (#112529)\n- [x] [`c1befd7689`](https://github.com/colesbury/nogil-3.12/commit/c1befd7689) Stop the world before fork() and Python shutdown (#116522)\n- [x] [`82800d8ec8`](https://github.com/colesbury/nogil-3.12/commit/82800d8ec8) ceval: stop the world when enabling profiling/tracing for all threads (#116818)\n- [x] [`7423dff344`](https://github.com/colesbury/nogil-3.12/commit/7423dff344) pystate: use stop-the-world in a few places (#117300)\n- [ ] [`86efa7dfe3`](https://github.com/colesbury/nogil-3.12/commit/86efa7dfe3) pystate: implement _PyRuntime.multithreaded\n- [x] [`d896dfc8db`](https://github.com/colesbury/nogil-3.12/commit/d896dfc8db) dict: make dict thread-safe (#112075)\n- [x] [`df4c51f82b`](https://github.com/colesbury/nogil-3.12/commit/df4c51f82b) list: make list thread-safe (#112087)\n- [x] [`9c1f7ba1b4`](https://github.com/colesbury/nogil-3.12/commit/9c1f7ba1b4) mro: thread-safe MRO cache (#113743)\n- [x] [`7a7aca096b`](https://github.com/colesbury/nogil-3.12/commit/7a7aca096b) getargs.c: make parser_init thread-safe (#111956)\n- [x] [`0dddcb6f9d`](https://github.com/colesbury/nogil-3.12/commit/0dddcb6f9d) weakref: make weakrefs thread-safe without the GIL (#111926)\n- [x] [`410ba1036a`](https://github.com/colesbury/nogil-3.12/commit/410ba1036a) dtoa: make dtoa thread-safe (#111962)\n- [x] [`6540bf3e6a`](https://github.com/colesbury/nogil-3.12/commit/6540bf3e6a) unicode: make unicodeobject.c thread-safe (#111971)\n- [x] [`5d006db9fa`](https://github.com/colesbury/nogil-3.12/commit/5d006db9fa) codecs.c: fix race condition (#111972)\n- [x] [`d1b5ed128e`](https://github.com/colesbury/nogil-3.12/commit/d1b5ed128e) _threadmodule: make _thread.lock thread-safe (#114271)\n- [ ] [`cfc11bcb1a`](https://github.com/colesbury/nogil-3.12/commit/cfc11bcb1a) typeobject: thread safety\n- [x] [`cfecf6f4eb`](https://github.com/colesbury/nogil-3.12/commit/cfecf6f4eb) threading: remove _tstate_lock from threading.Thread (#114271)\n- [x] ~~[`74df7785f5`](https://github.com/colesbury/nogil-3.12/commit/74df7785f5) pyqueue: add internal queue data structure~~\n- [x] [`4450445f51`](https://github.com/colesbury/nogil-3.12/commit/4450445f51) pymem: add _PyMem_FreeQsbr (#115103)\n- [x] [`7e60a01aee`](https://github.com/colesbury/nogil-3.12/commit/7e60a01aee) queue: make SimpleQueue thread-safe (#113884)\n- [x] [`4ca2924f0d`](https://github.com/colesbury/nogil-3.12/commit/4ca2924f0d) set: make set thread-safe (#112069)\n- [x] ~~[`3cfbc49229`](https://github.com/colesbury/nogil-3.12/commit/3cfbc49229) moduleobject: fix data races~~\n- [x] [`5722416ef5`](https://github.com/colesbury/nogil-3.12/commit/5722416ef5) _threadmodule: thread-safety fixes (#114271)\n- [ ] [`31ec6f0290`](https://github.com/colesbury/nogil-3.12/commit/31ec6f0290) pystate: refcount threads to handle race between interpreter shutdown and thread exit\n- [x] [`45bdd27ee5`](https://github.com/colesbury/nogil-3.12/commit/45bdd27ee5) threading: make _thread.lock thread-safe\n- [x] [`07f5f8c318`](https://github.com/colesbury/nogil-3.12/commit/07f5f8c318) slice: move slice_cache to per-thread state (#111968)\n- [x] [`ea1160c6d7`](https://github.com/colesbury/nogil-3.12/commit/ea1160c6d7) asyncio: fix race conditions in enter_task and leave_task\n- [x] [`212fef480e`](https://github.com/colesbury/nogil-3.12/commit/212fef480e) object.c: fix race when accessing attributes and methods (#111789)\n- [x] [`70856f126d`](https://github.com/colesbury/nogil-3.12/commit/70856f126d) asdl: use _PyOnceFlag in Python-ast.c (#111956)\n- [x] [`360a79cb88`](https://github.com/colesbury/nogil-3.12/commit/360a79cb88) socketmodule.c: use relaxed atomics for global 'defaulttimeout' (#116616)\n- [x] [`041a08e339`](https://github.com/colesbury/nogil-3.12/commit/041a08e339) functools: make lru_cache thread-safe (#112070)\n- [x] [`9bf62ffc4b`](https://github.com/colesbury/nogil-3.12/commit/9bf62ffc4b) random: add a mutex to guard random.Random (#112071)\n- [x] [`a8251a8d25`](https://github.com/colesbury/nogil-3.12/commit/a8251a8d25) clinic: support '@' syntax for recursive mutexes (#111903)\n- [x] [`ffade9d6f6`](https://github.com/colesbury/nogil-3.12/commit/ffade9d6f6) bufferedio: add locks to make print() thread-safe (#111965)\n- [x] [`5b83c16dcd`](https://github.com/colesbury/nogil-3.12/commit/5b83c16dcd) textio: add locks to make textio thread-safe (#111965)\n- [x] [`6323ca60f9`](https://github.com/colesbury/nogil-3.12/commit/6323ca60f9) stringio: make stringio thread-safe (#111965)\n- [x] [`f1e4742eaa`](https://github.com/colesbury/nogil-3.12/commit/f1e4742eaa) deque: make most functions thread-safe (#112050)\n- [x] [`78825e0508`](https://github.com/colesbury/nogil-3.12/commit/78825e0508) importlib: fix data race in imports (PyImport_ImportModuleLevelObject)\n- [x] [`2f5c90a284`](https://github.com/colesbury/nogil-3.12/commit/2f5c90a284) semaphore.c: decrease count before release sem_lock (#117435)\n- [x] [`22eca6e215`](https://github.com/colesbury/nogil-3.12/commit/22eca6e215) sha1: make sha1module thread-safe (https://github.com/python/cpython/issues/111916)\n- [x] [`ada9b73feb`](https://github.com/colesbury/nogil-3.12/commit/ada9b73feb) _struct: fix race condition in cache_struct_converter (#112062)\n- [ ] [`0e0b3899d1`](https://github.com/colesbury/nogil-3.12/commit/0e0b3899d1) signalmodule: fix thread-safety issue on macOS (Unclear if this is still an issue on macOS)\n- [x] [`964bb33962`](https://github.com/colesbury/nogil-3.12/commit/964bb33962) json: make JSON scanner thread safe (https://github.com/python/cpython/issues/111928)\n- [ ] [`86e7772c64`](https://github.com/colesbury/nogil-3.12/commit/86e7772c64) http: fix dependency on finalization order\n- [ ] [`9ab96964e7`](https://github.com/colesbury/nogil-3.12/commit/9ab96964e7) faulthandler: don't dump all threads when running without the GIL\n- [x] [`cff32694a4`](https://github.com/colesbury/nogil-3.12/commit/cff32694a4) test_gdb: skip test_threads when running without GIL\n- [x] ~~[`2ae5ee5ed4`](https://github.com/colesbury/nogil-3.12/commit/2ae5ee5ed4) tests: fix and work around some race conditions in tests~~\n- [ ] [`9f9b3d085f`](https://github.com/colesbury/nogil-3.12/commit/9f9b3d085f) ceval: fix some thread-safety issues\n- [x] [`2a4c17e896`](https://github.com/colesbury/nogil-3.12/commit/2a4c17e896) pystate: move freelists to per-thread state (#111968)\n- [ ] [`149ea9dc43`](https://github.com/colesbury/nogil-3.12/commit/149ea9dc43) Deferred reference counting\n- [ ] [`7e7568672d`](https://github.com/colesbury/nogil-3.12/commit/7e7568672d) specialize: make specialization thread-safe\n- [ ] [`90d34f0d18`](https://github.com/colesbury/nogil-3.12/commit/90d34f0d18) specialize: optimize for single-threaded programs\n- [x] [`42d3e11d8c`](https://github.com/colesbury/nogil-3.12/commit/42d3e11d8c) code: make code object use deferred reference counting\n- [x] [`c9fc49666c`](https://github.com/colesbury/nogil-3.12/commit/c9fc49666c) test: add support for checking for TSAN\n- [x] [`7507a77a98`](https://github.com/colesbury/nogil-3.12/commit/7507a77a98) thread: don't use sem_clockwait with TSAN\n- [x] ~~[`a62d37674c`](https://github.com/colesbury/nogil-3.12/commit/a62d37674c) _posixsubprocess: disable vfork when running with ASAN~~\n- [ ] [`398204d57b`](https://github.com/colesbury/nogil-3.12/commit/398204d57b) object: fix reported TSAN races\n- [x] [`4526c07cae`](https://github.com/colesbury/nogil-3.12/commit/4526c07cae) Disable the GIL by default in `--disable-gil` builds (gh-116329)\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-123802\n* gh-123847\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/108219/reactions",
        "total_count": 107,
        "+1": 7,
        "-1": 0,
        "laugh": 0,
        "hooray": 51,
        "confused": 0,
        "heart": 15,
        "rocket": 34,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/108219/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/107851",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/107851/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/107851/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/107851/events",
      "html_url": "https://github.com/python/cpython/issues/107851",
      "id": 1845877755,
      "node_id": "I_kwDOBN0Z8c5uBdv7",
      "number": 107851,
      "title": "test_flock/test_lockf are racy",
      "user": {
        "login": "andreas-schwab",
        "id": 2175493,
        "node_id": "MDQ6VXNlcjIxNzU0OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andreas-schwab",
        "html_url": "https://github.com/andreas-schwab",
        "followers_url": "https://api.github.com/users/andreas-schwab/followers",
        "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}",
        "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions",
        "organizations_url": "https://api.github.com/users/andreas-schwab/orgs",
        "repos_url": "https://api.github.com/users/andreas-schwab/repos",
        "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}",
        "received_events_url": "https://api.github.com/users/andreas-schwab/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2023-08-10T20:45:44Z",
      "updated_at": "2024-07-10T14:37:13Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "The tests test_flock and test_lockf are racy and fail spuriously.  The parent process trying to synchronize the subprocess may sleep up to max_delay=1.0 seconds between tries, while the subprocess locks the file at most sleep_time=0.2 seconds until it exits (and unlocks the file).  This may happen completely while the parent sleeps between two tries.\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-107931\n* gh-121556\n* gh-121585\n* gh-121586\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/107851/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/107851/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/107809",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/107809/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/107809/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/107809/events",
      "html_url": "https://github.com/python/cpython/issues/107809",
      "id": 1843040036,
      "node_id": "I_kwDOBN0Z8c5t2o8k",
      "number": 107809,
      "title": "smtplib email example should contain a \"Date\" header",
      "user": {
        "login": "Tuxicoman2",
        "id": 45998330,
        "node_id": "MDQ6VXNlcjQ1OTk4MzMw",
        "avatar_url": "https://avatars.githubusercontent.com/u/45998330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Tuxicoman2",
        "html_url": "https://github.com/Tuxicoman2",
        "followers_url": "https://api.github.com/users/Tuxicoman2/followers",
        "following_url": "https://api.github.com/users/Tuxicoman2/following{/other_user}",
        "gists_url": "https://api.github.com/users/Tuxicoman2/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Tuxicoman2/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Tuxicoman2/subscriptions",
        "organizations_url": "https://api.github.com/users/Tuxicoman2/orgs",
        "repos_url": "https://api.github.com/users/Tuxicoman2/repos",
        "events_url": "https://api.github.com/users/Tuxicoman2/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Tuxicoman2/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018812322,
          "node_id": "LA_kwDOBN0Z8c7vijWi",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-email",
          "name": "topic-email",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2023-08-09T11:30:08Z",
      "updated_at": "2023-08-09T17:51:58Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Documentation\r\n\r\nhttps://docs.python.org/3/library/email.examples.html#email-examples is providing code examples.\r\nBut those are 'incorrect' as they miss the \"Date\" header.\r\nWithout it, the mail recipient server will reject the email (Amavis/SpamAssassin is dropping the email due to a 'BAD-HEADER-0' error. I experienced that with : https://docker-mailserver.github.io/docker-mailserver/latest/ )\r\n\r\nRelated topic:\r\n* https://github.com/python/cpython/issues/73065\r\n\r\n\r\nThe correct headers in the examples should be:\r\n\r\n```python\r\nmsg = EmailMessage()\r\nmsg['Subject'] = \"subject\"\r\nmsg['From'] = \"sender@example.com\"\r\nmsg['To'] = \"receiver@example2.com\"\r\nmsg[\"Date\"] = email.utils.formatdate(localtime=True)\r\n```\r\n\r\nI understand it's not \"added automatically\" but the examples could contain that. So a user can get it right the first time without wondering why emails are not received without any error as only the mail receiver server log would tell...\r\n\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-107818\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/107809/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/107809/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/107784",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/107784/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/107784/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/107784/events",
      "html_url": "https://github.com/python/cpython/issues/107784",
      "id": 1841590700,
      "node_id": "I_kwDOBN0Z8c5txHGs",
      "number": 107784,
      "title": "Add Documentation for C-API Used by the _xxsubinterpreters Module",
      "user": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018993468,
          "node_id": "LA_kwDOBN0Z8c7vjPk8",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-subinterpreters",
          "name": "topic-subinterpreters",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4019060898,
          "node_id": "LA_kwDOBN0Z8c7vjgCi",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-C-API",
          "name": "topic-C-API",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "ericsnowcurrently",
          "id": 1152074,
          "node_id": "MDQ6VXNlcjExNTIwNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ericsnowcurrently",
          "html_url": "https://github.com/ericsnowcurrently",
          "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
          "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
          "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
          "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
          "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
          "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        {
          "login": "tonybaloney",
          "id": 1532417,
          "node_id": "MDQ6VXNlcjE1MzI0MTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1532417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/tonybaloney",
          "html_url": "https://github.com/tonybaloney",
          "followers_url": "https://api.github.com/users/tonybaloney/followers",
          "following_url": "https://api.github.com/users/tonybaloney/following{/other_user}",
          "gists_url": "https://api.github.com/users/tonybaloney/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/tonybaloney/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/tonybaloney/subscriptions",
          "organizations_url": "https://api.github.com/users/tonybaloney/orgs",
          "repos_url": "https://api.github.com/users/tonybaloney/repos",
          "events_url": "https://api.github.com/users/tonybaloney/events{/privacy}",
          "received_events_url": "https://api.github.com/users/tonybaloney/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2023-08-08T16:01:34Z",
      "updated_at": "2023-11-30T07:45:58Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "(from https://github.com/python/cpython/issues/101524#issuecomment-1661837906)\r\n\r\nC-API exposed by gh-107359:\r\n\r\n* `PyInterpreterID_Type`\r\n* `PyInterpreterID_New()`\r\n* `PyInterpreterID_LookUp()`\r\n* `PyInterpreterState_GetIDObject()`\r\n* `PyInterpreterState_RequireIDRef()`\r\n* \r\n* `atexit_datacallbackfunc`\r\n* `PyUnstable_AtExit()`\r\n* \r\n* `PyUnstable_InterpreterState_GetMainModule()`\r\n\r\nAdd tests too.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-112548\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/107784/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/107784/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/107544",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/107544/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/107544/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/107544/events",
      "html_url": "https://github.com/python/cpython/issues/107544",
      "id": 1831796412,
      "node_id": "I_kwDOBN0Z8c5tLv68",
      "number": 107544,
      "title": "json.dump(..., default=something) takes a unary function but is documented binary",
      "user": {
        "login": "RhysU",
        "id": 85419,
        "node_id": "MDQ6VXNlcjg1NDE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/85419?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RhysU",
        "html_url": "https://github.com/RhysU",
        "followers_url": "https://api.github.com/users/RhysU/followers",
        "following_url": "https://api.github.com/users/RhysU/following{/other_user}",
        "gists_url": "https://api.github.com/users/RhysU/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/RhysU/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/RhysU/subscriptions",
        "organizations_url": "https://api.github.com/users/RhysU/orgs",
        "repos_url": "https://api.github.com/users/RhysU/repos",
        "events_url": "https://api.github.com/users/RhysU/events{/privacy}",
        "received_events_url": "https://api.github.com/users/RhysU/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2023-08-01T18:17:22Z",
      "updated_at": "2023-11-09T22:14:22Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Documentation\r\n\r\n## TLDR\r\nThe following documentation at https://docs.python.org/3.13/library/json.html suggests that `default` should be a member method but light testing shows that it should be unary.\r\n\r\n## Documentation in Question\r\n\r\n*default(o)*\r\n\r\nImplement this method in a subclass such that it returns a serializable object for o, or calls the base implementation (to raise a [TypeError](https://docs.python.org/3.13/library/exceptions.html#TypeError)).\r\n\r\nFor example, to support arbitrary iterators, you could implement [default()](https://docs.python.org/3.13/library/json.html#json.JSONEncoder.default) like this:\r\n```\r\ndef default(self, o):\r\n   try:\r\n       iterable = iter(o)\r\n   except TypeError:\r\n       pass\r\n   else:\r\n       return list(iterable)\r\n   # Let the base class default method raise the TypeError\r\n   return json.JSONEncoder.default(self, o)\r\n```\r\n\r\n## Light testing\r\n\r\nThe current documentation suggests the following pattern that never gets to `TypeError(\"binary\")`:\r\n```\r\nimport json\r\n\r\ndef binary(a, b):\r\n    raise TypeError(\"binary\")\r\n\r\n# UNEXPECTED: TypeError: binary() missing 1 required positional argument: 'b'\r\njson.dumps({\"sample\": object()}, default=binary)\r\n```\r\n\r\nA unary function behaves like I expect, namely entering `unary(...)`:\r\n```\r\nimport json\r\n\r\ndef unary(a):\r\n    raise TypeError(\"unary\")\r\n\r\n# EXPECTED: TypeError: unary\r\njson.dumps({\"sample\": object()}, default=unary)\r\n```\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-108259\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/107544/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/107544/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/107463",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/107463/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/107463/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/107463/events",
      "html_url": "https://github.com/python/cpython/issues/107463",
      "id": 1828008905,
      "node_id": "I_kwDOBN0Z8c5s9TPJ",
      "number": 107463,
      "title": "Consider moving the modules in sources to build within the pythoncore project itself.",
      "user": {
        "login": "AraHaan",
        "id": 15173749,
        "node_id": "MDQ6VXNlcjE1MTczNzQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/15173749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AraHaan",
        "html_url": "https://github.com/AraHaan",
        "followers_url": "https://api.github.com/users/AraHaan/followers",
        "following_url": "https://api.github.com/users/AraHaan/following{/other_user}",
        "gists_url": "https://api.github.com/users/AraHaan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/AraHaan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AraHaan/subscriptions",
        "organizations_url": "https://api.github.com/users/AraHaan/orgs",
        "repos_url": "https://api.github.com/users/AraHaan/repos",
        "events_url": "https://api.github.com/users/AraHaan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/AraHaan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 13,
      "created_at": "2023-07-30T17:24:05Z",
      "updated_at": "2023-08-08T12:31:12Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "Scope: The change would be minor on functionality of the interpreter (no change) what will change is the number of files in all types of distributions and potentially minor slowdowns in the compilation of pythonX.Y.dll/so/dylib (a few seconds or less).\r\n\r\nThe following modules could be set to build into pythonX.Y.dll (and possibly also pythonX.Y.so/dylib):\r\n- _asyncio.pyd/so/dylib\r\n- _bz2.pyd/so/dylib\r\n- _ctypes.pyd/so/dylib\r\n- _decimal.pyd/so/dylib\r\n- _elementtree.pyd/so/dylib\r\n- _hashlib.pyd/so/dylib\r\n- _lzma.pyd/so/dylib\r\n- _msi.pyd (Windows only but is fine to have it only in pythonX.Y.dll)\r\n- _multiprocessing.pyd/so/dylib\r\n- _overlapped.pyd (Windows only but is fine to have it only in pythonX.Y.dll)\r\n- _queue.pyd/so/dylib\r\n- _socket.pyd/so/dylib\r\n- _sqlite3.pyd/so/dylib\r\n- _ssl.pyd/so/dylib\r\n- _uuid.pyd/so/dylib\r\n- _zoneinfo.pyd/so/dylib\r\n- pyexpat.pyd/so/dylib\r\n- select.pyd/so/dylib\r\n- unicodedata.pyd/so/dylib\r\n- winsound.pyd (Windows only but is fine to have it only in pythonX.Y.dll)\r\n\r\nNote: _tkinter would remain excluded due to it not being present in embedded distributions of python (in zip file form).\r\n\r\nPros:\r\n- less files that need to be shipped in both embedded and standard distributions on all supported operating systems. (These pyd files takes up about 2.61 MB on Windows Embed amd64 zip files that could easily be instead part of pythonX.Y.dll since it's 6 MB anyways (largest file in the zip file).\r\n- Easier for users to manually compile python to update files by hand from a previously downloaded embed zip file (say for example they downloaded 3.11.4 zip file and decided to manually compile the latest patches in the 3.11 branch and remain in the same embedded state on the interpreter). A few files vs needing to copy 34 files and sorting through the extra files (*.lib's/*.pyd's, *.exp's, *.dll's can be painful to do when the pcbuild.sln file has 44 projects and people typically just hit build solution without thinking about what projects actually are built for the normal embed distributions).\r\n- For pcbuild.sln the number of projects would be reduced by ~20 (out of 44 which is actually a decent amount).\r\nCons:\r\n- Old versions would need to be fully uninstalled before installing the versions with this change (of the same major and minor version that is).\r\n\r\n# Pitch\r\n\r\nThe pitch here is to simplify all distributions further by having all (except _tkinter) extension modules that are in the python source code (most of which are needed anyways to avoid fatal python errors with it finding the modules if say they forgot to copy them into the correct location) can be avoided by instead linking them into pythonX.Y.dll/so/dylib since they are technically part of the python core in a way. The usage of them would not change at all, just the number of files that would be shipped in each distribution (and also simplifies the script in the source code that actually makes the normal and embedded distributions).\r\n\r\n# Previous discussion\r\n\r\nI am currently unsure if there was any previous discussion on a proposal similar to this. Please comment to this issue if I am not correct however as this has been the first in a long time for me to look back into the python repository.\r\n\r\nAffected Python versions:\r\n- 3.11 (this can start from 3.11.5)\r\n- 3.12 (this can start on the next development release of 3.12)\r\n- Other python versions I think are fine as is (unless determined otherwise).\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-107478\n* gh-107479\n* gh-107480\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/107463/reactions",
        "total_count": 2,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 1,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/107463/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/107265",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/107265/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/107265/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/107265/events",
      "html_url": "https://github.com/python/cpython/issues/107265",
      "id": 1821030435,
      "node_id": "I_kwDOBN0Z8c5sirgj",
      "number": 107265,
      "title": "Decoding instructions should handle ENTER_EXECUTOR",
      "user": {
        "login": "gvanrossum",
        "id": 2894642,
        "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gvanrossum",
        "html_url": "https://github.com/gvanrossum",
        "followers_url": "https://api.github.com/users/gvanrossum/followers",
        "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
        "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
        "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
        "repos_url": "https://api.github.com/users/gvanrossum/repos",
        "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 15,
      "created_at": "2023-07-25T19:51:22Z",
      "updated_at": "2024-08-01T03:31:28Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "There's a variety of places where we walk over an array of instructions, using some variant of\r\n```c\r\nfor (int i = 0; i < num_instructions;) {\r\n    int opcode = instructions[i].op.code;\r\n    // <decode EXTENDED_ARG>\r\n    opcode = _PyOpcode_Deopt[opcode];  // or _Py_GetBaseOpcode(code, i)\r\n    // <handle opcode>\r\n    i += 1 + _PyOpcode_Caches[opcode];  // or _PyInstruction_GetLength(code, i)\r\n}\r\n```\r\nAll these make the mistake that if `opcode` is `ENTER_EXECUTOR`, it may obscure an underlying `JUMP_BACKWARD` instruction, which has a cache entry.\r\n\r\nI fixed this in gh-107256 for `_PyInstruction_GetLength()` and it was first reported in gh-107082, but there are a number of other occurrences. Basically every time we consult `_PyOpcode_Caches` we should ensure that the index is not `ENTER_EXECUTOR`.\r\n\r\nCC: @markshannon \r\n\r\n---\r\n\r\nPlaces where I found this:\r\n\r\n- [x] _PyInstruction_GetLength\r\n- [x] code_richcompare\r\n- [x] code_hash\r\n- [x] ~_Py_GetBaseOpcode~ **[should not be \"fixed\", it would break callers that need the oparg]**\r\n- [ ] mark_stacks\r\n- [ ] _PyFrame_OpAlreadyRan\r\n- [x] de_instrument?\r\n- [x] initialize_tools?\r\n- [x] remove_tools?\r\n- [x] _PyCode_Quicken?\r\n\r\nThere are possibly others.\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-108165\r\n* gh-108188\r\n* gh-108366\r\n* gh-108460\r\n* gh-108482\r\n* gh-108485\r\n* gh-108539\r\n* gh-109420\n* gh-111645\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/107265/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/107265/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/106996",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/106996/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/106996/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/106996/events",
      "html_url": "https://github.com/python/cpython/issues/106996",
      "id": 1816704427,
      "node_id": "I_kwDOBN0Z8c5sSLWr",
      "number": 106996,
      "title": "Improve Turtle graphics documentation",
      "user": {
        "login": "evildmp",
        "id": 86222,
        "node_id": "MDQ6VXNlcjg2MjIy",
        "avatar_url": "https://avatars.githubusercontent.com/u/86222?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/evildmp",
        "html_url": "https://github.com/evildmp",
        "followers_url": "https://api.github.com/users/evildmp/followers",
        "following_url": "https://api.github.com/users/evildmp/following{/other_user}",
        "gists_url": "https://api.github.com/users/evildmp/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/evildmp/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/evildmp/subscriptions",
        "organizations_url": "https://api.github.com/users/evildmp/orgs",
        "repos_url": "https://api.github.com/users/evildmp/repos",
        "events_url": "https://api.github.com/users/evildmp/events{/privacy}",
        "received_events_url": "https://api.github.com/users/evildmp/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2023-07-22T09:49:53Z",
      "updated_at": "2023-11-28T12:19:52Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Improving the turtle graphics documentation via a series of PRs\r\n\r\nThe turtle graphics module has some comprehensive documentation, but could be improved with some:\r\n\r\n* restructuring\r\n* new material aimed at getting users more quickly into a successful experience\r\n\r\nI propose to do this via a series of small PRs each targeting a particular incremental improvement.\r\n\r\n# Pitch\r\n\r\nThe Turtle graphics module looks like a good place where [Di\u00e1taxis](https://diataxis.fr/) can be applied. It's quite self-contained, and will be an effective showcase for that kind of work.\r\n\r\nI will submit small PRs (some could be very small), so that the purpose of each one is clear, and together they will provide a readable history of how documentation improvement works in practice under Di\u00e1taxis.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-106997\n* gh-107072\n* gh-107109\n* gh-107110\n* gh-107153\n* gh-107234\n* gh-107233\n* gh-107244\n* gh-107335\n* gh-107336\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/106996/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 1,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/106996/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/106939",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/106939/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/106939/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/106939/events",
      "html_url": "https://github.com/python/cpython/issues/106939",
      "id": 1814969520,
      "node_id": "I_kwDOBN0Z8c5sLjyw",
      "number": 106939,
      "title": "Copying bytes object to shared memory list truncates trailing zeros",
      "user": {
        "login": "pinkhamr-fb",
        "id": 95488381,
        "node_id": "U_kgDOBbEJfQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/95488381?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinkhamr-fb",
        "html_url": "https://github.com/pinkhamr-fb",
        "followers_url": "https://api.github.com/users/pinkhamr-fb/followers",
        "following_url": "https://api.github.com/users/pinkhamr-fb/following{/other_user}",
        "gists_url": "https://api.github.com/users/pinkhamr-fb/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pinkhamr-fb/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pinkhamr-fb/subscriptions",
        "organizations_url": "https://api.github.com/users/pinkhamr-fb/orgs",
        "repos_url": "https://api.github.com/users/pinkhamr-fb/repos",
        "events_url": "https://api.github.com/users/pinkhamr-fb/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pinkhamr-fb/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4204725259,
          "node_id": "LA_kwDOBN0Z8c76nwQL",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-multiprocessing",
          "name": "topic-multiprocessing",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2023-07-21T00:12:20Z",
      "updated_at": "2023-12-16T18:12:48Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n**tl;dr; See [stack overflow post](https://stackoverflow.com/questions/76734284/copying-bytes-object-to-shared-memory-list-truncates-trailing-zeros)**\r\n\r\nWhen copying a `bytes` object to a shareable list, the trailing zeros are stripped causing data loss. This doesn't appear in the documentation as far as I can tell, and seems to be unexpected behavior related to the implementation.\r\n\r\nExample code:\r\n```python\r\nfrom multiprocessing import shared_memory as shm\r\n\r\nshmList = shm.ShareableList([bytes(50)])\r\ntestBytes = bytes.fromhex(\"00112233445566778899aabbccddeeff0000\")\r\n\r\nshmList[0] = testBytes\r\nprint(testBytes)\r\nprint(shmList[0])\r\n\r\nshmList.shm.close()\r\nshmList.shm.unlink()\r\n```\r\n\r\nOutput:\r\n```\r\nb'\\x00\\x11\"3DUfw\\x88\\x99\\xaa\\xbb\\xcc\\xdd\\xee\\xff\\x00\\x00'\r\nb'\\x00\\x11\"3DUfw\\x88\\x99\\xaa\\xbb\\xcc\\xdd\\xee\\xff'\r\n```\r\n\r\nOffending portion of CPython [code](https://github.com/python/cpython/blob/d81b4f8ff84311fa737e62f2883442ec06d7d5d8/Lib/multiprocessing/shared_memory.py#L280):\r\n```python\r\n_back_transforms_mapping = {\r\n        0: lambda value: value,                   # int, float, bool\r\n        1: lambda value: value.rstrip(b'\\x00').decode(_encoding),  # str\r\n        2: lambda value: value.rstrip(b'\\x00'),   # bytes\r\n        3: lambda _value: None,                   # None\r\n    }\r\n```\r\n\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-107266\r\n* gh-107269\r\n* gh-107270\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/106939/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/106939/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/106915",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/106915/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/106915/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/106915/events",
      "html_url": "https://github.com/python/cpython/issues/106915",
      "id": 1814194170,
      "node_id": "I_kwDOBN0Z8c5sImf6",
      "number": 106915,
      "title": "PyImport_AddModuleRef is questionable ",
      "user": {
        "login": "encukou",
        "id": 302922,
        "node_id": "MDQ6VXNlcjMwMjkyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/encukou",
        "html_url": "https://github.com/encukou",
        "followers_url": "https://api.github.com/users/encukou/followers",
        "following_url": "https://api.github.com/users/encukou/following{/other_user}",
        "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
        "organizations_url": "https://api.github.com/users/encukou/orgs",
        "repos_url": "https://api.github.com/users/encukou/repos",
        "events_url": "https://api.github.com/users/encukou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/encukou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4019060898,
          "node_id": "LA_kwDOBN0Z8c7vjgCi",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-C-API",
          "name": "topic-C-API",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "vstinner",
        "id": 194129,
        "node_id": "MDQ6VXNlcjE5NDEyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vstinner",
        "html_url": "https://github.com/vstinner",
        "followers_url": "https://api.github.com/users/vstinner/followers",
        "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
        "organizations_url": "https://api.github.com/users/vstinner/orgs",
        "repos_url": "https://api.github.com/users/vstinner/repos",
        "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vstinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "vstinner",
          "id": 194129,
          "node_id": "MDQ6VXNlcjE5NDEyOQ==",
          "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vstinner",
          "html_url": "https://github.com/vstinner",
          "followers_url": "https://api.github.com/users/vstinner/followers",
          "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
          "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
          "organizations_url": "https://api.github.com/users/vstinner/orgs",
          "repos_url": "https://api.github.com/users/vstinner/repos",
          "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vstinner/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 14,
      "created_at": "2023-07-20T14:54:36Z",
      "updated_at": "2023-11-07T10:46:25Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "The function `PyImport_AddModuleRef`, which was recently added to the stable ABI, is questionable.\r\n\r\nIt returns an already loaded module, or a new empty module, but doesn't give any indication of which one of those it did. IMO, that means you can't really use it for anything except a module that's supposed to stay empty.\r\n \r\nIt is not clear to me if this function actually useful for anything except the `__main__` module.\r\nMaybe it would be more useful as a recipe in the docs that users could adapt to their needs, rather than API. Or it should be changed to make it easier to use safely.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-111559\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/106915/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/106915/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/106883",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/106883/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/106883/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/106883/events",
      "html_url": "https://github.com/python/cpython/issues/106883",
      "id": 1811311864,
      "node_id": "I_kwDOBN0Z8c5r9mz4",
      "number": 106883,
      "title": "Deadlock in threaded application when using `sys._current_frames`",
      "user": {
        "login": "mmohrhard",
        "id": 6321320,
        "node_id": "MDQ6VXNlcjYzMjEzMjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6321320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mmohrhard",
        "html_url": "https://github.com/mmohrhard",
        "followers_url": "https://api.github.com/users/mmohrhard/followers",
        "following_url": "https://api.github.com/users/mmohrhard/following{/other_user}",
        "gists_url": "https://api.github.com/users/mmohrhard/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mmohrhard/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mmohrhard/subscriptions",
        "organizations_url": "https://api.github.com/users/mmohrhard/orgs",
        "repos_url": "https://api.github.com/users/mmohrhard/repos",
        "events_url": "https://api.github.com/users/mmohrhard/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mmohrhard/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2023-07-19T07:12:14Z",
      "updated_at": "2024-03-28T17:40:35Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\nWhen using `sys._current_frames` in a threaded application there is a high risk of a deadlock in the interpreter. Below is my analysis from one such hang. We have never seen this problem with Python 3.8 but experience it regularly with Python 3.11. I know that the `sys._current_frames` documentation warns about the function and one solution to this bug report could be to document that the function is not thread safe.\r\n\r\nWe have a huge number of threads in this application but I'll limit the output to the two threads that cause the deadlock.\r\n\r\nWe have a thread calling `sys._current_frames` with a Python stack trace:\r\n\r\n```\r\nThread 118868 (idle): \"Profile\"\r\n    _gc_callback (distributed/utils_perf.py:184)\r\n    _watch (distributed/profile.py:261)\r\n    run (threading.py:975)\r\n    _bootstrap_inner (threading.py:1038)\r\n    _bootstrap (threading.py:995)\r\n```\r\n\r\nand a corresponding C stack trace:\r\n\r\n```\r\nThread 325 (Thread 0x7f8b992d6700 (LWP 118868) \"\"):\r\n#0  0x00007f8ce83adde2 in pthread_cond_timedwait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0\r\n#1  0x00000000004eae32 in PyCOND_TIMEDWAIT (us=<optimized out>, mut=<optimized out>, cond=0x879128 <_PyRuntime+392>) at /usr/local/src/conda/python-3.11.4/Python/condvar.h:73\r\n#2  take_gil (tstate=0x7f8b992d54e0) at /usr/local/src/conda/python-3.11.4/Python/ceval_gil.h:250\r\n#3  0x00000000005134bc in eval_frame_handle_pending (tstate=<optimized out>) at /usr/local/src/conda/python-3.11.4/Python/ceval.c:1211\r\n#4  _PyEval_EvalFrameDefault (tstate=<optimized out>, frame=<optimized out>, throwflag=<optimized out>) at /usr/local/src/conda/python-3.11.4/Python/ceval.c:1754\r\n#5  0x000000000055451f in _PyEval_EvalFrame (throwflag=0, frame=0x7f8bb645e248, tstate=0x5c60c20) at /usr/local/src/conda/python-3.11.4/Include/internal/pycore_ceval.h:73                                                                    #6  _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, func=0x7f8cdc1d2340, tstate=0x5c60c20) at /usr/local/src/conda/python-3.11.4/Python/ceval.c:6439\r\n#7  _PyFunction_Vectorcall (kwnames=<optimized out>, nargsf=<optimized out>, stack=<optimized out>, func=<function at remote 0x7f8cdc1d2340>) at /usr/local/src/conda/python-3.11.4/Objects/call.c:393\r\n#8  _PyObject_VectorcallTstate (tstate=0x5c60c20, callable=<function at remote 0x7f8cdc1d2340>, args=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.11.4/Include/internal/pycore_call.h:92#9  0x0000000000554172 in method_vectorcall (method=method@entry=<method at remote 0x7f8bce070c00>, args=args@entry=0x7f8b992d57d0, nargsf=<optimized out>, kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.11.4/Objects/classobject.c:89\r\n#10 0x00000000004fe378 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7f8b992d57d0, callable=<method at remote 0x7f8bce070c00>, tstate=0x5c60c20) at /usr/local/src/conda/python-3.11.4/Include/internal/pycore_call.h:92\r\n#11 _PyObject_CallFunctionVa (is_size_t=0, va=0x7f8b992d57b0, format=<optimized out>, callable=<method at remote 0x7f8bce070c00>, tstate=0x5c60c20) at /usr/local/src/conda/python-3.11.4/Objects/call.c:536\r\n#12 PyObject_CallFunction (callable=<method at remote 0x7f8bce070c00>, format=<optimized out>) at /usr/local/src/conda/python-3.11.4/Objects/call.c:558\r\n#13 0x00000000005c23d2 in invoke_gc_callback (phase=0x654129 \"stop\", generation=<optimized out>, collected=<optimized out>, uncollectable=<optimized out>, tstate=<optimized out>, tstate=<optimized out>) at /usr/local/src/conda/python-3.11.4/Modules/gcmodule.c:1378\r\n#14 0x00000000005c230a in gc_collect_with_callback (tstate=0x5c60c20, generation=0) at /usr/local/src/conda/python-3.11.4/Modules/gcmodule.c:1401\r\n#15 0x000000000053b418 in _PyObject_GC_Link (op=set()) at /usr/local/src/conda/python-3.11.4/Modules/gcmodule.c:2270\r\n#16 gc_alloc (presize=<optimized out>, basicsize=<optimized out>) at /usr/local/src/conda/python-3.11.4/Modules/gcmodule.c:2290\r\n#17 _PyObject_GC_NewVar (nitems=<optimized out>, tp=0x869fe0 <PyFrame_Type>) at /usr/local/src/conda/python-3.11.4/Modules/gcmodule.c:2318\r\n#18 _PyFrame_New_NoTrack (code=<optimized out>, code=<optimized out>) at /usr/local/src/conda/python-3.11.4/Objects/frameobject.c:1024\r\n#19 _PyFrame_MakeAndSetFrameObject (frame=0x7f8b90e95a68) at /usr/local/src/conda/python-3.11.4/Python/frame.c:33\r\n#20 0x00000000004e19df in _PyFrame_GetFrameObject (frame=0x7f8b90e95a68) at /usr/local/src/conda/python-3.11.4/Include/internal/pycore_frame.h:171                                                                                            #21 _PyThread_CurrentFrames () at /usr/local/src/conda/python-3.11.4/Python/pystate.c:1420\r\n#22 0x00000000005061c1 in cfunction_vectorcall_NOARGS (func=<built-in method _current_frames of module object at remote 0x7f8ce8746ca0>, args=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.11.4/Include/cpython/methodobject.h:52\r\n#23 0x000000000051bde1 in _PyObject_VectorcallTstate (kwnames=<optimized out>, nargsf=<optimized out>, args=<optimized out>, callable=<built-in method _current_frames of module object at remote 0x7f8ce8746ca0>, tstate=0x5c60c20) at /usr/local/src/conda/python-3.11.4/Include/internal/pycore_call.h:92\r\n#24 PyObject_Vectorcall (callable=<built-in method _current_frames of module object at remote 0x7f8ce8746ca0>, args=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.11.4/Objects/call.c:299\r\n#25 0x000000000050ed83 in _PyEval_EvalFrameDefault (tstate=<optimized out>, frame=<optimized out>, throwflag=<optimized out>) at /usr/local/src/conda/python-3.11.4/Python/ceval.c:4774\r\n#26 0x0000000000534f13 in _PyEval_EvalFrame (throwflag=0, frame=0x7f8bb645e188, tstate=0x5c60c20) at /usr/local/src/conda/python-3.11.4/Include/internal/pycore_ceval.h:73\r\n#27 _PyEval_Vector (kwnames=<optimized out>, argcount=0, args=0x7f8bce07e978, locals=0x0, func=<optimized out>, tstate=0x5c60c20) at /usr/local/src/conda/python-3.11.4/Python/ceval.c:6439 \r\n#28 _PyFunction_Vectorcall (func=<optimized out>, stack=0x7f8bce07e978, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.11.4/Objects/call.c:393\r\n#29 0x000000000053ef0d in _PyVectorcall_Call (kwargs=<optimized out>, tuple=<optimized out>, callable=<function at remote 0x7f8cdc121800>, func=0x534da0 <_PyFunction_Vectorcall>, tstate=0x5c60c20) at /usr/local/src/conda/python-3.11.4/Objects/call.c:257\r\n#30 _PyObject_Call (kwargs=<optimized out>, args=<optimized out>, callable=<function at remote 0x7f8cdc121800>, tstate=0x5c60c20) at /usr/local/src/conda/python-3.11.4/Objects/call.c:328\r\n#31 PyObject_Call (callable=<function at remote 0x7f8cdc121800>, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.11.4/Objects/call.c:355\r\n#32 0x000000000051290a in do_call_core (use_tracing=<optimized out>, kwdict={'thread_id': 140243172636480, 'interval': '10ms', 'cycle': '1000ms', 'log': <collections.deque at remote 0x7f8bc008b1f0>, 'omit': ('profile.py', 'selectors.py'), 'stop': <function at remote 0x7f8bc0058220>}, callargs=(), func=<function at remote 0x7f8cdc121800>, tstate=<optimized out>) at /usr/local/src/conda/python-3.11.4/Python/ceval.c:7357\r\n#33 _PyEval_EvalFrameDefault (tstate=<optimized out>, frame=<optimized out>, throwflag=<optimized out>) at /usr/local/src/conda/python-3.11.4/Python/ceval.c:5381\r\n#34 0x000000000055451f in _PyEval_EvalFrame (throwflag=0, frame=0x7f8bb645e020, tstate=0x5c60c20) at /usr/local/src/conda/python-3.11.4/Include/internal/pycore_ceval.h:73\r\n#35 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, func=0x7f8ce0e41b20, tstate=0x5c60c20) at /usr/local/src/conda/python-3.11.4/Python/ceval.c:6439\r\n#36 _PyFunction_Vectorcall (kwnames=<optimized out>, nargsf=<optimized out>, stack=<optimized out>, func=<function at remote 0x7f8ce0e41b20>) at /usr/local/src/conda/python-3.11.4/Objects/call.c:393\r\n#37 _PyObject_VectorcallTstate (tstate=0x5c60c20, callable=<function at remote 0x7f8ce0e41b20>, args=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.11.4/Include/internal/pycore_call.h:92\r\n#38 0x00000000005541f8 in method_vectorcall (method=<optimized out>, args=0x8875d0 <_PyRuntime+58928>, nargsf=<optimized out>, kwnames=0x0) at /usr/local/src/conda/python-3.11.4/Objects/classobject.c:67 \r\n#39 0x0000000000627f6f in thread_run (boot_raw=0x7f8cc9c987b0) at /usr/local/src/conda/python-3.11.4/Modules/_threadmodule.c:1092\r\n#40 0x00000000005f63d4 in pythread_wrapper (arg=<optimized out>) at /usr/local/src/conda/python-3.11.4/Python/thread_pthread.h:241\r\n#41 0x00007f8ce83a9ea5 in start_thread () from /lib64/libpthread.so.0\r\n#42 0x00007f8ce79c9b0d in clone () from /lib64/libc.so.6\r\n```\r\n\r\nSo, this thread does not hold the GIL but seems to hold the `runtime->interpreters.mutex`\r\n\r\nWe have another thread that seems to hold the GIL:\r\n\r\n```\r\nThread 388 (Thread 0x7f8b62f7f700 (LWP 120217) \"\"):\r\n#0  0x00007f8ce83afb3b in do_futex_wait.constprop () from /lib64/libpthread.so.0\r\n#1  0x00007f8ce83afbcf in __new_sem_wait_slow.constprop.0 () from /lib64/libpthread.so.0\r\n#2  0x00007f8ce83afc6b in sem_wait@@GLIBC_2.2.5 () from /lib64/libpthread.so.0                                                                                                                                                                #3  0x00000000004ea969 in PyThread_acquire_lock_timed (intr_flag=<optimized out>, microseconds=<optimized out>, lock=<optimized out>) at /usr/local/src/conda/python-3.11.4/Python/thread_pthread.h:497\r\n#4  PyThread_acquire_lock (lock=0x18bd040, waitflag=<optimized out>) at /usr/local/src/conda/python-3.11.4/Python/thread_pthread.h:751\r\n#5  0x00000000005f7266 in tstate_delete_common (tstate=0x7f8cc417c250, gilstate=0x8791d8 <_PyRuntime+568>) at /usr/local/src/conda/python-3.11.4/Python/pystate.c:1080\r\n#6  0x00000000005f6d93 in _PyThreadState_DeleteCurrent (tstate=0x7f8cc417c250) at /usr/local/src/conda/python-3.11.4/Python/pystate.c:1132\r\n#7  0x00000000005f63d4 in pythread_wrapper (arg=<optimized out>) at /usr/local/src/conda/python-3.11.4/Python/thread_pthread.h:241\r\n#8  0x00007f8ce83a9ea5 in start_thread () from /lib64/libpthread.so.0\r\n#9  0x00007f8ce79c9b0d in clone () from /lib64/libc.so.6\r\n```\r\n\r\nSee the `native_thread_id` in the following gdb output.\r\n\r\n```\r\n(gdb) p *PyThreadState_Get()\r\n$10 = {prev = 0x7f8cc4269680, next = 0x7f8c94483340, interp = 0x8875d8 <_PyRuntime+58936>, _initialized = 1, _static = 0, recursion_remaining = 1000, recursion_limit = 1000, recursion_headroom = 0, tracing = 0, tracing_what = 0, \r\n  cframe = 0x7f8cc417c3a0, c_profilefunc = 0x0, c_tracefunc = 0x0, c_profileobj = 0x0, c_traceobj = 0x0, curexc_type = 0x0, curexc_value = 0x0, curexc_traceback = 0x0, exc_info = 0x7f8cc417c390, dict = 0x0, gilstate_counter = 1, \r\n  async_exc = 0x0, thread_id = 140236637599488, native_thread_id = 120217, trash_delete_nesting = 0, trash_delete_later = 0x0, on_delete = 0x628f10 <release_sentinel>, on_delete_data = 0x7f8b974b1ee0, \r\n  coroutine_origin_tracking_depth = 0, async_gen_firstiter = 0x0, async_gen_finalizer = 0x0, context = 0x0, context_ver = 1, id = 1085, trace_info = {code = 0x0, bounds = {ar_start = 0, ar_end = 0, ar_line = 0, opaque = {\r\n        computed_line = 0, lo_next = 0x0, limit = 0x0}}}, datastack_chunk = 0x7f8b99522000, datastack_top = 0x7f8b99522020, datastack_limit = 0x7f8b99526000, exc_state = {exc_value = 0x0, previous_item = 0x0}, root_cframe = {\r\n    use_tracing = 0 '\\000', current_frame = 0x0, previous = 0x0}}\r\n```\r\n\r\n# Your environment\r\n\r\nPython 3.11.4 on a CentOS 7 machine with conda-forge binaries\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-117332\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/106883/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/106883/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/106865",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/106865/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/106865/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/106865/events",
      "html_url": "https://github.com/python/cpython/issues/106865",
      "id": 1810043347,
      "node_id": "I_kwDOBN0Z8c5r4xHT",
      "number": 106865,
      "title": "A warning should be added to difflib documentation about SequenceMatcher performance",
      "user": {
        "login": "maathieu",
        "id": 382045,
        "node_id": "MDQ6VXNlcjM4MjA0NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/382045?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maathieu",
        "html_url": "https://github.com/maathieu",
        "followers_url": "https://api.github.com/users/maathieu/followers",
        "following_url": "https://api.github.com/users/maathieu/following{/other_user}",
        "gists_url": "https://api.github.com/users/maathieu/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/maathieu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/maathieu/subscriptions",
        "organizations_url": "https://api.github.com/users/maathieu/orgs",
        "repos_url": "https://api.github.com/users/maathieu/repos",
        "events_url": "https://api.github.com/users/maathieu/events{/privacy}",
        "received_events_url": "https://api.github.com/users/maathieu/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "tim-one",
        "id": 14852019,
        "node_id": "MDQ6VXNlcjE0ODUyMDE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/14852019?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tim-one",
        "html_url": "https://github.com/tim-one",
        "followers_url": "https://api.github.com/users/tim-one/followers",
        "following_url": "https://api.github.com/users/tim-one/following{/other_user}",
        "gists_url": "https://api.github.com/users/tim-one/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tim-one/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tim-one/subscriptions",
        "organizations_url": "https://api.github.com/users/tim-one/orgs",
        "repos_url": "https://api.github.com/users/tim-one/repos",
        "events_url": "https://api.github.com/users/tim-one/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tim-one/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "tim-one",
          "id": 14852019,
          "node_id": "MDQ6VXNlcjE0ODUyMDE5",
          "avatar_url": "https://avatars.githubusercontent.com/u/14852019?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/tim-one",
          "html_url": "https://github.com/tim-one",
          "followers_url": "https://api.github.com/users/tim-one/followers",
          "following_url": "https://api.github.com/users/tim-one/following{/other_user}",
          "gists_url": "https://api.github.com/users/tim-one/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/tim-one/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/tim-one/subscriptions",
          "organizations_url": "https://api.github.com/users/tim-one/orgs",
          "repos_url": "https://api.github.com/users/tim-one/repos",
          "events_url": "https://api.github.com/users/tim-one/events{/privacy}",
          "received_events_url": "https://api.github.com/users/tim-one/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2023-07-18T14:22:57Z",
      "updated_at": "2023-07-21T06:15:48Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Documentation\r\n\r\nSome functions of [difflib.SequenceMatcher](https://docs.python.org/3/library/difflib.html?highlight=sequencematcher#) perform very poorly in real-world scenarios (for example get_opcodes() takes several minutes to return a list of tuples for two identical files that are 70kb long). This is reported in different places online, such as on [StackOverflow](https://stackoverflow.com/questions/25680947/pythons-difflib-sequencematcher-speed-up).\r\n\r\nIt would be nice to add a note about the performance in the doc, with possible workarounds (for example there is a great performance improvement if one opens the files with readlines() and compares two lists of lines, instead of opening files with read() and compare two strings).\r\n\r\nThanks :-)\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-106877\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/106865/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/106865/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/106747",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/106747/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/106747/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/106747/events",
      "html_url": "https://github.com/python/cpython/issues/106747",
      "id": 1805110819,
      "node_id": "I_kwDOBN0Z8c5rl84j",
      "number": 106747,
      "title": "Glob behavior is inconsistent across libraries",
      "user": {
        "login": "jaraco",
        "id": 308610,
        "node_id": "MDQ6VXNlcjMwODYxMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/308610?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jaraco",
        "html_url": "https://github.com/jaraco",
        "followers_url": "https://api.github.com/users/jaraco/followers",
        "following_url": "https://api.github.com/users/jaraco/following{/other_user}",
        "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions",
        "organizations_url": "https://api.github.com/users/jaraco/orgs",
        "repos_url": "https://api.github.com/users/jaraco/repos",
        "events_url": "https://api.github.com/users/jaraco/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jaraco/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 18,
      "created_at": "2023-07-14T16:00:34Z",
      "updated_at": "2024-03-08T20:28:31Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "> the [Python] docs for `pathlib.glob` are unclear on the meaning of `**`\r\n\r\nYou are right, and it gets even more confusing:\r\n\r\n* `glob.glob('**')` returns dirs and files, non-recursively, not including `.`\r\n* `glob.glob('**', recursive=True)` returns dirs and files, recursively, not including `.`\r\n* `list(pathlib.Path('.').glob('**'))` returns only dirs, recursively, and also includes `.`\r\n\r\nI think there should be a Python upstream issue to document all of that, including the differences between `glob` and `pathlib`.\r\n\r\nThen `zipp` could implement what's documented for `pathlib`.\r\n\r\n## Repro\r\n\r\nPython 3.10.11\r\n\r\n```sh\r\nmkdir -p dir/subdir ; touch toplevel.txt dir/indir.txt\r\n```\r\n\r\ncreates:\r\n\r\n```\r\ntoplevel.txt\r\ndir/\r\n  indir.txt\r\n  subdir/\r\n```\r\n\r\n```python\r\n>>> import glob, pathlib\r\n\r\n>>> glob.glob('**')\r\n['dir', 'toplevel.txt']\r\n\r\n>>> glob.glob('**', recursive=True)\r\n['dir', 'dir/subdir', 'dir/indir.txt', 'toplevel.txt']\r\n\r\n>>> list(pathlib.Path('.').glob('**'))\r\n[PosixPath('.'), PosixPath('dir'), PosixPath('dir/subdir')]\r\n```\r\n\r\n_Originally posted by @nh2 in https://github.com/jaraco/zipp/issues/102#issuecomment-1634883323_\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-112365\n* gh-115056\n* gh-116319\n* gh-116518\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/106747/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/106747/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/106722",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/106722/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/106722/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/106722/events",
      "html_url": "https://github.com/python/cpython/issues/106722",
      "id": 1803163737,
      "node_id": "I_kwDOBN0Z8c5rehhZ",
      "number": 106722,
      "title": "Defer finalizers and complex dealloc functions to eval-breaker points.",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2023-07-13T14:33:50Z",
      "updated_at": "2023-11-29T21:53:19Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "`Py_DECREF()` is ubiquitous in the interpreter and in C extensions.\r\nThis is a problem for optimization, as `Py_DECREF()` can deallocate objects, resulting in potentially arbitrary code execution.\r\nArbitrary code execution means that anything can change, undermining any analysis or assumptions that may have been made by the optimizer.\r\n\r\nTo allow us to optimize effectively, we want to defer this arbitrary code execution until a known point. We choose the eval-breaker mechanism, as this can already execute arbitrary code.\r\n\r\nThe challenge is to defer deallocation by as little as possible, and to minimize the performance impact.  \r\n\r\nhttps://github.com/faster-cpython/ideas/issues/582\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-106685\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/106722/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/106722/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/106529",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/106529/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/106529/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/106529/events",
      "html_url": "https://github.com/python/cpython/issues/106529",
      "id": 1794053965,
      "node_id": "I_kwDOBN0Z8c5q7xdN",
      "number": 106529,
      "title": "Branching design for Tier 2 (uops) interpreter",
      "user": {
        "login": "gvanrossum",
        "id": 2894642,
        "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gvanrossum",
        "html_url": "https://github.com/gvanrossum",
        "followers_url": "https://api.github.com/users/gvanrossum/followers",
        "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
        "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
        "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
        "repos_url": "https://api.github.com/users/gvanrossum/repos",
        "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 21,
      "created_at": "2023-07-07T18:47:24Z",
      "updated_at": "2023-11-17T19:09:54Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "This issue is part of the larger epic of gh-104584. In PR gh-106393 I tried to implement branching, but it was premature. Here's a better design, following @markshannon's [guidance](https://github.com/python/cpython/pull/106393#discussion_r1252794047).\r\n\r\nWe have the following jump instructions (not counting the instrumented versions):\r\n\r\nUnconditional jumps:\r\n\r\n- [x] JUMP_BACKWARD\r\n- [ ] JUMP_BACKWARD_NO_INTERRUPT\r\n- [x] JUMP_FORWARD\r\n\r\nBranches, a.k.a. conditional jumps:\r\n\r\n- [x] POP_JUMP_IF_FALSE, POP_JUMP_IF_TRUE, ~POP_JUMP_IF_NONE, POP_JUMP_IF_NOT_NONE~\r\n- [x] FOR_ITER's specializations:\r\n  - [x] FOR_ITER_LIST\r\n  - [x] FOR_ITER_TUPLE\r\n  - [x] FOR_ITER_RANGE\r\n- [ ] FOR_ITER_GEN\r\n- [ ] SEND\r\n\r\n- [ ] Add counters to to POP_JUMP_IF_{FALSE,TRUE} to determine likeliness\r\n\r\nThe translation strategies could be as follows:\r\n\r\n## Unconditional jumps\r\n\r\n### **JUMP_BACKWARD**\r\n\r\n- If this jumps to exactly the top of the current trace, emit a Tier 2 JUMP_TO_TOP uop, and stop projecting (i.e., exit the trace generation loop). The JUMP_TO_TOP uop implementation should include a CHECK_EVAL_BREAKER call.\r\n- If this jumps anywhere else, emit a SAVE_IP uop with the destination of the jump, followed by an EXIT_TRACE uop, and stop projecting.\r\n\r\n### **JUMP_BACKWARD_NO_INTERRUPT**\r\n\r\n- Since this is typically only used in special circumstances, just emit a SAVE_IP instruction with the destination and an EXIT_TRACE uop, and stop projecting.\r\n- Alternatively, we could make CHECK_EVAL_BREAKER a separate UOP that is inserted for JUMP_BACKWARD but not for JUMP_BACKWARD_NO_INTERRUPT, and otherwise treat the two backward jumps the same.\r\n\r\n### **JUMP_FORWARD**\r\n\r\n- Emit a SAVE_IP uop with the destination of the jump, and continue projecting from there (i.e. set `instr` to the destination of the jump).\r\n\r\n## Conditional jumps (branches)\r\n\r\n### **POP_JUMP_IF_FALSE** and friends\r\n\r\nConsider the following Python code:\r\n```py\r\nif cond:\r\n    block\r\nrest\r\n```\r\nThis translates roughly to the following Tier 1 bytecode (using B1, B2, ... to label Tier 1 instructions, and `<cond>`, `<block>` etc. to represent code blocks that evaluate or execute the corresponding Python fragments):\r\n```\r\nB1: <cond>\r\nB2: POP_JUMP_IF_FALSE B4\r\nB3: <block>\r\nB4: <rest>\r\nB5:\r\n```\r\nI propose the following translation into Tier 2 uops, assuming the branch is \"unlikely\":\r\n```\r\n    SAVE_IP B1\r\n    <cond>\r\n    SAVE_IP B2\r\n    JUMP_IF_FALSE stub\r\n    POP_TOP\r\n    SAVE_IP B3\r\n    <block>\r\n    SAVE_IP B4\r\n    EXIT_TRACE\r\n\r\nstub:\r\n    POP_TOP\r\n    SAVE_IP B4\r\n    EXIT_TRACE\r\n```\r\nWhere JUMP_IF_FALSE inspects the top of stack but doesn't pop it, and has an argument that executes a jump in the Tier 2 uop instruction sequence.\r\n\r\nIf the branch is \"likely\", we do this instead:\r\n```\r\n    SAVE_IP B1\r\n    <cond>\r\n    SAVE_IP B2\r\n    JUMP_IF_TRUE stub\r\n    POP_TOP\r\n    SAVE_IP B4\r\n    <rest>\r\n    SAVE_IP B5\r\n    EXIT_TRACE\r\n\r\nstub:\r\n    POP_TOP\r\n    SAVE_IP B3\r\n    EXIT_TRACE\r\n```\r\nNote how in this case, `<rest>` is projected as part of the trace, while `<block>` is not, since the likely case is that we jump over `<block>` to `<rest>`.\r\n\r\nFor the other simple conditional jumps (POP_JUMP_IF_TRUE, ~POP_JUMP_IF_NONE, POP_JUMP_IF_NOT_NONE~) we do the same: if the jump is unlikely, emit a JUMP_IF_XXX uop and a stub; if the jump is likely, emit the inverse JUMP_IF_NOT_XXX uop and a different stub, and continue projecting at the destination of the original jump bytecode.\r\n\r\nI propose to have hand-written cases both in the superblock generator and in the Tier 2 interpreter for these, since the translations are too irregular to fit easily in the macro expansion data structure. The stub generation will require additional logic and data structures in `translate_bytecode_to_trace()` to keep track of the stubs required so far, the available space for those, and the back-patching required to set the operands for the JUMP_IF_XXX uops.\r\n\r\n### **FOR_ITER** and (especially) its specializations\r\n\r\nThe common case for these is not to jump. The bytecode definitions are too complex to duplicate in hand-written Tier 2 uops. My proposal is to change these in bytecodes.c so that, instead of using the `JUMPBY(n)` macro, they use `JUMPBY_POP_DISPATCH(n)`, which in Tier 1 translates into just `JUMPBY(n)`, but in Tier 2 translates into roughly\r\n```cc\r\nframe->prev_instr += (x);\r\nPY_DECREF(stack_pointer[-1]);\r\nstack_pointer -= 1;\r\ngoto exit;\r\n```\r\nthereby exiting the trace when the corresponding for-loop terminates.\r\n\r\nI am assuming here that most loops have several iterations. I don't think it's worth special-casing the occasional for-loop that almost always immediately terminates.\r\n\r\n### **SEND**\r\n\r\nPossibly we could treat this the same as FOR_ITER. But right now I propose to just punt here, and when we encounter it, stop projecting, as we do with any other unsupported bytecode instruction.\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-106542\r\n* gh-106543\r\n* gh-106551\r\n* gh-106599\r\n* gh-106613\r\n* gh-106638\r\n* gh-106651\r\n* gh-106696\r\n* gh-106756\n* gh-106796\n* gh-112134\n* gh-112214\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/106529/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/106529/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/106208",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/106208/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/106208/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/106208/events",
      "html_url": "https://github.com/python/cpython/issues/106208",
      "id": 1779337633,
      "node_id": "I_kwDOBN0Z8c5qDomh",
      "number": 106208,
      "title": "check-clean-src target action seems incorrect",
      "user": {
        "login": "smontanaro",
        "id": 3427745,
        "node_id": "MDQ6VXNlcjM0Mjc3NDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3427745?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/smontanaro",
        "html_url": "https://github.com/smontanaro",
        "followers_url": "https://api.github.com/users/smontanaro/followers",
        "following_url": "https://api.github.com/users/smontanaro/following{/other_user}",
        "gists_url": "https://api.github.com/users/smontanaro/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/smontanaro/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/smontanaro/subscriptions",
        "organizations_url": "https://api.github.com/users/smontanaro/orgs",
        "repos_url": "https://api.github.com/users/smontanaro/repos",
        "events_url": "https://api.github.com/users/smontanaro/events{/privacy}",
        "received_events_url": "https://api.github.com/users/smontanaro/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2023-06-28T16:52:03Z",
      "updated_at": "2023-12-01T21:33:22Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\nPicking through Makefile targets I was unfamiliar with, I noticed that the `check-clean-src` target appears to have a stray backslash character in its actions. The if statement contains this test:\r\n\r\n```\r\n-o -f \"$(srcdir)\\Python/frozen_modules/importlib._bootstrap.h\"\r\n```\r\n\r\nwhich I think should probably be:\r\n\r\n```\r\n-o -f \"$(srcdir)/Python/frozen_modules/importlib._bootstrap.h\"\r\n```\r\n\r\nI'm not sure it makes much difference in the typical case because $(VPATH) is likely empty most of the time. Still, confusing `\\` and `/` seems likely.\r\n\r\n# Your environment\r\n\r\nMacOS Ventura 13.4.1 running on Apple M1\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-106215\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/106208/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/106208/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/106186",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/106186/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/106186/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/106186/events",
      "html_url": "https://github.com/python/cpython/issues/106186",
      "id": 1778677374,
      "node_id": "I_kwDOBN0Z8c5qBHZ-",
      "number": 106186,
      "title": "email.parser header-only parsing records MultipartInvariantViolationDefect for valid multipart emails",
      "user": {
        "login": "me-and",
        "id": 1397507,
        "node_id": "MDQ6VXNlcjEzOTc1MDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1397507?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/me-and",
        "html_url": "https://github.com/me-and",
        "followers_url": "https://api.github.com/users/me-and/followers",
        "following_url": "https://api.github.com/users/me-and/following{/other_user}",
        "gists_url": "https://api.github.com/users/me-and/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/me-and/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/me-and/subscriptions",
        "organizations_url": "https://api.github.com/users/me-and/orgs",
        "repos_url": "https://api.github.com/users/me-and/repos",
        "events_url": "https://api.github.com/users/me-and/events{/privacy}",
        "received_events_url": "https://api.github.com/users/me-and/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2023-06-28T10:38:02Z",
      "updated_at": "2023-11-26T11:45:45Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\nA valid multipart email message, when parsed with `email.parser.HeaderParser(policy=email.policy.default)` will record a `email.errors.MultipartInvariantViolationDefect`.\r\n\r\nIf the parser isn't going to attempt to parse the message body, it shouldn't report that as a defect.\r\n\r\nSimple test script:\r\n\r\n```python3\r\nimport email.parser\r\nimport email.policy\r\n\r\nemail_str = '''\\\r\nDate: 01 Jan 2001 00:01+0000\r\nFrom: arthur@example.example\r\nMIME-Version: 1.0\r\nContent-Type: multipart/mixed; boundary=autocracy\r\n\r\n--autocracy\r\nContent-Type: text/plain\r\n\r\nBy hanging on to outdated imperialist dogma which perpetuates the economic and\r\nsocial differences in our society.\r\n\r\n--autocracy\r\nContent-Type: text/html\r\n\r\n<html><body><p>By hanging on to outdated imperialist dogma which perpetuates\r\nthe economic and social differences in our society.</p></body></html>\r\n\r\n--autocracy--\r\n'''\r\n\r\nfull_parser = email.parser.Parser(policy=email.policy.default)\r\nparsed_email_full = full_parser.parsestr(email_str)\r\nprint(parsed_email_full.defects)  # Prints [] as expected\r\n\r\nheader_parser = email.parser.HeaderParser(policy=email.policy.default)\r\nparsed_email_headers_only = header_parser.parsestr(email_str)\r\nprint(parsed_email_headers_only.defects)  # Prints [MultipartInvariantViolationDefect()]\r\n```\r\n\r\n# Your environment\r\n\r\n- Debian 12\r\n- Raspberry Pi 4 (arm64)\r\n- Python 3.11.2 (Debian package 3.11.2-1+b1)\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-107016\n* gh-107111\n* gh-107112\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/106186/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/106186/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/105813",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/105813/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/105813/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/105813/events",
      "html_url": "https://github.com/python/cpython/issues/105813",
      "id": 1758320021,
      "node_id": "I_kwDOBN0Z8c5ozdWV",
      "number": 105813,
      "title": "Namespace Autoconf preprocessor defines",
      "user": {
        "login": "erlend-aasland",
        "id": 13780613,
        "node_id": "MDQ6VXNlcjEzNzgwNjEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erlend-aasland",
        "html_url": "https://github.com/erlend-aasland",
        "followers_url": "https://api.github.com/users/erlend-aasland/followers",
        "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
        "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
        "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
        "repos_url": "https://api.github.com/users/erlend-aasland/repos",
        "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "erlend-aasland",
        "id": 13780613,
        "node_id": "MDQ6VXNlcjEzNzgwNjEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erlend-aasland",
        "html_url": "https://github.com/erlend-aasland",
        "followers_url": "https://api.github.com/users/erlend-aasland/followers",
        "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
        "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
        "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
        "repos_url": "https://api.github.com/users/erlend-aasland/repos",
        "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "erlend-aasland",
          "id": 13780613,
          "node_id": "MDQ6VXNlcjEzNzgwNjEz",
          "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/erlend-aasland",
          "html_url": "https://github.com/erlend-aasland",
          "followers_url": "https://api.github.com/users/erlend-aasland/followers",
          "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
          "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
          "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
          "repos_url": "https://api.github.com/users/erlend-aasland/repos",
          "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
          "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2023-06-15T08:31:45Z",
      "updated_at": "2024-02-12T14:53:09Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Quoting from capi-workgroup/problems#46:\r\n\r\n> The headers define a number of identifiers that don't start with `Py` (or `_Py`), potentially clashing with other code.\r\n>\r\n> [...]\r\n>\r\n> - configure cruft like `HAVE_STRFTIM` or `SIZEOF_SIZE_T`\r\n\r\nWe can add an m4 macro that wraps `AC_DEFINE` and `AH_TEMPLATE`, to make sure we namespace any defines produced by `configure`. I'm not sure how PEP-387 plays in here; can we simply change these preprocessor defines? I guess not, since what's exposed in Python.h is protected by PEP-387. For now, let's just add macros that add properly namespaced defined in addition to the existing ones.\r\n\r\n- [ ] Add macros that add `Py_` namespaced defined _in addition_ to the existing defs\r\n  - [ ] Add `PY_DEFINE` macro that wraps `AC_DEFINE`\r\n  - [ ] Add `PY_TEMPLATE` macro that wraps `AH_TEMPLATE`\r\n  - [ ] Add `PY_CHECK_HEADERS` macro that wraps `AC_CHECK_HEADERS`\r\n  - [ ] Use these macros in `configure.ac`\r\n- [ ] Remove the old non-namespaced defs\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-115343\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/105813/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/105813/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/105812",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/105812/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/105812/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/105812/events",
      "html_url": "https://github.com/python/cpython/issues/105812",
      "id": 1758293557,
      "node_id": "I_kwDOBN0Z8c5ozW41",
      "number": 105812,
      "title": "Docs: make it easier to reference and markup decorators",
      "user": {
        "login": "erlend-aasland",
        "id": 13780613,
        "node_id": "MDQ6VXNlcjEzNzgwNjEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erlend-aasland",
        "html_url": "https://github.com/erlend-aasland",
        "followers_url": "https://api.github.com/users/erlend-aasland/followers",
        "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
        "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
        "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
        "repos_url": "https://api.github.com/users/erlend-aasland/repos",
        "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2023-06-15T08:16:30Z",
      "updated_at": "2024-05-07T21:24:30Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "_Originally posted by @erlend-aasland in https://github.com/python/cpython/pull/105792#discussion_r1230584709_\r\n            \r\n> It would be nice if we had a \"decorator role\" that used the Python function/method markup, but instead of adding trailing parens, added a prefixing '@': ```:decorator:`dataclasses.dataclass` ``` => [@dataclasses.dataclass](https://docs.python.org/3.13/library/dataclasses.html#dataclasses.dataclass).\r\n\r\n\r\nThere's already `decorator` and `decoratormethod` directives for signatures. Perhaps we can exploit these so the `:py:meth:` and `py:func:` roles adapt the format according to what directive is used. A role could be a nice supplement, though; sometimes we want to explicitly refer to a decorator as a function or the other way around.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-118743\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/105812/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/105812/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/105790",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/105790/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/105790/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/105790/events",
      "html_url": "https://github.com/python/cpython/issues/105790",
      "id": 1757217480,
      "node_id": "I_kwDOBN0Z8c5ovQLI",
      "number": 105790,
      "title": "Partial support for clang and Windows in configure",
      "user": {
        "login": "TheShermanTanker",
        "id": 32636402,
        "node_id": "MDQ6VXNlcjMyNjM2NDAy",
        "avatar_url": "https://avatars.githubusercontent.com/u/32636402?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheShermanTanker",
        "html_url": "https://github.com/TheShermanTanker",
        "followers_url": "https://api.github.com/users/TheShermanTanker/followers",
        "following_url": "https://api.github.com/users/TheShermanTanker/following{/other_user}",
        "gists_url": "https://api.github.com/users/TheShermanTanker/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/TheShermanTanker/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/TheShermanTanker/subscriptions",
        "organizations_url": "https://api.github.com/users/TheShermanTanker/orgs",
        "repos_url": "https://api.github.com/users/TheShermanTanker/repos",
        "events_url": "https://api.github.com/users/TheShermanTanker/events{/privacy}",
        "received_events_url": "https://api.github.com/users/TheShermanTanker/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 570103914,
          "node_id": "MDU6TGFiZWw1NzAxMDM5MTQ=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-windows",
          "name": "OS-windows",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 12,
      "created_at": "2023-06-14T15:57:03Z",
      "updated_at": "2023-09-13T12:08:01Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\nEnable building cpython on Windows through the traditional configure route, for instance with mingw32.\r\n\r\n# Pitch\r\n\r\nEnables other compilers such as clang to build cpython on Windows, instead of constraining it to the traditional PCbuild toolchain, to narrow the gap between Unix and Windows styles in the build.\r\n\r\n# Previous discussion\r\n\r\nNot Applicable\r\n\r\nNote: Only allows configure to run outside of PCbuild on Windows, to successfully build cpython for Windows with clang, the following modification needs to be added to Setup.local:\r\n\r\n```\r\narray arraymodule.c\r\nbinascii binascii.c\r\ncmath cmathmodule.c\r\nmath mathmodule.c\r\n_md5 md5module.c -I$(srcdir)/Modules/_hacl/include _hacl/Hacl_Hash_MD5.c\r\n_sha1 sha1module.c -I$(srcdir)/Modules/_hacl/include _hacl/Hacl_Hash_SHA1.c\r\n_sha2 sha2module.c -I$(srcdir)/Modules/_hacl/include _hacl/Hacl_Hash_SHA2.c\r\n_sha3 sha3module.c -I$(srcdir)/Modules/_hacl/include _hacl/Hacl_Hash_SHA3.c _hacl/include\r\n_blake2 _blake2/blake2module.c _blake2/blake2b_impl.c _blake2/blake2s_impl.c\r\n_statistics _statisticsmodule.c\r\n_winapi _winapi.c\r\n_random _randommodule.c\r\n_bisect _bisectmodule.c\r\n_heapq _heapqmodule.c\r\n_lsprof _lsprof.c rotatingtree.c\r\nmmap mmapmodule.c\r\n_csv _csv.c\r\n_struct _struct.c\r\n_datetime _datetimemodule.c\r\n_json _json.c\r\nxxsubtype xxsubtype.c\r\n_xxsubinterpreters _xxsubinterpretersmodule.c\r\n_xxinterpchannels _xxinterpchannelsmodule.c\r\n_multibytecodec cjkcodecs/multibytecodec.c\r\n_codecs_cn cjkcodecs/_codecs_cn.c\r\n_codecs_hk cjkcodecs/_codecs_hk.c\r\n_codecs_iso2022 cjkcodecs/_codecs_iso2022.c\r\n_codecs_jp cjkcodecs/_codecs_jp.c\r\n_codecs_kr cjkcodecs/_codecs_kr.c\r\n_codecs_tw cjkcodecs/_codecs_tw.c\r\n_pickle _pickle.c\r\n_opcode _opcode.c\r\n_contextvars _contextvarsmodule.c\r\n_io _io/winconsoleio.c _io/iobase.c _io/_iomodule.c _io/bufferedio.c _io/bytesio.c _io/fileio.c _io/stringio.c _io/textio.c\r\n```\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-105789\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/105790/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/105790/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/105736",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/105736/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/105736/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/105736/events",
      "html_url": "https://github.com/python/cpython/issues/105736",
      "id": 1755402273,
      "node_id": "I_kwDOBN0Z8c5ooVAh",
      "number": 105736,
      "title": "copy fails on collections.OrderedDict dataclass with required args",
      "user": {
        "login": "ringohoffman",
        "id": 27844407,
        "node_id": "MDQ6VXNlcjI3ODQ0NDA3",
        "avatar_url": "https://avatars.githubusercontent.com/u/27844407?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ringohoffman",
        "html_url": "https://github.com/ringohoffman",
        "followers_url": "https://api.github.com/users/ringohoffman/followers",
        "following_url": "https://api.github.com/users/ringohoffman/following{/other_user}",
        "gists_url": "https://api.github.com/users/ringohoffman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ringohoffman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ringohoffman/subscriptions",
        "organizations_url": "https://api.github.com/users/ringohoffman/orgs",
        "repos_url": "https://api.github.com/users/ringohoffman/repos",
        "events_url": "https://api.github.com/users/ringohoffman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ringohoffman/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 7334604047,
          "node_id": "LA_kwDOBN0Z8c8AAAABtS0tDw",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-dataclasses",
          "name": "topic-dataclasses",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "ericsnowcurrently",
          "id": 1152074,
          "node_id": "MDQ6VXNlcjExNTIwNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ericsnowcurrently",
          "html_url": "https://github.com/ericsnowcurrently",
          "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
          "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
          "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
          "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
          "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
          "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        {
          "login": "rhettinger",
          "id": 1623689,
          "node_id": "MDQ6VXNlcjE2MjM2ODk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1623689?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rhettinger",
          "html_url": "https://github.com/rhettinger",
          "followers_url": "https://api.github.com/users/rhettinger/followers",
          "following_url": "https://api.github.com/users/rhettinger/following{/other_user}",
          "gists_url": "https://api.github.com/users/rhettinger/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rhettinger/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rhettinger/subscriptions",
          "organizations_url": "https://api.github.com/users/rhettinger/orgs",
          "repos_url": "https://api.github.com/users/rhettinger/repos",
          "events_url": "https://api.github.com/users/rhettinger/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rhettinger/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 8,
      "created_at": "2023-06-13T17:59:33Z",
      "updated_at": "2024-08-16T08:55:29Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\nRelated: https://github.com/huggingface/transformers/issues/8978\r\n\r\n\r\n\r\n```python\r\nimport collections\r\nimport copy\r\nimport dataclasses\r\n\r\n\r\n@dataclasses.dataclass\r\nclass ModelOutputDictBase(dict):\r\n    a: int\r\n    b: int = 2\r\n\r\n# works\r\ncopy.deepcopy(\r\n    ModelOutputDictBase(\r\n        a=1,\r\n        b=2,\r\n    )\r\n)\r\n\r\n@dataclasses.dataclass\r\nclass ModelOutputAllDefaults(collections.OrderedDict):\r\n    a: int = 1\r\n    b: int = 2\r\n\r\n# works\r\ncopy.deepcopy(\r\n    ModelOutputAllDefaults(\r\n        a=1,\r\n        b=2,\r\n    )\r\n)\r\n\r\n@dataclasses.dataclass\r\nclass ModelOutput(collections.OrderedDict):\r\n    a: int\r\n    b: int = 2\r\n\r\n\r\n# fails\r\ncopy.deepcopy(\r\n    ModelOutput(\r\n        a=1,\r\n        b=2,\r\n    )\r\n)\r\n```\r\n\r\n```pytb\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\nCell In[4], line 39\r\n     35     a: int\r\n     36     b: int = 2\r\n---> 39 copy.deepcopy(\r\n     40     ModelOutput(\r\n     41         a=1,\r\n     42         b=2,\r\n     43     )\r\n     44 )\r\n\r\nFile [...lib/python3.8/copy.py:172), in deepcopy(x, memo, _nil)\r\n    170                 y = x\r\n    171             else:\r\n--> 172                 y = _reconstruct(x, memo, *rv)\r\n    174 # If is its own copy, don't memoize.\r\n    175 if y is not x:\r\n\r\nFile [.../lib/python3.8/copy.py:264), in _reconstruct(x, memo, func, args, state, listiter, dictiter, deepcopy)\r\n    262 if deep and args:\r\n    263     args = (deepcopy(arg, memo) for arg in args)\r\n--> 264 y = func(*args)\r\n    265 if deep:\r\n    266     memo[id(x)] = y\r\n\r\nTypeError: __init__() missing 1 required positional argument: 'a'\r\n```\r\n\r\n# Your environment\r\n\r\n<!-- Include as many relevant details as possible about the environment you experienced the bug in -->\r\n\r\n- CPython versions tested on: Python 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0] :: Anaconda, Inc. on linux\r\n- Operating system and architecture: Ubuntu 20.04.6 LTS x86_64\r\n\r\n<!--\r\nYou can freely edit this text. Remove any lines you believe are unnecessary.\r\n-->\r\n\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-108098\r\n* gh-108200\r\n* gh-108201\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/105736/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 1,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/105736/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/105724",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/105724/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/105724/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/105724/events",
      "html_url": "https://github.com/python/cpython/issues/105724",
      "id": 1754559933,
      "node_id": "I_kwDOBN0Z8c5olHW9",
      "number": 105724,
      "title": "Improve the error message for `assert` and `AssertionError` by adding location information",
      "user": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "sobolevn",
          "id": 4660275,
          "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sobolevn",
          "html_url": "https://github.com/sobolevn",
          "followers_url": "https://api.github.com/users/sobolevn/followers",
          "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
          "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
          "organizations_url": "https://api.github.com/users/sobolevn/orgs",
          "repos_url": "https://api.github.com/users/sobolevn/repos",
          "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sobolevn/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 14,
      "created_at": "2023-06-13T10:30:42Z",
      "updated_at": "2023-11-10T10:53:23Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\nRight now `assert` generate errors that are hard to read, mostly because they lack context.\r\nExample:\r\n\r\n```python\r\n>>> assert 1 == 0\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nAssertionError\r\n```\r\n\r\n# Pitch\r\n\r\nLet's make them better:\r\n\r\n```python\r\n>>> assert 1 == 0\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n    assert 1 == 0\r\n           ^^^^^^\r\nAssertionError\r\n```\r\n\r\nThis is a good starting point.\r\n\r\nLater this can be enhanced to use more context.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-105935\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/105724/reactions",
        "total_count": 7,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 5,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/105724/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/105578",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/105578/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/105578/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/105578/events",
      "html_url": "https://github.com/python/cpython/issues/105578",
      "id": 1750147795,
      "node_id": "I_kwDOBN0Z8c5oUSLT",
      "number": 105578,
      "title": "Discourage and deprecate `typing.AnyStr`",
      "user": {
        "login": "AlexWaygood",
        "id": 66076021,
        "node_id": "MDQ6VXNlcjY2MDc2MDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/66076021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AlexWaygood",
        "html_url": "https://github.com/AlexWaygood",
        "followers_url": "https://api.github.com/users/AlexWaygood/followers",
        "following_url": "https://api.github.com/users/AlexWaygood/following{/other_user}",
        "gists_url": "https://api.github.com/users/AlexWaygood/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/AlexWaygood/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AlexWaygood/subscriptions",
        "organizations_url": "https://api.github.com/users/AlexWaygood/orgs",
        "repos_url": "https://api.github.com/users/AlexWaygood/repos",
        "events_url": "https://api.github.com/users/AlexWaygood/events{/privacy}",
        "received_events_url": "https://api.github.com/users/AlexWaygood/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4030784939,
          "node_id": "LA_kwDOBN0Z8c7wQOWr",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-typing",
          "name": "topic-typing",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 14,
      "created_at": "2023-06-09T16:00:42Z",
      "updated_at": "2023-07-31T21:10:42Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\nWe should discourage and deprecate `typing.AnyStr`.\r\n\r\n# Pitch\r\n\r\n`typing.AnyStr` is bad for many reasons:\r\n\r\n1. The name implies that it has something to do with the type `Any`. It has nothing to do with the type `Any`.\r\n2. The name implies that it means \"any string\". It does not mean \"any string\".\r\n3. `AnyStr` is a `TypeVar`, but the name does not follow the common naming convention for TypeVars (using a \"T\" suffix). Many users appear to think that it is equivalent to `str | bytes`, which is incorrect.\r\n4. `AnyStr` is the only type variable that is publicly exported from the `typing` module. Unusually, it is a constrained type variable. Constrained type variables are usually not what users want for modern APIs. Bound type variables, in general, have more intuitive semantics than constrained type variables.\r\n5. One of the motivations for PEP-695 (accepted by the Steering Council, and now implemented) was the fact that reusable type variables can be confusing in terms of their scope. In general, I believe the consensus of the typing community is that using PEP-695 syntax for creating type variables clarifies the scope of type variables and makes them more intuitive for users. As such, we should discourage using reusable TypeVars such as `AnyStr`.\r\n\r\nFor all of these reasons, `AnyStr` is _very_ commonly misused, especially by typing beginners. We get many PRs at typeshed that misuse `AnyStr`, and it can often be hard to catch these misuses in CI (careful manual review is required).\r\n\r\nTherefore, we should discourage and deprecate `typing.AnyStr`. Unfortunately, it is very widely used, so the deprecation period will have to be a long one.\r\n\r\nI propose the following plan:\r\n\r\n1. Clarify the docs for `typing.AnyStr`. Explain more clearly the differences between `AnyStr` and a union; give examples of uses of `AnyStr` that would be invalid. This docs clarification can be backported to 3.12 and 3.11.\r\n2. In Python 3.13, state in the docs that using `AnyStr` is deprecated and that users are encouraged to use PEP-695 syntax wherever possible.\r\n3. In Python 3.16, remove `AnyStr` from `typing.__all__`, and start emitting a `DeprecationWarning` if a user does `from typing import AnyStr` or accesses `typing.AnyStr`.\r\n\r\n   Removing it from `__all__` will be a breaking change, but it's the only way to emit a `DeprecationWarning` for `typing.AnyStr` before removing it unless we're okay with emitting a `DeprecationWarning` any time a user does `from typing import *` (and I'm not).\r\n4. In Python 3.18, remove `AnyStr` from the `typing` module.\r\n\r\nThoughts?\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-107045\n* gh-107116\n* gh-107503\n* gh-107504\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/105578/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/105578/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/105063",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/105063/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/105063/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/105063/events",
      "html_url": "https://github.com/python/cpython/issues/105063",
      "id": 1730963937,
      "node_id": "I_kwDOBN0Z8c5nLGnh",
      "number": 105063,
      "title": "test_peg_generator leaks references",
      "user": {
        "login": "Eclips4",
        "id": 80244920,
        "node_id": "MDQ6VXNlcjgwMjQ0OTIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/80244920?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eclips4",
        "html_url": "https://github.com/Eclips4",
        "followers_url": "https://api.github.com/users/Eclips4/followers",
        "following_url": "https://api.github.com/users/Eclips4/following{/other_user}",
        "gists_url": "https://api.github.com/users/Eclips4/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Eclips4/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Eclips4/subscriptions",
        "organizations_url": "https://api.github.com/users/Eclips4/orgs",
        "repos_url": "https://api.github.com/users/Eclips4/repos",
        "events_url": "https://api.github.com/users/Eclips4/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Eclips4/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "lysnikolaou",
        "id": 20306270,
        "node_id": "MDQ6VXNlcjIwMzA2Mjcw",
        "avatar_url": "https://avatars.githubusercontent.com/u/20306270?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lysnikolaou",
        "html_url": "https://github.com/lysnikolaou",
        "followers_url": "https://api.github.com/users/lysnikolaou/followers",
        "following_url": "https://api.github.com/users/lysnikolaou/following{/other_user}",
        "gists_url": "https://api.github.com/users/lysnikolaou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lysnikolaou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lysnikolaou/subscriptions",
        "organizations_url": "https://api.github.com/users/lysnikolaou/orgs",
        "repos_url": "https://api.github.com/users/lysnikolaou/repos",
        "events_url": "https://api.github.com/users/lysnikolaou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lysnikolaou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "lysnikolaou",
          "id": 20306270,
          "node_id": "MDQ6VXNlcjIwMzA2Mjcw",
          "avatar_url": "https://avatars.githubusercontent.com/u/20306270?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/lysnikolaou",
          "html_url": "https://github.com/lysnikolaou",
          "followers_url": "https://api.github.com/users/lysnikolaou/followers",
          "following_url": "https://api.github.com/users/lysnikolaou/following{/other_user}",
          "gists_url": "https://api.github.com/users/lysnikolaou/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/lysnikolaou/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/lysnikolaou/subscriptions",
          "organizations_url": "https://api.github.com/users/lysnikolaou/orgs",
          "repos_url": "https://api.github.com/users/lysnikolaou/repos",
          "events_url": "https://api.github.com/users/lysnikolaou/events{/privacy}",
          "received_events_url": "https://api.github.com/users/lysnikolaou/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 20,
      "created_at": "2023-05-29T15:45:17Z",
      "updated_at": "2023-11-24T23:12:40Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Tried on curent main branch\r\n<details>\r\n<summary>Traceback</summary>\r\n\r\n```python\r\nPS C:\\Users\\KIRILL-1\\CLionProjects\\cpython> ./python -m test -v test_peg_generator\r\nRunning Debug|x64 interpreter...\r\n== CPython 3.13.0a0 (heads/main:1668b41dc4, May 29 2023, 18:02:21) [MSC v.1933 64 bit (AMD64)]\r\n== Windows-10-10.0.19043-SP0 little-endian\r\n== Python build: debug\r\n== cwd: C:\\Users\\KIRILL-1\\CLionProjects\\cpython\\build\\test_python_11752\u00e6\r\n== CPU count: 16\r\n== encodings: locale=cp1251, FS=utf-8\r\n0:00:00 Run tests sequentially\r\n0:00:00 [1/1] test_peg_generator\r\n\r\nRun: C:\\Users\\KIRILL-1\\CLionProjects\\cpython\\PCbuild\\amd64\\python_d.exe -X dev -m venv venv\r\n\r\nRun: C:\\Users\\KIRILL-1\\CLionProjects\\cpython\\build\\test_python_11752\u00e6\\tempcwd\\venv\\Scripts\\python_d.exe -X dev -m pip install C:\\U\r\nsers\\KIRILL-1\\CLionProjects\\cpython\\Lib\\test\\setuptools-67.6.1-py3-none-any.whl C:\\Users\\KIRILL-1\\CLionProjects\\cpython\\Lib\\test\\w\r\nheel-0.40.0-py3-none-any.whl\r\nProcessing c:\\users\\kirill-1\\clionprojects\\cpython\\lib\\test\\setuptools-67.6.1-py3-none-any.whl\r\nC:\\Users\\KIRILL-1\\CLionProjects\\cpython\\build\\test_python_11752\u00e6\\tempcwd\\venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_\r\ndists.py:74: DeprecationWarning: Unimplemented abstract methods {'locate_file'}\r\n  return cls(files, info_location)\r\nProcessing c:\\users\\kirill-1\\clionprojects\\cpython\\lib\\test\\wheel-0.40.0-py3-none-any.whl\r\nInstalling collected packages: wheel, setuptools\r\nC:\\Users\\KIRILL-1\\CLionProjects\\cpython\\build\\test_python_11752\u00e6\\tempcwd\\venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_\r\ndists.py:74: DeprecationWarning: Unimplemented abstract methods {'locate_file'}\r\n  return cls(files, info_location)\r\nSuccessfully installed setuptools-67.6.1 wheel-0.40.0\r\nC:\\Users\\KIRILL-1\\CLionProjects\\cpython\\build\\test_python_11752\u00e6\\tempcwd\\venv\\Lib\\site-packages\\pip\\_internal\\self_outdated_check.\r\npy:232: DeprecationWarning: datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware obje\r\ncts to represent datetimes in UTC: datetime.now(datetime.UTC).\r\n  current_time=datetime.datetime.utcnow(),\r\nC:\\Users\\KIRILL-1\\CLionProjects\\cpython\\build\\test_python_11752\u00e6\\tempcwd\\venv\\Lib\\site-packages\\pip\\_internal\\utils\\misc.py:130: D\r\neprecationWarning: onerror argument is deprecated, use onexc instead\r\n  shutil.rmtree(dir, ignore_errors=ignore_errors, onerror=rmtree_errorhandler)\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"C:\\Users\\KIRILL-1\\CLionProjects\\cpython\\Lib\\encodings\\cp1251.py\", line 19, in encode\r\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nUnicodeEncodeError: 'charmap' codec can't encode character '\\xe6' in position 63: character maps to <undefined>\r\nsetUpClass (test.test_peg_generator.test_c_parser.TestCParser) ... ERROR\r\ntest_advance_left_recursion (test.test_peg_generator.test_first_sets.TestFirstSets.test_advance_left_recursion) ... ok\r\ntest_alternatives (test.test_peg_generator.test_first_sets.TestFirstSets.test_alternatives) ... ok\r\ntest_epsilon_production_in_start_rule (test.test_peg_generator.test_first_sets.TestFirstSets.test_epsilon_production_in_start_rule\r\n) ... ok\r\ntest_gather (test.test_peg_generator.test_first_sets.TestFirstSets.test_gather) ... ok\r\ntest_left_recursion (test.test_peg_generator.test_first_sets.TestFirstSets.test_left_recursion) ... ok\r\ntest_multiple_nullable_rules (test.test_peg_generator.test_first_sets.TestFirstSets.test_multiple_nullable_rules) ... ok\r\ntest_mutual_left_recursion (test.test_peg_generator.test_first_sets.TestFirstSets.test_mutual_left_recursion) ... ok\r\ntest_nasty_left_recursion (test.test_peg_generator.test_first_sets.TestFirstSets.test_nasty_left_recursion) ... ok\r\ntest_negative_lookahead (test.test_peg_generator.test_first_sets.TestFirstSets.test_negative_lookahead) ... ok\r\ntest_nullable_rule (test.test_peg_generator.test_first_sets.TestFirstSets.test_nullable_rule) ... ok\r\ntest_optional_after (test.test_peg_generator.test_first_sets.TestFirstSets.test_optional_after) ... ok\r\ntest_optional_before (test.test_peg_generator.test_first_sets.TestFirstSets.test_optional_before) ... ok\r\ntest_optional_literal (test.test_peg_generator.test_first_sets.TestFirstSets.test_optional_literal) ... ok\r\ntest_optional_operator (test.test_peg_generator.test_first_sets.TestFirstSets.test_optional_operator) ... ok\r\ntest_optionals (test.test_peg_generator.test_first_sets.TestFirstSets.test_optionals) ... ok\r\ntest_positive_lookahead (test.test_peg_generator.test_first_sets.TestFirstSets.test_positive_lookahead) ... ok\r\ntest_repeat_0 (test.test_peg_generator.test_first_sets.TestFirstSets.test_repeat_0) ... ok\r\ntest_repeat_0_with_group (test.test_peg_generator.test_first_sets.TestFirstSets.test_repeat_0_with_group) ... ok\r\ntest_repeat_1 (test.test_peg_generator.test_first_sets.TestFirstSets.test_repeat_1) ... ok\r\ntest_repeat_1_with_group (test.test_peg_generator.test_first_sets.TestFirstSets.test_repeat_1_with_group) ... ok\r\ntest_repeat_with_separator (test.test_peg_generator.test_first_sets.TestFirstSets.test_repeat_with_separator) ... ok\r\ntest_rule_with_collision_after_some_other_rules (test.test_peg_generator.test_grammar_validator.TestPegen.test_rule_with_collision\r\n_after_some_other_rules) ... ok\r\ntest_rule_with_no_collision (test.test_peg_generator.test_grammar_validator.TestPegen.test_rule_with_no_collision) ... ok\r\ntest_rule_with_simple_collision (test.test_peg_generator.test_grammar_validator.TestPegen.test_rule_with_simple_collision) ... ok \r\ntest_deep_nested_rule (test.test_peg_generator.test_pegen.TestGrammarVisualizer.test_deep_nested_rule) ... ok\r\ntest_multiple_rules (test.test_peg_generator.test_pegen.TestGrammarVisualizer.test_multiple_rules) ... ok\r\ntest_simple_rule (test.test_peg_generator.test_pegen.TestGrammarVisualizer.test_simple_rule) ... ok\r\ntest_advanced_left_recursive (test.test_peg_generator.test_pegen.TestPegen.test_advanced_left_recursive) ... ok\r\ntest_alt_optional_operator (test.test_peg_generator.test_pegen.TestPegen.test_alt_optional_operator) ... ok\r\ntest_bad_token_reference (test.test_peg_generator.test_pegen.TestPegen.test_bad_token_reference) ... ok\r\ntest_cut (test.test_peg_generator.test_pegen.TestPegen.test_cut) ... ok\r\ntest_dangling_reference (test.test_peg_generator.test_pegen.TestPegen.test_dangling_reference) ... ok\r\ntest_expr_grammar (test.test_peg_generator.test_pegen.TestPegen.test_expr_grammar) ... ok\r\ntest_forced (test.test_peg_generator.test_pegen.TestPegen.test_forced) ... ok\r\ntest_forced_with_group (test.test_peg_generator.test_pegen.TestPegen.test_forced_with_group) ... ok\r\ntest_gather (test.test_peg_generator.test_pegen.TestPegen.test_gather) ... ok\r\ntest_invalid_rule_name (test.test_peg_generator.test_pegen.TestPegen.test_invalid_rule_name) ... ok\r\ntest_invalid_variable_name (test.test_peg_generator.test_pegen.TestPegen.test_invalid_variable_name) ... ok\r\ntest_invalid_variable_name_in_temporal_rule (test.test_peg_generator.test_pegen.TestPegen.test_invalid_variable_name_in_temporal_r\r\nule) ... ok\r\ntest_left_recursion_too_complex (test.test_peg_generator.test_pegen.TestPegen.test_left_recursion_too_complex) ... ok\r\ntest_left_recursive (test.test_peg_generator.test_pegen.TestPegen.test_left_recursive) ... ok\r\ntest_locations_in_alt_action_and_group (test.test_peg_generator.test_pegen.TestPegen.test_locations_in_alt_action_and_group) ... o\r\nk\r\ntest_long_rule_str (test.test_peg_generator.test_pegen.TestPegen.test_long_rule_str) ... ok\r\ntest_lookahead (test.test_peg_generator.test_pegen.TestPegen.test_lookahead) ... ok\r\ntest_missing_start (test.test_peg_generator.test_pegen.TestPegen.test_missing_start) ... ok\r\ntest_mutually_left_recursive (test.test_peg_generator.test_pegen.TestPegen.test_mutually_left_recursive) ... ok\r\ntest_named_lookahead_error (test.test_peg_generator.test_pegen.TestPegen.test_named_lookahead_error) ... ok\r\ntest_nasty_mutually_left_recursive (test.test_peg_generator.test_pegen.TestPegen.test_nasty_mutually_left_recursive) ... ok       \r\ntest_nullable (test.test_peg_generator.test_pegen.TestPegen.test_nullable) ... ok\r\ntest_opt_sequence (test.test_peg_generator.test_pegen.TestPegen.test_opt_sequence) ... ok\r\ntest_optional_literal (test.test_peg_generator.test_pegen.TestPegen.test_optional_literal) ... ok\r\ntest_optional_operator (test.test_peg_generator.test_pegen.TestPegen.test_optional_operator) ... ok\r\ntest_parse_grammar (test.test_peg_generator.test_pegen.TestPegen.test_parse_grammar) ... ok\r\ntest_python_expr (test.test_peg_generator.test_pegen.TestPegen.test_python_expr) ... ok\r\ntest_repeat_0_complex (test.test_peg_generator.test_pegen.TestPegen.test_repeat_0_complex) ... ok\r\ntest_repeat_0_simple (test.test_peg_generator.test_pegen.TestPegen.test_repeat_0_simple) ... ok\r\ntest_repeat_1_complex (test.test_peg_generator.test_pegen.TestPegen.test_repeat_1_complex) ... ok\r\ntest_repeat_1_simple (test.test_peg_generator.test_pegen.TestPegen.test_repeat_1_simple) ... ok\r\ntest_repeat_with_sep_simple (test.test_peg_generator.test_pegen.TestPegen.test_repeat_with_sep_simple) ... ok\r\ntest_soft_keyword (test.test_peg_generator.test_pegen.TestPegen.test_soft_keyword) ... ok\r\ntest_start_leader (test.test_peg_generator.test_pegen.TestPegen.test_start_leader) ... ok\r\ntest_typed_rules (test.test_peg_generator.test_pegen.TestPegen.test_typed_rules) ... ok\r\ntest_unreachable_explicit (test.test_peg_generator.test_pegen.TestPegen.test_unreachable_explicit) ... ok\r\ntest_unreachable_implicit1 (test.test_peg_generator.test_pegen.TestPegen.test_unreachable_implicit1) ... ok\r\ntest_unreachable_implicit2 (test.test_peg_generator.test_pegen.TestPegen.test_unreachable_implicit2) ... ok\r\ntest_unreachable_implicit3 (test.test_peg_generator.test_pegen.TestPegen.test_unreachable_implicit3) ... ok\r\n\r\n======================================================================\r\nERROR: setUpClass (test.test_peg_generator.test_c_parser.TestCParser)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\KIRILL-1\\CLionProjects\\cpython\\Lib\\test\\test_peg_generator\\test_c_parser.py\", line 95, in setUpClass\r\n    sitepackages = subprocess.check_output(\r\n                   ^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\KIRILL-1\\CLionProjects\\cpython\\Lib\\subprocess.py\", line 466, in check_output\r\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\KIRILL-1\\CLionProjects\\cpython\\Lib\\subprocess.py\", line 571, in run\r\n    raise CalledProcessError(retcode, process.args,\r\nsubprocess.CalledProcessError: Command '['C:\\\\Users\\\\KIRILL-1\\\\CLionProjects\\\\cpython\\\\build\\\\test_python_11752\u00e6\\\\tempcwd\\\\venv\\\\S\r\ncripts\\\\python_d.exe', '-c', \"import sysconfig; print(sysconfig.get_path('platlib'))\"]' returned non-zero exit status 1.\r\n\r\n----------------------------------------------------------------------\r\nRan 66 tests in 22.073s\r\n\r\nFAILED (errors=1)\r\ntest test_peg_generator failed\r\ntest_peg_generator failed (1 error)\r\n\r\n== Tests result: FAILURE ==\r\n\r\n1 test failed:\r\n    test_peg_generator\r\n\r\nTotal duration: 22.3 sec\r\nTests result: FAILURE\r\n```\r\n</details>\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-106024\n* gh-106450\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/105063/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/105063/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/104676",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/104676/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/104676/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/104676/events",
      "html_url": "https://github.com/python/cpython/issues/104676",
      "id": 1718029831,
      "node_id": "I_kwDOBN0Z8c5mZw4H",
      "number": 104676,
      "title": "cProfile/profile do not output results if profiling terminates because of SIGTERM",
      "user": {
        "login": "SnoopJ",
        "id": 6125322,
        "node_id": "MDQ6VXNlcjYxMjUzMjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6125322?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SnoopJ",
        "html_url": "https://github.com/SnoopJ",
        "followers_url": "https://api.github.com/users/SnoopJ/followers",
        "following_url": "https://api.github.com/users/SnoopJ/following{/other_user}",
        "gists_url": "https://api.github.com/users/SnoopJ/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/SnoopJ/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/SnoopJ/subscriptions",
        "organizations_url": "https://api.github.com/users/SnoopJ/orgs",
        "repos_url": "https://api.github.com/users/SnoopJ/repos",
        "events_url": "https://api.github.com/users/SnoopJ/events{/privacy}",
        "received_events_url": "https://api.github.com/users/SnoopJ/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2023-05-20T03:24:40Z",
      "updated_at": "2024-01-11T16:34:43Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n`cProfile` and `profile` do not produce any results if the process being profiled is terminated with `SIGTERM`, although the [documentation](https://github.com/python/cpython/blame/3bc94e678f2961eafc9d665898d73afc6204d314/Doc/library/profile.rst#LL114C42-L114C42) for `cProfile` and `profile` and the [behavior of the profiler in the case of an exception](https://github.com/python/cpython/blob/3bc94e678f2961eafc9d665898d73afc6204d314/Lib/profile.py#L58-L68) (`KeyboardInterrupt` in particular) do make it seem like the profiler will always write output \"at the end\" of profiling, and the actual behavior on this edge case is somewhat surprising as a result.\r\n\r\nI discovered this behavior while trying to profile a worker subprocess in an application that sends SIGTERM to that subprocess during shutdown. I was able to write my [own profiling helper](https://github.com/SnoopJ/playground/blob/e89f48d65fa408e1ed0a9a0cd8313b7e22f64210/python/profiling/interruptable_profile/run_profiler.py#L13-L35) that registers a signal handler, but thought it made sense to open an issue and ask if this is a case of slightly murky documentation, or something that can be improved in `profile`. Considering the complexity of signal handling, I'm guessing this is more likely to be considered a missing stair in the documentation, but I'm happy to send a PR for either case if others agree that this behavior isn't entirely obvious.\r\n\r\nThe closest issue I can find in the CPython issue history is #50228 which doesn't involve signals.\r\n\r\n# Reproduction\r\n\r\n```python\r\n$ cat repro.py\r\nimport time\r\n\r\nx = 0\r\n\r\nwhile True:\r\n    x += 1\r\n    print(x)\r\n    time.sleep(0.1)\r\n$ python3.9 -m cProfile --outfile out.prof repro.py & PID=$!; sleep 0.5; kill -s SIGTERM ${PID}\r\n[2] 1113607\r\n1\r\n2\r\n3\r\n4\r\n[2]-  Terminated              python3 -m cProfile --outfile out.prof repro.py\r\n$ ls out.prof\r\nls: cannot access 'out.prof': No such file or directory\r\n```\r\n\r\n# Environment\r\n\r\n- CPython versions tested on: 3.9, 3.8\r\n- Operating system and architecture: Ubuntu 20.04\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-108959\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/104676/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/104676/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/104635",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/104635/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/104635/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/104635/events",
      "html_url": "https://github.com/python/cpython/issues/104635",
      "id": 1716389039,
      "node_id": "I_kwDOBN0Z8c5mTgSv",
      "number": 104635,
      "title": "dead store elimination in the compiler",
      "user": {
        "login": "carljm",
        "id": 61586,
        "node_id": "MDQ6VXNlcjYxNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/carljm",
        "html_url": "https://github.com/carljm",
        "followers_url": "https://api.github.com/users/carljm/followers",
        "following_url": "https://api.github.com/users/carljm/following{/other_user}",
        "gists_url": "https://api.github.com/users/carljm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/carljm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/carljm/subscriptions",
        "organizations_url": "https://api.github.com/users/carljm/orgs",
        "repos_url": "https://api.github.com/users/carljm/repos",
        "events_url": "https://api.github.com/users/carljm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/carljm/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 12,
      "created_at": "2023-05-18T23:19:35Z",
      "updated_at": "2023-11-27T18:46:09Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "There are several code patterns that can cause multiple stores to the same locals index in near succession, without any intervening instructions that can possibly use the stored value. One such code pattern is e.g. `a, a, b = x, y, z`. Another (since PEP 709) is `a = [_ for a in []]`. There are likely others.\r\n\r\nIn such cases, all but the final store can be replaced with `POP_TOP`. This alone isn't a huge gain, but this can also allow `apply_static_swaps` to take effect in these cases (because it can't safely reorder writes to the same location, but it can safely reorder POP_TOPs at will), removing SWAPs, which shrinks code size and reduces runtime overhead.\r\n\r\nNot sure how much of a gain this will be in realistic cases, but it's also not hard to implement, so it seems worth doing as a marginal improvement to compiler output.\r\n\r\nNote that in order to maintain tracing / debugger compatibility, we can only do this if line number is the same for all the store instructions. And we definitely can't eliminate the final store, even if it also appears to be unused, since it can always be visible to tracers/debuggers/locals()/etc.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-105040\n* gh-105320\n* gh-106394\n* gh-106571\n* gh-106583\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/104635/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/104635/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/104530",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/104530/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/104530/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/104530/events",
      "html_url": "https://github.com/python/cpython/issues/104530",
      "id": 1711277112,
      "node_id": "I_kwDOBN0Z8c5mAAQ4",
      "number": 104530,
      "title": "Switch Python to using native Win32 condition variables",
      "user": {
        "login": "adr26",
        "id": 32688592,
        "node_id": "MDQ6VXNlcjMyNjg4NTky",
        "avatar_url": "https://avatars.githubusercontent.com/u/32688592?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adr26",
        "html_url": "https://github.com/adr26",
        "followers_url": "https://api.github.com/users/adr26/followers",
        "following_url": "https://api.github.com/users/adr26/following{/other_user}",
        "gists_url": "https://api.github.com/users/adr26/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/adr26/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/adr26/subscriptions",
        "organizations_url": "https://api.github.com/users/adr26/orgs",
        "repos_url": "https://api.github.com/users/adr26/repos",
        "events_url": "https://api.github.com/users/adr26/events{/privacy}",
        "received_events_url": "https://api.github.com/users/adr26/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 570103914,
          "node_id": "MDU6TGFiZWw1NzAxMDM5MTQ=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-windows",
          "name": "OS-windows",
          "color": "d4c5f9",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 10,
      "created_at": "2023-05-16T05:42:33Z",
      "updated_at": "2023-05-18T22:36:44Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "`Py_HAVE_CONDVAR` denotes support for Python condition variable APIs. On Win32, the `_PY_EMULATED_WIN_CV` macro exists to allow condition variables to be emulated using Win32 critical section and semaphore APIs.\r\n\r\n[Native Win32 support for condition variables](https://learn.microsoft.com/en-us/windows/win32/sync/using-condition-variables) has existed from Windows Vista onwards (courtesy of my friend and fellow ex-MSFT colleague Neill Clift).\r\n\r\nAn implementation of Python condition variable also exists with `_PY_EMULATED_WIN_CV` set to `0` which uses native Win32 condition variable / SRW lock (mutex) support.\r\n\r\nSince [support for Windows XP was dropped as of Python 3.5](https://docs.python.org/3.5/whatsnew/3.5.html#unsupported-operating-systems), I propose moving to the native Win32 condition variable APIs, as they are more efficient and easier to maintain.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-104531\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/104530/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/104530/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/104527",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/104527/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/104527/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/104527/events",
      "html_url": "https://github.com/python/cpython/issues/104527",
      "id": 1711204913,
      "node_id": "I_kwDOBN0Z8c5l_uox",
      "number": 104527,
      "title": "zipfile.write should check that it isn't appending an archive to itself",
      "user": {
        "login": "gabevenberg",
        "id": 7350077,
        "node_id": "MDQ6VXNlcjczNTAwNzc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7350077?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gabevenberg",
        "html_url": "https://github.com/gabevenberg",
        "followers_url": "https://api.github.com/users/gabevenberg/followers",
        "following_url": "https://api.github.com/users/gabevenberg/following{/other_user}",
        "gists_url": "https://api.github.com/users/gabevenberg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gabevenberg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gabevenberg/subscriptions",
        "organizations_url": "https://api.github.com/users/gabevenberg/orgs",
        "repos_url": "https://api.github.com/users/gabevenberg/repos",
        "events_url": "https://api.github.com/users/gabevenberg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gabevenberg/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2023-05-16T04:13:33Z",
      "updated_at": "2024-03-26T21:32:40Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "A common use pattern for zipfile is to recursively compress an entire directory into a single .zip file. A common implementation of this pattern looks like this:\r\n```python\r\n#!/usr/bin/env python3\r\n\r\nimport zipfile, pathlib\r\n\r\nrootpath=pathlib.Path('targetdir')\r\n\r\nwith zipfile.ZipFile('outputfile', 'w') as archive:\r\n    for file_path in sorted(rootpath.rglob('*')):\r\n        arcname=file_path.relative_to(rootpath)\r\n        archive.write(file_path, arcname.as_posix())\r\n```\r\n\r\nHowever, if outputfile is a path that is a child of targetdir, this results in the operation hanging once the `rglob` operation eventually causes the archive to attempt to write `outfile` into `outfile`, causing the write operation to continue indefinitely until the filesystem runs out of space or the archive hits its max file size, like can be observed in this example:\r\n```python\r\n#!/usr/bin/env python3\r\n\r\nimport zipfile, pathlib\r\n\r\nrootpath=pathlib.Path('./')\r\n\r\nwith zipfile.ZipFile('./foo.zip', 'w') as archive:\r\n    for file_path in sorted(rootpath.rglob('*')):\r\n        arcname=file_path.relative_to(rootpath)\r\n        archive.write(file_path, arcname.as_posix())\r\n```\r\n\r\nNeedless to say, this is hardly an intuitive error path, and can cause difficulties with debugging.\r\n\r\nNote that it is not simply third party libraries that allow this error to happen. Neither zipapp nor shutil.make_archive include a check making sure the output file is not a child of the target dir.\r\n\r\nThere are two ways I think this could be fixed:\r\n* make zipfile.write simply check that self.file and filename are not equal, raising a ValueError if they are\r\n* patch all users of zipfile to silently skip over outputfile when they are compressing.\r\n\r\nI think the first, at the least, should be implemented, in order to provide an actual error message in  this situation, instead of hanging for however long it takes for someone to notice a multi-gb zip file growing by the second. Ill be submitting a PR doing so shortly.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-104857\n* gh-106076\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/104527/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/104527/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/104496",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/104496/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/104496/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/104496/events",
      "html_url": "https://github.com/python/cpython/issues/104496",
      "id": 1709286155,
      "node_id": "I_kwDOBN0Z8c5l4aML",
      "number": 104496,
      "title": "Tkinter, IDLE: Future Tcl and Tk can have differing version/patchlevel",
      "user": {
        "login": "chrstphrchvz",
        "id": 7941193,
        "node_id": "MDQ6VXNlcjc5NDExOTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7941193?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chrstphrchvz",
        "html_url": "https://github.com/chrstphrchvz",
        "followers_url": "https://api.github.com/users/chrstphrchvz/followers",
        "following_url": "https://api.github.com/users/chrstphrchvz/following{/other_user}",
        "gists_url": "https://api.github.com/users/chrstphrchvz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/chrstphrchvz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chrstphrchvz/subscriptions",
        "organizations_url": "https://api.github.com/users/chrstphrchvz/orgs",
        "repos_url": "https://api.github.com/users/chrstphrchvz/repos",
        "events_url": "https://api.github.com/users/chrstphrchvz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/chrstphrchvz/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018676065,
          "node_id": "LA_kwDOBN0Z8c7viCFh",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-tkinter",
          "name": "topic-tkinter",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4018676472,
          "node_id": "LA_kwDOBN0Z8c7viCL4",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-IDLE",
          "name": "topic-IDLE",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 19,
      "created_at": "2023-05-15T04:16:04Z",
      "updated_at": "2024-09-16T18:33:12Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "~~Tk 8.7 will be compatible with both Tcl 8.7 and Tcl 9.0; there is no Tk 9.0 currently in development. The version and/or patchlevel of Tcl and Tk will not necessarily be identical~~, but there are places in Tkinter code which assume they are. A few examples which I am aware of:\r\n\r\nhttps://github.com/python/cpython/blob/48b3617de491f00a3bf978b355074cc8e228d61b/Lib/idlelib/help_about.py#L79\r\n\r\nhttps://github.com/python/cpython/blob/48b3617de491f00a3bf978b355074cc8e228d61b/Lib/test/test_tkinter/support.py#L103\r\n\r\nhttps://github.com/python/cpython/blob/48b3617de491f00a3bf978b355074cc8e228d61b/Lib/test/test_tcl.py#L28\r\n\r\n\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-104585\r\n* gh-104587\r\n* gh-107688\r\n* gh-107709\r\n* gh-107719\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/104496/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/104496/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/104280",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/104280/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/104280/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/104280/events",
      "html_url": "https://github.com/python/cpython/issues/104280",
      "id": 1699294482,
      "node_id": "I_kwDOBN0Z8c5lSS0S",
      "number": 104280,
      "title": "Missing DTrace probes",
      "user": {
        "login": "furkanonder",
        "id": 24194934,
        "node_id": "MDQ6VXNlcjI0MTk0OTM0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24194934?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furkanonder",
        "html_url": "https://github.com/furkanonder",
        "followers_url": "https://api.github.com/users/furkanonder/followers",
        "following_url": "https://api.github.com/users/furkanonder/following{/other_user}",
        "gists_url": "https://api.github.com/users/furkanonder/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/furkanonder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/furkanonder/subscriptions",
        "organizations_url": "https://api.github.com/users/furkanonder/orgs",
        "repos_url": "https://api.github.com/users/furkanonder/repos",
        "events_url": "https://api.github.com/users/furkanonder/events{/privacy}",
        "received_events_url": "https://api.github.com/users/furkanonder/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 23,
      "created_at": "2023-05-07T23:48:56Z",
      "updated_at": "2024-02-09T17:19:12Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "<!--\r\n  If you're new to Python and you're not sure whether what you're experiencing is a bug, the CPython issue tracker is not\r\n  the right place to seek help. Consider the following options instead:\r\n\r\n  - reading the Python tutorial: https://docs.python.org/3/tutorial/\r\n  - posting in the \"Users\" category on discuss.python.org: https://discuss.python.org/c/users/7\r\n  - emailing the Python-list mailing list: https://mail.python.org/mailman/listinfo/python-list\r\n  - searching our issue tracker (https://github.com/python/cpython/issues) to see if\r\n    your problem has already been reported\r\n-->\r\n\r\n# Bug report\r\n\r\nOn Linux, you can list available DTrace probes by running [/bcc/tools/tplist.py](https://github.com/iovisor/bcc/blob/master/tools/tplist.py) tool;\r\n\r\n```sh\r\n$ ~/bcc/tools/tplist.py -l cpython/python    \r\ncpython/python python:function__entry\r\ncpython/python python:function__return\r\ncpython/python python:line\r\ncpython/python python:import__find__load__done\r\ncpython/python python:import__find__load__start\r\ncpython/python python:audit\r\ncpython/python python:gc__start\r\ncpython/python python:gc__done\r\n```\r\n\r\nThe `function__entry`, `function__return` and `line` probes appear to be missing after the [GH-103082: Implementation of PEP 669: Low Impact Monitoring for CPython](https://github.com/python/cpython/pull/103083) update.\r\n\r\n```sh\r\n$ ~/bcc/tools/tplist.py -l cpython/python\r\ncpython/python python:import__find__load__done\r\ncpython/python python:import__find__load__start\r\ncpython/python python:audit\r\ncpython/python python:gc__start\r\ncpython/python python:gc__done\r\n```\r\n\r\n# Your environment\r\n\r\n<!-- Include as many relevant details as possible about the environment you experienced the bug in -->\r\n\r\n- CPython versions tested on: Python 3.12.0a7+\r\n- Operating system and architecture: Arch Linux x86_64\r\n\r\n<!--\r\nYou can freely edit this text. Remove any lines you believe are unnecessary.\r\n-->\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-107125\n* gh-107489\n* gh-107492\n* gh-110571\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/104280/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/104280/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/104235",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/104235/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/104235/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/104235/events",
      "html_url": "https://github.com/python/cpython/issues/104235",
      "id": 1698627316,
      "node_id": "I_kwDOBN0Z8c5lPv70",
      "number": 104235,
      "title": "`enum.Enum.__dir__` docs do not mention enum members in return value",
      "user": {
        "login": "chgnrdv",
        "id": 52372310,
        "node_id": "MDQ6VXNlcjUyMzcyMzEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/52372310?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chgnrdv",
        "html_url": "https://github.com/chgnrdv",
        "followers_url": "https://api.github.com/users/chgnrdv/followers",
        "following_url": "https://api.github.com/users/chgnrdv/following{/other_user}",
        "gists_url": "https://api.github.com/users/chgnrdv/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/chgnrdv/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chgnrdv/subscriptions",
        "organizations_url": "https://api.github.com/users/chgnrdv/orgs",
        "repos_url": "https://api.github.com/users/chgnrdv/repos",
        "events_url": "https://api.github.com/users/chgnrdv/events{/privacy}",
        "received_events_url": "https://api.github.com/users/chgnrdv/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "ethanfurman",
        "id": 7659890,
        "node_id": "MDQ6VXNlcjc2NTk4OTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7659890?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ethanfurman",
        "html_url": "https://github.com/ethanfurman",
        "followers_url": "https://api.github.com/users/ethanfurman/followers",
        "following_url": "https://api.github.com/users/ethanfurman/following{/other_user}",
        "gists_url": "https://api.github.com/users/ethanfurman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ethanfurman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ethanfurman/subscriptions",
        "organizations_url": "https://api.github.com/users/ethanfurman/orgs",
        "repos_url": "https://api.github.com/users/ethanfurman/repos",
        "events_url": "https://api.github.com/users/ethanfurman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ethanfurman/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "ethanfurman",
          "id": 7659890,
          "node_id": "MDQ6VXNlcjc2NTk4OTA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7659890?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ethanfurman",
          "html_url": "https://github.com/ethanfurman",
          "followers_url": "https://api.github.com/users/ethanfurman/followers",
          "following_url": "https://api.github.com/users/ethanfurman/following{/other_user}",
          "gists_url": "https://api.github.com/users/ethanfurman/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ethanfurman/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ethanfurman/subscriptions",
          "organizations_url": "https://api.github.com/users/ethanfurman/orgs",
          "repos_url": "https://api.github.com/users/ethanfurman/repos",
          "events_url": "https://api.github.com/users/ethanfurman/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ethanfurman/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2023-05-06T13:13:15Z",
      "updated_at": "2023-05-06T16:09:00Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "3.12 [documentation](https://docs.python.org/3.12/library/enum.html#enum.Enum.__dir__) for `enum.Enum.__dir__` says that this method returns \"`['__class__', '__doc__', '__module__', 'name', 'value']` and any public methods defined on `self.__class__`\", but this is not true, e.g. when using the code provided:\r\n```python\r\n>>> from enum import Enum\r\n>>> from datetime import date\r\n>>> class Weekday(Enum):\r\n...     MONDAY = 1\r\n...     TUESDAY = 2\r\n...     WEDNESDAY = 3\r\n...     THURSDAY = 4\r\n...     FRIDAY = 5\r\n...     SATURDAY = 6\r\n...     SUNDAY = 7\r\n...     @classmethod\r\n...     def today(cls):\r\n...         print('today is %s' % cls(date.today().isoweekday()).name)\r\n... \r\n>>> dir(Weekday.SATURDAY)\r\n['FRIDAY', 'MONDAY', 'SATURDAY', 'SUNDAY', 'THURSDAY', 'TUESDAY', 'WEDNESDAY', '__class__', '__doc__', '__eq__', '__hash__', '__module__', 'name', 'today', 'value']\r\n```\r\n\r\n\r\nAlso it seems that `test_enum` has bug in it, because it doesn't detect the error above if invoked through `libregrtest` (as `./python -m test test_enum`), but direct run of `test_enum` or `doctest` on `enum` documentation fails:\r\n```\r\n$ ./python -m test.test_enum\r\n...........................................................................................................................................s.s......s........................................................................................................................................................................................................................................................................................................................s...........................................s...............................................................................................F\r\n======================================================================\r\nFAIL: /home/chgnrdv/cpython/Lib/test/../../Doc/library/enum.rst\r\nDoctest: enum.rst\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/chgnrdv/cpython/Lib/doctest.py\", line 2228, in runTest\r\n    raise self.failureException(self.format_failure(new.getvalue()))\r\nAssertionError: Failed doctest test for enum.rst\r\n  File \"/home/chgnrdv/cpython/Lib/test/../../Doc/library/enum.rst\", line 0\r\n\r\n----------------------------------------------------------------------\r\nFile \"/home/chgnrdv/cpython/Lib/test/../../Doc/library/enum.rst\", line 297, in enum.rst\r\nFailed example:\r\n    dir(Weekday.SATURDAY)\r\nExpected:\r\n    ['__class__', '__doc__', '__eq__', '__hash__', '__module__', 'name', 'today', 'value']\r\nGot:\r\n    ['FRIDAY', 'MONDAY', 'SATURDAY', 'SUNDAY', 'THURSDAY', 'TUESDAY', 'WEDNESDAY', '__class__', '__doc__', '__eq__', '__hash__', '__module__', 'name', 'today', 'value']\r\n\r\n\r\n----------------------------------------------------------------------\r\nRan 602 tests in 5.113s\r\n\r\nFAILED (failures=1, skipped=5)\r\n```\r\n```\r\n./python -m doctest Doc/library/enum.rst \r\n**********************************************************************\r\nFile \"Doc/library/enum.rst\", line 297, in enum.rst\r\nFailed example:\r\n    dir(Weekday.SATURDAY)\r\nExpected:\r\n    ['__class__', '__doc__', '__eq__', '__hash__', '__module__', 'name', 'today', 'value']\r\nGot:\r\n    ['FRIDAY', 'MONDAY', 'SATURDAY', 'SUNDAY', 'THURSDAY', 'TUESDAY', 'WEDNESDAY', '__class__', '__doc__', '__eq__', '__hash__', '__module__', 'name', 'today', 'value']\r\n**********************************************************************\r\n1 items had failures:\r\n   1 of  88 in enum.rst\r\n***Test Failed*** 1 failures.\r\n```\r\n\r\nI'm working on fixes for both errors.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-104236\n* gh-104237\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/104235/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/104235/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/104090",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/104090/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/104090/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/104090/events",
      "html_url": "https://github.com/python/cpython/issues/104090",
      "id": 1692465608,
      "node_id": "I_kwDOBN0Z8c5k4PnI",
      "number": 104090,
      "title": "Leaked semaphore objects in test_concurrent_futures",
      "user": {
        "login": "furkanonder",
        "id": 24194934,
        "node_id": "MDQ6VXNlcjI0MTk0OTM0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24194934?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furkanonder",
        "html_url": "https://github.com/furkanonder",
        "followers_url": "https://api.github.com/users/furkanonder/followers",
        "following_url": "https://api.github.com/users/furkanonder/following{/other_user}",
        "gists_url": "https://api.github.com/users/furkanonder/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/furkanonder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/furkanonder/subscriptions",
        "organizations_url": "https://api.github.com/users/furkanonder/orgs",
        "repos_url": "https://api.github.com/users/furkanonder/repos",
        "events_url": "https://api.github.com/users/furkanonder/events{/privacy}",
        "received_events_url": "https://api.github.com/users/furkanonder/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 11,
      "created_at": "2023-05-02T13:50:17Z",
      "updated_at": "2024-03-19T09:08:29Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n```sh\r\n$ ./python -m test test_concurrent_futures\r\n0:00:00 load avg: 5.30 Run tests sequentially\r\n0:00:00 load avg: 5.30 [1/1] test_concurrent_futures\r\n/workspace/cpython/Lib/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=150426) is multi-threaded, use of fork() may lead to deadlocks in the child.\r\n  self.pid = os.fork()\r\n/workspace/cpython/Lib/multiprocessing/resource_tracker.py:224: UserWarning: resource_tracker: There appear to be 6 leaked semaphore objects to clean up at shutdown\r\n  warnings.warn('resource_tracker: There appear to be %d '\r\nTraceback (most recent call last):\r\n  File \"/workspace/cpython/Lib/multiprocessing/util.py\", line 300, in _run_finalizers\r\n    finalizer()\r\n  File \"/workspace/cpython/Lib/multiprocessing/util.py\", line 224, in __call__\r\n    res = self._callback(*self._args, **self._kwargs)\r\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/workspace/cpython/Lib/multiprocessing/synchronize.py\", line 87, in _cleanup\r\n    sem_unlink(name)\r\nFileNotFoundError: [Errno 2] No such file or directory\r\nTraceback (most recent call last):\r\n  File \"/workspace/cpython/Lib/multiprocessing/util.py\", line 300, in _run_finalizers\r\n    finalizer()\r\n  File \"/workspace/cpython/Lib/multiprocessing/util.py\", line 224, in __call__\r\n    res = self._callback(*self._args, **self._kwargs)\r\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/workspace/cpython/Lib/multiprocessing/synchronize.py\", line 87, in _cleanup\r\n    sem_unlink(name)\r\nFileNotFoundError: [Errno 2] No such file or directory\r\nTraceback (most recent call last):\r\n  File \"/workspace/cpython/Lib/multiprocessing/util.py\", line 300, in _run_finalizers\r\n    finalizer()\r\n  File \"/workspace/cpython/Lib/multiprocessing/util.py\", line 224, in __call__\r\n    res = self._callback(*self._args, **self._kwargs)\r\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/workspace/cpython/Lib/multiprocessing/synchronize.py\", line 87, in _cleanup\r\n    sem_unlink(name)\r\nFileNotFoundError: [Errno 2] No such file or directory\r\nTraceback (most recent call last):\r\n  File \"/workspace/cpython/Lib/multiprocessing/util.py\", line 300, in _run_finalizers\r\n    finalizer()\r\n  File \"/workspace/cpython/Lib/multiprocessing/util.py\", line 224, in __call__\r\n    res = self._callback(*self._args, **self._kwargs)\r\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/workspace/cpython/Lib/multiprocessing/synchronize.py\", line 87, in _cleanup\r\n    sem_unlink(name)\r\nFileNotFoundError: [Errno 2] No such file or directory\r\nTraceback (most recent call last):\r\n  File \"/workspace/cpython/Lib/multiprocessing/util.py\", line 300, in _run_finalizers\r\n    finalizer()\r\n  File \"/workspace/cpython/Lib/multiprocessing/util.py\", line 224, in __call__\r\n    res = self._callback(*self._args, **self._kwargs)\r\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/workspace/cpython/Lib/multiprocessing/synchronize.py\", line 87, in _cleanup\r\n    sem_unlink(name)\r\nFileNotFoundError: [Errno 2] No such file or directory\r\nTraceback (most recent call last):\r\n  File \"/workspace/cpython/Lib/multiprocessing/util.py\", line 300, in _run_finalizers\r\n    finalizer()\r\n  File \"/workspace/cpython/Lib/multiprocessing/util.py\", line 224, in __call__\r\n    res = self._callback(*self._args, **self._kwargs)\r\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/workspace/cpython/Lib/multiprocessing/synchronize.py\", line 87, in _cleanup\r\n    sem_unlink(name)\r\nFileNotFoundError: [Errno 2] No such file or directory\r\ntest_concurrent_futures passed in 2 min 17 sec\r\n\r\n== Tests result: SUCCESS ==\r\n\r\n1 test OK.\r\n\r\nTotal duration: 2 min 17 sec\r\nTests result: SUCCESS\r\n```\r\n\r\n# Your environment\r\n\r\n<!-- Include as many relevant details as possible about the environment you experienced the bug in -->\r\n\r\n- CPython versions tested on: CPython 3.12.0a7+\r\n- Operating system and architecture: Ubuntu 22.04.2 LTS | Linux-5.15.0-47-generic-x86_64-with-glibc2.35 little-endian\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-106795\n* gh-106807\n* gh-106888\n* gh-115410\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/104090/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/104090/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/103721",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/103721/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/103721/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/103721/events",
      "html_url": "https://github.com/python/cpython/issues/103721",
      "id": 1680114318,
      "node_id": "I_kwDOBN0Z8c5kJIKO",
      "number": 103721,
      "title": "Allow defining GenericAlias-like things",
      "user": {
        "login": "adriangb",
        "id": 1755071,
        "node_id": "MDQ6VXNlcjE3NTUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1755071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adriangb",
        "html_url": "https://github.com/adriangb",
        "followers_url": "https://api.github.com/users/adriangb/followers",
        "following_url": "https://api.github.com/users/adriangb/following{/other_user}",
        "gists_url": "https://api.github.com/users/adriangb/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/adriangb/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/adriangb/subscriptions",
        "organizations_url": "https://api.github.com/users/adriangb/orgs",
        "repos_url": "https://api.github.com/users/adriangb/repos",
        "events_url": "https://api.github.com/users/adriangb/events{/privacy}",
        "received_events_url": "https://api.github.com/users/adriangb/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4030784939,
          "node_id": "LA_kwDOBN0Z8c7wQOWr",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-typing",
          "name": "topic-typing",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 11,
      "created_at": "2023-04-23T18:04:06Z",
      "updated_at": "2023-06-29T17:01:16Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\nAllow defining a GenericAlias-like thing that implements custom logic but can still interact with `typing.py` as if it was a `GenericAlias`.\r\n\r\n# Pitch\r\n\r\nThis is useful for things that want to do runtime type checking/tracking, including Pydantic and Numpy, and has zero impact on static type checkers.\r\n\r\n## Pydantic\r\n\r\n```python\r\nclass Model(BaseModel, Generic[T]):\r\n  x: int\r\n\r\n# need to track TypeVar substitution for data validation\r\n# requiring BaseModel.__class_getitem__ to return something\r\n# that is not a GenericAlias\r\nModel[int](x='abc') \r\n\r\n# needs to work at runtime, currently crashes w/ typing_extensions and only works on some version of CPython (including current main)\r\n# but could be broken at any moment without a test\r\nList[Model[T]][int]\r\n\r\n# ideally these would work both for Pydantic's sake and for any other tools introspecting types\r\nget_args(Model[T][int])\r\n```\r\n\r\n## Numpy\r\n\r\nI'm attempting to summarize how this applies to the [discusion in  TypingSig](https://mail.python.org/archives/list/typing-sig@python.org/thread/LRDYM2MR3ZNXG6IUFTDCDJBOOVDT2U72/#WQIGF6D272DMWFJXMFXVUNVPV2Q4LKGO) but full disclosure I am not the original author or a Numpy developer.\r\n\r\n```python\r\nST = TypeVar(\"ST\")\r\nDT = np.dtype[ST]\r\nactual = DT[np.float64]\r\n```\r\n\r\nIf `np.dtype[ST]` returns a \"generic alias like\" thing then that thing can implement `__getitem__` and return a concrete `np.Float64Dtype` or whatever when it gets substituted with `np.float64`.\r\n\r\n\r\n## Implementation\r\n\r\nMost of this already works in `typing.py` on CPython main. I only will need to tweak `get_args` and `get_origin`.\r\nOn the other hand, `typing_extensions` and older versions of CPython break if you do `List[MyGenericClass[T]][int]` because `List` doesn't recognize that `MyGenericClass` has generic parameters. So half other the feature request here is to add tests for existing behavior so that it is standardized and doesn't change going forward.\r\n\r\n# Previous discussion\r\n\r\nDiscussed a PyCon 2023 typing summit, my personal impression was a generally positive reception of the features request.\r\n\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-103722\r\n* gh-103838\r\n* gh-103840\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/103721/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/103721/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/103646",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/103646/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/103646/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/103646/events",
      "html_url": "https://github.com/python/cpython/issues/103646",
      "id": 1676413756,
      "node_id": "I_kwDOBN0Z8c5j7As8",
      "number": 103646,
      "title": "Windows Store installation of Python adds a pip.ini file which configures --user",
      "user": {
        "login": "pfmoore",
        "id": 1110419,
        "node_id": "MDQ6VXNlcjExMTA0MTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1110419?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pfmoore",
        "html_url": "https://github.com/pfmoore",
        "followers_url": "https://api.github.com/users/pfmoore/followers",
        "following_url": "https://api.github.com/users/pfmoore/following{/other_user}",
        "gists_url": "https://api.github.com/users/pfmoore/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pfmoore/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pfmoore/subscriptions",
        "organizations_url": "https://api.github.com/users/pfmoore/orgs",
        "repos_url": "https://api.github.com/users/pfmoore/repos",
        "events_url": "https://api.github.com/users/pfmoore/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pfmoore/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "zooba",
        "id": 1693688,
        "node_id": "MDQ6VXNlcjE2OTM2ODg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zooba",
        "html_url": "https://github.com/zooba",
        "followers_url": "https://api.github.com/users/zooba/followers",
        "following_url": "https://api.github.com/users/zooba/following{/other_user}",
        "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
        "organizations_url": "https://api.github.com/users/zooba/orgs",
        "repos_url": "https://api.github.com/users/zooba/repos",
        "events_url": "https://api.github.com/users/zooba/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zooba/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "zooba",
          "id": 1693688,
          "node_id": "MDQ6VXNlcjE2OTM2ODg=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/zooba",
          "html_url": "https://github.com/zooba",
          "followers_url": "https://api.github.com/users/zooba/followers",
          "following_url": "https://api.github.com/users/zooba/following{/other_user}",
          "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
          "organizations_url": "https://api.github.com/users/zooba/orgs",
          "repos_url": "https://api.github.com/users/zooba/repos",
          "events_url": "https://api.github.com/users/zooba/events{/privacy}",
          "received_events_url": "https://api.github.com/users/zooba/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 9,
      "created_at": "2023-04-20T10:04:09Z",
      "updated_at": "2023-05-29T17:40:01Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\nSee https://github.com/pypa/pip/issues/11982 for background. Basically, pip added a mechanism for users to configure the \"base\" (installation-wide) settings. This mechanism picks up a `pip.ini` file that is shipped with the Windows Store installation of Python. The problem is that the shipped config file sets the `--user` option globally, meaning that it gets picked up in virtual environments as well, which causes pip to fail.\r\n\r\nIMO, the pip feature needs reconsidering, to allow for the possibility of something like this, but it's also true that we advise *against* setting `--user` in configuration files. So I think the Windows Store distribution should consider other mechanisms for handling whatever issue prompted the addition of this config. If that requires changes from pip's side, please reach out - we already have a check if site-packages is writeable and we fall back to `--user` if it isn't, so we could definitely consider extending that check.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-105064\n* gh-105065\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/103646/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/103646/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/103484",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/103484/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/103484/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/103484/events",
      "html_url": "https://github.com/python/cpython/issues/103484",
      "id": 1665121010,
      "node_id": "I_kwDOBN0Z8c5jP7ry",
      "number": 103484,
      "title": "Sphinx linkcheck and broken/redirect occurrences in Python Docs",
      "user": {
        "login": "rffontenelle",
        "id": 1571783,
        "node_id": "MDQ6VXNlcjE1NzE3ODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1571783?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rffontenelle",
        "html_url": "https://github.com/rffontenelle",
        "followers_url": "https://api.github.com/users/rffontenelle/followers",
        "following_url": "https://api.github.com/users/rffontenelle/following{/other_user}",
        "gists_url": "https://api.github.com/users/rffontenelle/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rffontenelle/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rffontenelle/subscriptions",
        "organizations_url": "https://api.github.com/users/rffontenelle/orgs",
        "repos_url": "https://api.github.com/users/rffontenelle/repos",
        "events_url": "https://api.github.com/users/rffontenelle/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rffontenelle/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 29,
      "created_at": "2023-04-12T19:27:12Z",
      "updated_at": "2024-12-26T11:28:58Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "Running `make linkcheck` in Doc folder outputs thousands of broken and redirected status. It would be nice to clean this up so we can link-check Python in CI/CD for each commit, but right now it is too polluted.\r\n\r\nSome of these occurrences could/should be fixed in the docs itself, others can benefit from [Sphinx's linkcheck configs](https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-the-linkcheck-builder) e.g. `linkcheck_ignore` and `linkcheck_allow_redirect`.\r\n\r\nSee [linkcheck-log.txt](https://github.com/python/cpython/files/11215133/linkcheck-log.txt) for the full log as of commit f2b7ecb.\r\n\r\nFun stats obtained from the above file:\r\n- Of its 8327 lines, where 7824 are related to BPO -> GH issues. Of 7824, 5744 lines are from whatsnew/changelog and only 20 are not from whatsnew/\r\n- 241 lines are redirection of CPython CVS URL, fixing /tree/ to /blob/ in GitHub URL\r\n- 28 lines are broken links, where one broken link is 'https://' from an example in whatsnet/changelog\r\n\r\nThe way I see, this steps divide in:\r\n- Clean BPO to GH redirection messages\r\n- Fix broken links\r\n- Clean CPython CVS URL redirections\r\n- Clean GH issues to GH PR redirections\r\n- Fix the rest of the occurrences.\r\n\r\nlinkcheck_allow_redirect and linkcheck_ignore can be very handy in this case. linkcheck_allow_redirect makes 'ok' status a redirect that is being spotted by linkcheck, and we have linkcheck_ignore as the last resource.\r\n\r\nQuestions I have before implementing the solution:\r\n* Documentation hosted by Read The Docs may have language enabled so example.com is redirected to example.com/en/latest. To handle occurrences, I could add them to linkcheck_allow_redirect or we can use [sphinx-ext-intersphinx](https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html) to map a keyword to the documentation URL (e.g 'rtd' for read-the-docs docs). The last option allows to map to proper language of the target URL linked, similar on how [Weblate did](https://github.com/WeblateOrg/weblate/blob/main/docs/conf.py#L213))\r\n- Is there any restrictions to fix broken/redirect links in old whatsnew/<release>.rst?\r\n- Is there any restrictions to fix broken/redirect links in old whatsnew/changelog.rst (i.e. Misc/NEWS)?\r\n- Should I create a single Pull Request for all the fixes?\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-103569\n* gh-103602\n* gh-103608\n* gh-103683\n* gh-104001\n* gh-104088\n* gh-123019\n* gh-124136\n* gh-124137\n* gh-124144\n* gh-124151\n* gh-124152\n* gh-124169\n* gh-124179\n* gh-124180\n* gh-124183\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "vstinner",
        "id": 194129,
        "node_id": "MDQ6VXNlcjE5NDEyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vstinner",
        "html_url": "https://github.com/vstinner",
        "followers_url": "https://api.github.com/users/vstinner/followers",
        "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
        "organizations_url": "https://api.github.com/users/vstinner/orgs",
        "repos_url": "https://api.github.com/users/vstinner/repos",
        "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vstinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/103484/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/103484/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/103480",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/103480/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/103480/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/103480/events",
      "html_url": "https://github.com/python/cpython/issues/103480",
      "id": 1665071363,
      "node_id": "I_kwDOBN0Z8c5jPvkD",
      "number": 103480,
      "title": "New sysconfig API \ud83e\udd1e (meta-issue)",
      "user": {
        "login": "FFY00",
        "id": 11718923,
        "node_id": "MDQ6VXNlcjExNzE4OTIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/11718923?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/FFY00",
        "html_url": "https://github.com/FFY00",
        "followers_url": "https://api.github.com/users/FFY00/followers",
        "following_url": "https://api.github.com/users/FFY00/following{/other_user}",
        "gists_url": "https://api.github.com/users/FFY00/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/FFY00/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/FFY00/subscriptions",
        "organizations_url": "https://api.github.com/users/FFY00/orgs",
        "repos_url": "https://api.github.com/users/FFY00/repos",
        "events_url": "https://api.github.com/users/FFY00/events{/privacy}",
        "received_events_url": "https://api.github.com/users/FFY00/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 5178737896,
          "node_id": "LA_kwDOBN0Z8c8AAAABNK1E6A",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-sysconfig",
          "name": "topic-sysconfig",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2023-04-12T18:48:07Z",
      "updated_at": "2023-10-13T00:48:27Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\nProvide new `syconfig` API that is aligned to how things have evolved.\r\n\r\nFixes GH-99942\r\nFixes GH-99560\r\n<!--\r\nFixes GH-77620? (XXX: python-config.py should be part of the stdlib)\r\n-->\r\n\r\n# Pitch\r\n\r\nThe `sysconfig` module was added in Python 3.2, over 10 years ago, and though there were some minor changes and additions, its API stayed mostly the same. Since then things have evolved, with new platform support (eg. WASM) and features being added, and we are now at a point where the current design is not great and has been the source of several issues, especially since the `distutils` deprecation (see GH-99942 for eg.).\r\n\r\nChanging the existing API to better represent modern Python installations would cause a lot of breakage on existing code. Considering that, on top of several of its shortcomings, we think the best step at the moment would be to introduce a new API and mark part of the existing one as either deprecated, or pending deprecation, depending how development goes and on feedback from the impacted parties.\r\n\r\nHere are the main points we'd like to improve on:\r\n\r\n1) Users currently rely on [`sysconfig.get_config_vars`](https://docs.python.org/3/library/sysconfig.html) for **a lot** of things\r\n\r\nOn Posix, `sysconfig.get_config_vars` exports all the variables present in the installation's `Makefile`, and on Windows, it exports a handful of selected variables.\r\n\r\nhttps://github.com/python/cpython/blob/52f96d3ea39fea4c16e26b7b10bd2db09726bd7c/Lib/sysconfig.py#L540-L556\r\n\r\nThere are several issues with this, the main being that the exported variables are not documented, so there are no guarantees about what is information is gonna be available, or the variable names.\r\n\r\nWhile this is a good escape-hatch mechanism, it is a very poor option for the intended interface for key information. We should be exporting that information in a proper API.\r\n\r\n2) The installation paths model is outdated\r\n\r\nThere are a couple of issues and things to improve here here:\r\n- A scheme should be able to not provide non-critial paths (`scripts` for eg.)\r\n- We should introduce the concept of writable and read-only paths (users should not install to any path in the installed base, like `include`, for eg.)\r\n- We should introduce the concept of active location schemes (eg. `posix_user` should not be available on virtual environments)\r\n  - This would extend to vendor schemes outside the default environment, if we ever get around to standardize that\r\n\r\n**Discussion on this should go to GH-103482**\r\n\r\n3) Cross-compilation support is very poor\r\n\r\nCross-compilation at the moment is done by patching several aspects of Python, with the `sysconfig` module being the main thing. We provide several undocumented features to support this, like the allowing the project base path and sysconfig data module name to be overwritten via the `_PYTHON_PROJECT_BASE` and `_PYTHON_SYSCONFIGDATA_NAME` environment variables, respectively.\r\n\r\nWe believe one of the reasons that plays into users choosing to support cross-compilation by monkey patching Python, instead of directly adding cross-compilation support to the 3rd party building code, is because with the current `sysconfig` design, a lot of custom code would have to be added to properly support cross builds.\r\n\r\nOur proposal to solve this is to make the new API standalone, meaning it would provide all the information users may need for binary interfacing (eg. building extension modules) and similar applications. On top of this, we'd shift the design from using module functions to data holder objects, meaning all the relevant details of the Python installation would be represented by just a couple objects. Users that adopt this new API should then be able to support the cross build by simply changing the data objects for ones that represent the target installation.\r\n\r\nThis has the drawback that we'd be re-exporting information already present in other places (eg. `sys.version`, `sys.implementation`), but we believe it is worth.\r\n\r\n###### Future work\r\n\r\n*In a future step* we would also like to get Python to provide a static file detailing all the information required by the new `sysconfig` API. With this, we could then allow the new API to use an external installation/interpreter config file as the data source, making cross builds even simpler to support.\r\nSee the discussion at https://discuss.python.org/t/what-information-is-useful-to-know-statically-about-an-interpreter/25563 for examples of users that would benefit from this feature.\r\n\r\n## Migration plan\r\n\r\nTo help migration, and to make these improvements available on older Python versions, we plan to provide a backport package on PyPI, similarly with we already do with [`importlib_metadata`](https://github.com/python/importlib_metadata) (for [`importlib.metadata`](https://docs.python.org/3/library/importlib.metadata.html)), [`importlib_resources`](https://github.com/python/importlib_resources) (for [`importlib.resources`](https://docs.python.org/3/library/importlib.resources.html)), and [`typing_extensions`](https://github.com/python/typing_extensions) (for [`typing`](https://docs.python.org/3/library/typing.html)).\r\n\r\n## Sub-issues\r\n\r\nThe proposal is quite big, and may require extensive discussions with different parties, so I am splitting it into a couple separate issues.\r\n\r\n- Install paths (GH-103481)\r\n- Build information\r\n  - Compilation (GH-103482)\r\n  - Compatibility (GH-103483)\r\n\r\n# Previous discussion\r\n\r\nThis has been mentioned in a couple places, here are some of the most relevant:\r\n\r\nhttps://discuss.python.org/t/building-extensions-modules-in-a-post-distutils-world/23938\r\nhttps://discuss.python.org/t/sysconfig-should-provide-more-information-to-help-packaging/22950\r\nhttps://discuss.python.org/t/pep-582-python-local-packages-directory/963/391\r\nhttps://discuss.python.org/t/linux-distro-patches-to-sysconfig-are-changing-pip-install-prefix-outside-virtual-environments/18240/28\r\nhttps://github.com/python/cpython/issues/102522#issuecomment-1497727808\r\nhttps://github.com/PyO3/maturin/blob/5d5b96a9974eac26b8cdf601cd2faf64f4999de9/src/python_interpreter/sysconfig-freebsd.json\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-110785\n* gh-110792\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/103480/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/103480/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/103438",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/103438/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/103438/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/103438/events",
      "html_url": "https://github.com/python/cpython/issues/103438",
      "id": 1662107702,
      "node_id": "I_kwDOBN0Z8c5jEcA2",
      "number": 103438,
      "title": "Don't define CTYPES_PASS_BY_REF_HACK on aarch64 or riscv64",
      "user": {
        "login": "andreas-schwab",
        "id": 2175493,
        "node_id": "MDQ6VXNlcjIxNzU0OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andreas-schwab",
        "html_url": "https://github.com/andreas-schwab",
        "followers_url": "https://api.github.com/users/andreas-schwab/followers",
        "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}",
        "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions",
        "organizations_url": "https://api.github.com/users/andreas-schwab/orgs",
        "repos_url": "https://api.github.com/users/andreas-schwab/repos",
        "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}",
        "received_events_url": "https://api.github.com/users/andreas-schwab/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 2211400743,
          "node_id": "MDU6TGFiZWwyMjExNDAwNzQz",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-ctypes",
          "name": "topic-ctypes",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2023-04-11T09:34:09Z",
      "updated_at": "2023-04-23T19:59:11Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "There is no need to define CTYPES_PASS_BY_REF_HACK on aarch64 or riscv64.  This was a bug in libffi that has since been been fixed, for riscv64 in commit 4b0c358 and for aarch64 in commit e409225.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-103439\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/103438/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/103438/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/103291",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/103291/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/103291/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/103291/events",
      "html_url": "https://github.com/python/cpython/issues/103291",
      "id": 1656283615,
      "node_id": "I_kwDOBN0Z8c5iuOHf",
      "number": 103291,
      "title": "deactivate not available in tmux session started from a virtual environment",
      "user": {
        "login": "nakulj",
        "id": 3213360,
        "node_id": "MDQ6VXNlcjMyMTMzNjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3213360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nakulj",
        "html_url": "https://github.com/nakulj",
        "followers_url": "https://api.github.com/users/nakulj/followers",
        "following_url": "https://api.github.com/users/nakulj/following{/other_user}",
        "gists_url": "https://api.github.com/users/nakulj/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nakulj/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nakulj/subscriptions",
        "organizations_url": "https://api.github.com/users/nakulj/orgs",
        "repos_url": "https://api.github.com/users/nakulj/repos",
        "events_url": "https://api.github.com/users/nakulj/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nakulj/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2023-04-05T20:56:20Z",
      "updated_at": "2023-04-11T18:51:54Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\nIn Fish, when starting tmux after activating a virtual environment, the `deactivate` command is not available in the tmux session.\r\n\r\n```sh\r\n$ python3 -m venv .venv\r\n$ source .venv/bin/activate.fish\r\n(.venv) $ tmux\r\n```\r\nThis starts a tmux session with the virtual environment already activated, and working sort of correctly, but impossible to deactivate:\r\n```\r\n(.venv) $ echo $VIRTUAL_ENV\r\n~/test/.venv\r\n(.venv) $ which python\r\n~/test/.venv/bin/python\r\n(.venv) $ deactivate\r\nfish: Unknown command: deactivate\r\n```\r\n# Your environment\r\n\r\n<!-- Include as many relevant details as possible about the environment you experienced the bug in -->\r\n\r\n- CPython versions tested on: Python 3.11.2\r\n- Operating system and architecture: macOS Ventura, M1\r\n- Fish version- 3.6.1\r\n- tmux version- 3.3a\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-103447\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/103291/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/103291/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/103224",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/103224/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/103224/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/103224/events",
      "html_url": "https://github.com/python/cpython/issues/103224",
      "id": 1652788193,
      "node_id": "I_kwDOBN0Z8c5ig4vh",
      "number": 103224,
      "title": "Virtual environment breaks `test_sysconfig` and `test_venv` tests on macOS",
      "user": {
        "login": "artemmukhin",
        "id": 4854600,
        "node_id": "MDQ6VXNlcjQ4NTQ2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4854600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/artemmukhin",
        "html_url": "https://github.com/artemmukhin",
        "followers_url": "https://api.github.com/users/artemmukhin/followers",
        "following_url": "https://api.github.com/users/artemmukhin/following{/other_user}",
        "gists_url": "https://api.github.com/users/artemmukhin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/artemmukhin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/artemmukhin/subscriptions",
        "organizations_url": "https://api.github.com/users/artemmukhin/orgs",
        "repos_url": "https://api.github.com/users/artemmukhin/repos",
        "events_url": "https://api.github.com/users/artemmukhin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/artemmukhin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 588881297,
          "node_id": "MDU6TGFiZWw1ODg4ODEyOTc=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-mac",
          "name": "OS-mac",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 5178737896,
          "node_id": "LA_kwDOBN0Z8c8AAAABNK1E6A",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-sysconfig",
          "name": "topic-sysconfig",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 16,
      "created_at": "2023-04-03T21:18:13Z",
      "updated_at": "2024-02-06T19:32:28Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n1. Build CPython on macOS\r\n1. Activate a virtual environment as described in https://devguide.python.org/testing/coverage/#install-coverage\r\n2. Run `python -m test`\r\n\r\nResults in:\r\n```\r\n== Tests result: FAILURE ==\r\n\r\n2 tests failed:\r\n    test_sysconfig test_venv\r\n\r\n```\r\n\r\n```\r\n$ python -m test test_venv --verbose\r\n...\r\nAssertionError: Lists differ\r\n\r\nFirst differing element 0:\r\n'/.../bin/python.exe'\r\n'/.../bin/python'\r\n```\r\n\r\n### TODO\r\n- [ ] Fix `test_sysconfig` https://github.com/python/cpython/pull/103292\r\n- [ ] Fix `test_venv` https://github.com/python/cpython/pull/103243\r\n\r\n\r\n# Your environment\r\n\r\n- CPython versions tested on: `main`\r\n- Operating system and architecture: macOS 13.2.1\r\n\r\n\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-103243\r\n* gh-103292\r\n* gh-108667\n* gh-115100\n* gh-115101\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/103224/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/103224/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/103131",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/103131/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/103131/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/103131/events",
      "html_url": "https://github.com/python/cpython/issues/103131",
      "id": 1647523182,
      "node_id": "I_kwDOBN0Z8c5iMzVu",
      "number": 103131,
      "title": "`sys.getsizeof` and `sys.set_asyncgen_hooks` are not converted to AC",
      "user": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4019554242,
          "node_id": "LA_kwDOBN0Z8c7vlYfC",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-argument-clinic",
          "name": "topic-argument-clinic",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "sobolevn",
          "id": 4660275,
          "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sobolevn",
          "html_url": "https://github.com/sobolevn",
          "followers_url": "https://api.github.com/users/sobolevn/followers",
          "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
          "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
          "organizations_url": "https://api.github.com/users/sobolevn/orgs",
          "repos_url": "https://api.github.com/users/sobolevn/repos",
          "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sobolevn/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2023-03-30T12:28:55Z",
      "updated_at": "2023-03-30T13:22:49Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "I found this while working on https://github.com/python/typeshed/pull/9987 I've noticed that most of the functions inside `sys` do have `__text_signature__`. While `sys.getsizeof` doesn't.\r\n\r\n```python\r\n>>> import sys\r\n>>> sys.addaudithook.__text_signature__\r\n'($module, /, hook)'\r\n>>> sys.getsizeof.__text_signature__\r\n```\r\n\r\nI think this is not a planned feature. This is the artifact of times when `NULL` was not supported as a default value by AC. See original review comment https://github.com/python/cpython/pull/11328#discussion_r244186230\r\n\r\nI think that this should be fixed. I will send a PR with this function converted, it take a very minimal diff to do that.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-103132\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/103131/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/103131/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/103092",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/103092/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/103092/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/103092/events",
      "html_url": "https://github.com/python/cpython/issues/103092",
      "id": 1644462938,
      "node_id": "I_kwDOBN0Z8c5iBINa",
      "number": 103092,
      "title": "Isolate Stdlib Extension Modules",
      "user": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018672955,
          "node_id": "LA_kwDOBN0Z8c7viBU7",
          "url": "https://api.github.com/repos/python/cpython/labels/extension-modules",
          "name": "extension-modules",
          "color": "09fc59",
          "default": false,
          "description": "C modules in the Modules dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 58,
      "created_at": "2023-03-28T18:25:44Z",
      "updated_at": "2024-12-26T11:28:18Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "See [PEP 687](https://peps.python.org/pep-0687/).\r\n\r\nCurrently most stdlib extension have been ported to multi-phase init.  There are still a number of them to be ported, almost entirely non-builtin modules.  Also, some that have already been ported still have global state that needs to be fixed.\r\n\r\n(This is part of the effort to finish isolating multiple interpreters from each other.  See gh-100227.)\r\n\r\n### High-Level Info\r\n\r\nHow to isolate modules: https://docs.python.org/3/howto/isolating-extensions.html (AKA PEP 630).\r\n\r\nThe full list of modules that need porting can be found with:  `...`\r\n\r\nThe full list of remaining (unsupported) global variables is:\r\n\r\n* builtin extensions: https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L308-L335\r\n* non-builtin extensions: https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L338-L551\r\n\r\nA full analysis of the modules may be found at the bottom of this post.\r\n\r\n<details>\r\n<summary>(other info)</summary>\r\n\r\n#### Previous Work\r\n* https://github.com/python/cpython/issues/84258\r\n* _xxsubinterpreters [[issue](https://github.com/python/cpython/issues/99741)] [[PR](https://github.com/python/cpython/pull/99742)]\r\n* _testinternalcapi [[issue](https://github.com/python/cpython/issues/100997)] [[PR](https://github.com/python/cpython/pull/100998)]\r\n* ...\r\n\r\n#### Related Links\r\n\r\n* gh-85283\r\n* https://discuss.python.org/t/a-new-c-api-for-extensions-that-need-runtime-global-locks/20668\r\n* https://discuss.python.org/t/how-to-share-module-state-among-multiple-instances-of-an-extension-module/20663\r\n\r\n</details>\r\n\r\n\r\n### TODO\r\n\r\nHere is the list of modules that need attention, in a *rough*, best-effort priority order.  Additional details (e.g. if there is an issue and/or PR) is found in the analysis table at the bottom.\r\n\r\n* builtins (high priority)\r\n   * [x] #101819\r\n   * [x] **isolate** _collections\r\n   * [x] #101520\r\n   * [ ] #101509\r\n* essential (higher priority)\r\n   * [x] **port** _socket\r\n   * [x] **port** readline (leave as is: only available in main interp)\r\n   * [x] **isolate** _ssl\r\n   * [x] **port** _pickle\r\n   * [x] #117398\r\n   * [x] **isolate** _asyncio\r\n   * [x] #106078 \r\n   * [x] **isolate** array\r\n   * [x] **port** _ctypes\r\n     * [x] #114314\r\n     * [x] #117142\r\n   * [x] **port** _tkinter (leave as is: only available in main interp)\r\n   * [x] #103583\r\n   * [x] #101714\r\n   * [x] **isolate** _curses_panel (leave as is: only available in main interp)\r\n   * [x] **isolate** _elementtree\r\n   * [x] **isolate** pyexpat\r\n   * [x] **port** winreg (Windows)\r\n   * [x] **port** msvcrt (Windows)\r\n* non-essential (lower priority)\r\n   * [x] **port** winsound (Windows)\r\n   * [x] **isolate** _lsprof\r\n\r\nThe above does not include test modules.  They don't need to be ported/isolated (except for a few which already have been).\r\n\r\n---------------\r\n\r\n### Modules Analysis\r\n\r\n| module | builtin | Windows | PEP 594 | issue | PR | ported | # static types | # other global objects | # other globals | \r\n| --- | :---: | :---: | :---: | --- | --- | :---: | ---: | ---: | ---: |\r\n| _asyncio |  |  |  |  |  | yes |  | [2](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L463-L464) |  |\r\n| _collections  | X |  |  | (???) | (branch) | yes | [7](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L314-L318) |  |  |\r\n| _ctypes |  |  |  |  |  | **\\*\\*NO\\*\\*** | [37](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L344-L380) | [6](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L419-L465) | [4](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L484-L530) |\r\n| _curses |  |  |  |  |  | **\\*\\*NO\\*\\*** | [1](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L381) | [2](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L420-L442) | [4](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L486-L489) |\r\n| _curses_panel |  |  |  |  |  | yes |  |  | [1](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L531) |\r\n| _datetime |  |  |  | gh-71587 | gh-102995 | **\\*\\*NO\\*\\*** | [7](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L382-L388) | [10](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L443-L452) | [1](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L483) |\r\n| _decimal |  |  |  |  |  | **\\*\\*NO\\*\\*** | [4](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L389-L392) | [10](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L411-L459) | [6](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L490-L495) |\r\n| _elementtree |  |  |  |  |  | yes |  |  | [1](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L496) |\r\n| _io | X |  |  | gh-101819 | gh-101520 | **\\*\\*NO\\*\\*** | [5](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L319-L325) |  |  |\r\n| _lsprof |  |  |  |  |  | yes |  |  | [2](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L549-L550) |\r\n| _multibytecodec |  |  |  |  |  | yes |  |  | [23](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L497-L519) |\r\n| _pickle |  |  |  | (???) | (yes) | **\\*\\*NO\\*\\*** | [5](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L382-L388) |  |  |\r\n| _socket |  |  |  |  |  | **\\*\\*NO\\*\\*** | [1](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L400) | [2](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L424-L425) | [3](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L523-L551) |\r\n| _ssl |  |  |  | (???) | (branch) | yes |  |  | [1](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L532) |\r\n| _tkinter |  |  |  |  |  | **\\*\\*NO\\*\\*** |  | [8](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L413-L469) | [9](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L533-L541) |\r\n| _tracemalloc | X |  |  | gh-101520 |  | **\\*\\*NO\\*\\*** |  | [6](https://github.com/python/cpython/blob/main/Include/internal/pycore_tracemalloc.h#L86-L104) | [7](https://github.com/python/cpython/blob/main/Include/internal/pycore_tracemalloc.h#L68-L85) |\r\n| array |  |  |  |  |  | yes |  | [1](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L460) |  |\r\n| faulthandler  | X |  |  | gh-101509 |  | yes |  | [3+](https://github.com/python/cpython/blob/main/Include/internal/pycore_faulthandler.h#L39-L79) | [~22+](https://github.com/python/cpython/blob/main/Include/internal/pycore_faulthandler.h#L38-L84) |\r\n| msvcrt |  | Y |  |  |  | **\\*\\*NO\\*\\*** | ??? | ??? | ??? |\r\n| pyexpat |  |  |  |  |  | yes |  |  | [1](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L480) |\r\n| readline |  |  |  |  |  | **\\*\\*NO\\*\\*** |  |  | [9](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L520-L548) |\r\n| winreg |  | Y |  |  |  | **\\*\\*NO\\*\\*** | ??? | ??? | ??? |\r\n| winsound |  | Y |  |  |  | **\\*\\*NO\\*\\*** | ??? | ??? | ??? |\r\n\r\n<details>\r\n<summary>test/example modules</summary>\r\n\r\nThese can be ported/isolated but don't have to be.  They are the lowest priority.\r\n\r\n| module | issue | PR | ported | # static types | # other global objects | # other globals | \r\n| --- | --- | --- | :---: | ---: | ---: | ---: |\r\n| xxmodule |  |  |  | [3](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L401-L403) | [1](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L427) |  |\r\n| xxsubtype |  |  |  | [2](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L404-L405) |  |  |\r\n| xxlimited_35 |  |  |  |  | [2](https://github.com/python/cpython/blob/main/Tools/c-analyzer/cpython/globals-to-fix.tsv#L416-L426) |  |\r\n| ... |  |  |  |  |  |  |\r\n| ... |  |  |  |  |  |  |\r\n\r\n</details>\r\n\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-103093\r\n* gh-102982\r\n* gh-103094\r\n* gh-103108\r\n* gh-103248\r\n* gh-103249\r\n* gh-103250\r\n* gh-103381\r\n* gh-103540\r\n* gh-103612\r\n* gh-103893\r\n* gh-103932\r\n* gh-104020\r\n* gh-104196\r\n* gh-104506\r\n* gh-104561\r\n* gh-104725\r\n* gh-113434\r\n* gh-113555\r\n* gh-113620\r\n* gh-113630\r\n* gh-113727\r\n* gh-113774\r\n* gh-113857\r\n* gh-115130\r\n* gh-115242\r\n* gh-115301\r\n* gh-23091\r\n<!-- /gh-linked-prs -->",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/103092/reactions",
        "total_count": 4,
        "+1": 4,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/103092/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/103066",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/103066/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/103066/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/103066/events",
      "html_url": "https://github.com/python/cpython/issues/103066",
      "id": 1643081527,
      "node_id": "I_kwDOBN0Z8c5h7283",
      "number": 103066,
      "title": "site.py documentation does not mention special objects help, quit etc added to builtins",
      "user": {
        "login": "stevendaprano",
        "id": 19155079,
        "node_id": "MDQ6VXNlcjE5MTU1MDc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19155079?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevendaprano",
        "html_url": "https://github.com/stevendaprano",
        "followers_url": "https://api.github.com/users/stevendaprano/followers",
        "following_url": "https://api.github.com/users/stevendaprano/following{/other_user}",
        "gists_url": "https://api.github.com/users/stevendaprano/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/stevendaprano/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/stevendaprano/subscriptions",
        "organizations_url": "https://api.github.com/users/stevendaprano/orgs",
        "repos_url": "https://api.github.com/users/stevendaprano/repos",
        "events_url": "https://api.github.com/users/stevendaprano/events{/privacy}",
        "received_events_url": "https://api.github.com/users/stevendaprano/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018743106,
          "node_id": "LA_kwDOBN0Z8c7viSdC",
          "url": "https://api.github.com/repos/python/cpython/labels/easy",
          "name": "easy",
          "color": "0e8a16",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2023-03-28T02:05:47Z",
      "updated_at": "2024-09-06T07:30:05Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "The [site.py](https://docs.python.org/3/library/site.html) documentation does not mention the special objects that it adds to builtins:\r\n\r\n* help\r\n* quit and exit\r\n* license viewer\r\n* copyright and credit strings.\r\n\r\n(Have I missed any?) The second paragraph hints at them, saying \"Importing this module will append site-specific paths to the module search path and add a few builtins\" but fails to mention what those builtins are. We should add a brief section listing those added objects, and in the case of `help` linking to [pydoc](https://docs.python.org/3/library/pydoc.html).\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-103777\n* gh-123762\n* gh-123763\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/103066/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/103066/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/102960",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/102960/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/102960/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/102960/events",
      "html_url": "https://github.com/python/cpython/issues/102960",
      "id": 1637973808,
      "node_id": "I_kwDOBN0Z8c5hoX8w",
      "number": 102960,
      "title": "Support for weak references in frames",
      "user": {
        "login": "ambv",
        "id": 55281,
        "node_id": "MDQ6VXNlcjU1Mjgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/55281?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ambv",
        "html_url": "https://github.com/ambv",
        "followers_url": "https://api.github.com/users/ambv/followers",
        "following_url": "https://api.github.com/users/ambv/following{/other_user}",
        "gists_url": "https://api.github.com/users/ambv/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ambv/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ambv/subscriptions",
        "organizations_url": "https://api.github.com/users/ambv/orgs",
        "repos_url": "https://api.github.com/users/ambv/repos",
        "events_url": "https://api.github.com/users/ambv/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ambv/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "ambv",
        "id": 55281,
        "node_id": "MDQ6VXNlcjU1Mjgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/55281?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ambv",
        "html_url": "https://github.com/ambv",
        "followers_url": "https://api.github.com/users/ambv/followers",
        "following_url": "https://api.github.com/users/ambv/following{/other_user}",
        "gists_url": "https://api.github.com/users/ambv/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ambv/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ambv/subscriptions",
        "organizations_url": "https://api.github.com/users/ambv/orgs",
        "repos_url": "https://api.github.com/users/ambv/repos",
        "events_url": "https://api.github.com/users/ambv/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ambv/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "ambv",
          "id": 55281,
          "node_id": "MDQ6VXNlcjU1Mjgx",
          "avatar_url": "https://avatars.githubusercontent.com/u/55281?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ambv",
          "html_url": "https://github.com/ambv",
          "followers_url": "https://api.github.com/users/ambv/followers",
          "following_url": "https://api.github.com/users/ambv/following{/other_user}",
          "gists_url": "https://api.github.com/users/ambv/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ambv/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ambv/subscriptions",
          "organizations_url": "https://api.github.com/users/ambv/orgs",
          "repos_url": "https://api.github.com/users/ambv/repos",
          "events_url": "https://api.github.com/users/ambv/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ambv/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        {
          "login": "markshannon",
          "id": 9448417,
          "node_id": "MDQ6VXNlcjk0NDg0MTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/markshannon",
          "html_url": "https://github.com/markshannon",
          "followers_url": "https://api.github.com/users/markshannon/followers",
          "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
          "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
          "organizations_url": "https://api.github.com/users/markshannon/orgs",
          "repos_url": "https://api.github.com/users/markshannon/repos",
          "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/markshannon/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        {
          "login": "brandtbucher",
          "id": 40968415,
          "node_id": "MDQ6VXNlcjQwOTY4NDE1",
          "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/brandtbucher",
          "html_url": "https://github.com/brandtbucher",
          "followers_url": "https://api.github.com/users/brandtbucher/followers",
          "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
          "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
          "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
          "repos_url": "https://api.github.com/users/brandtbucher/repos",
          "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
          "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 7,
      "created_at": "2023-03-23T17:29:45Z",
      "updated_at": "2023-11-28T12:04:41Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "It's occasionally useful to be able to link information to active frames. Two recent examples:\r\n- https://stackoverflow.com/questions/72270154/weakref-weakkeydictionary-to-frame-frametype-objects\r\n- https://github.com/python/cpython/pull/102865\r\n\r\nCurrently, since frames don't support being weakly referenced, custom lifecycle management is required in this case. That's unfortunate because errors in cleaning out the references will lead to memory leaks of dead frames and their respective locals.\r\n\r\nThe straightforward solution is to **add weakref support to `frame` objects**. The performance hit is limited to setting NULL on the `f_weakreflist` field on frame object creation, and later a NULL check (for whether there are any weakrefs) at the frame object's deallocation. This is what the related PR does.\r\n\r\nI ran the PR and the base `main` branch at the time against pyperformance 1.0.6. The raw results are in [benchmarks.zip](https://github.com/python/cpython/files/11053897/benchmarks.zip) but the gist is that there are no significant differences between the two branches in any of the benchmarks executed.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-102962\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/102960/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/102960/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/102927",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/102927/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/102927/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/102927/events",
      "html_url": "https://github.com/python/cpython/issues/102927",
      "id": 1636297988,
      "node_id": "I_kwDOBN0Z8c5hh-0E",
      "number": 102927,
      "title": "xmlrpc throws \"OverflowError: int exceeds XML-RPC limits\" on 64bit integers",
      "user": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following{/other_user}",
        "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 8,
      "created_at": "2023-03-22T18:31:43Z",
      "updated_at": "2024-02-13T15:44:51Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "The xmlrpc library does not support sending 64bit integers. When called with an integer larger than `MAXINT = 2147483647` or smaller than `MININT = -2147483648`, an `OverflowError: int exceeds XML-RPC limits` exception is thrown. \r\n\r\nAlternatively, one could make use of the <i8> type of XML-RPC. \n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-102930\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/102927/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/102927/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/102869",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/102869/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/102869/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/102869/events",
      "html_url": "https://github.com/python/cpython/issues/102869",
      "id": 1633702405,
      "node_id": "I_kwDOBN0Z8c5hYFIF",
      "number": 102869,
      "title": "Superoptimize sequences of instructions without observable side-effects in the bytecode compiler.",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2023-03-21T11:24:02Z",
      "updated_at": "2023-11-27T17:37:16Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Sequences of `LOAD_FAST`, `COPY`, `LOAD_CONST`, `SWAP`, `POP_TOP`, `NOP` (and other?) instructions have no observable side-effects as the evaluation stack cannot be observed.\r\nTherefore we can replace any sequence of these instructions with a shorter sequence that has the same effect.\r\nBy using a [superoptimizer](https://en.wikipedia.org/wiki/Superoptimization) we replace sequences with the optimal equivalent sequence.\r\n\r\nIn practice we will want to limit the size of lookup tables we generate, but we can generate complete tables for sequences up to 4 or 5.\r\n\r\nThere is a slight complication of line numbers, but as long the number of line numbers does not exceed the optimal sequence length, we can just allocate instructions line numbers without regard to the original mapping of instructions to line numbers.\r\n\r\n ### Generating and using tables.\r\nDuring build (or offline), we can generate a table mapping sequences of instructions to the stack, recording the optimum sequence for each stack. \r\nE.g. The sequences `LOAD_FAST x; LOAD_FAST y; SWAP 2` and `LOAD_FAST y; LOAD_FAST x` generate the stack `[ y, x ]`.\r\nSo the lookup table maps `[ y, x ]` to `LOAD_FAST y; LOAD_FAST x`.\r\n\r\nWhenever we see a sequence of instructions without observable side effects, we compute the stack, and look it up. If we find a match, emit the optimal sequence.\r\n\r\n#### Mimimizing the size of tables\r\n\r\nWe will need to use some sort of numbering scheme for the indexes of `LOAD_FAST` and `LOAD_CONST`, and treat `LOAD_CONST` the same as `LOAD_FAST`.\r\n\r\nSo that `LOAD_FAST a; LOAD_CONST 1.0` becomes `LOAD 1; LOAD 2`.\r\n\r\nIn order to keep the table size down, we should limit the number of distinct locals and constants to 4, and the depth of the stack to something like 7. That way there are only a few thousand possible stacks, and the optimal sequence for each cannot be more than 4 instructions. The entire table should then fit into tens of kbytes of `const` data.\r\n\r\n### Handling line numbers.\r\n\r\nSince the instructions have no visible side-effects, we can place the line events anywhere in the instruction sequence.\r\nTaking the above sequence with line numbers:\r\n```\r\n4 LOAD_FAST x\r\n  LOAD_FAST y\r\n5 SWAP 2\r\n```\r\n\r\nWe can generate:\r\n```\r\n4 LOAD_FAST y\r\n5 LOAD_FAST x\r\n``` \r\nwhich is valid as it produces the same sequence of line events and the observable state of the VM is the same in both cases.\r\n\r\n\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-104056\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/102869/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/102869/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/102733",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/102733/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/102733/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/102733/events",
      "html_url": "https://github.com/python/cpython/issues/102733",
      "id": 1625850687,
      "node_id": "I_kwDOBN0Z8c5g6IM_",
      "number": 102733,
      "title": "site.getsitepackages returns also the venv dir",
      "user": {
        "login": "timendum",
        "id": 670620,
        "node_id": "MDQ6VXNlcjY3MDYyMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/670620?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/timendum",
        "html_url": "https://github.com/timendum",
        "followers_url": "https://api.github.com/users/timendum/followers",
        "following_url": "https://api.github.com/users/timendum/following{/other_user}",
        "gists_url": "https://api.github.com/users/timendum/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/timendum/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/timendum/subscriptions",
        "organizations_url": "https://api.github.com/users/timendum/orgs",
        "repos_url": "https://api.github.com/users/timendum/repos",
        "events_url": "https://api.github.com/users/timendum/events{/privacy}",
        "received_events_url": "https://api.github.com/users/timendum/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 570103914,
          "node_id": "MDU6TGFiZWw1NzAxMDM5MTQ=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-windows",
          "name": "OS-windows",
          "color": "d4c5f9",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 10,
      "created_at": "2023-03-15T16:22:25Z",
      "updated_at": "2023-03-31T14:38:50Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\nOn Windows, the method `site.getsitepackages()` returns `<venv>\\lib\\site-packages` which is expected, but also `<venv>`, which I think is an issue.\r\n\r\nFrom the documentation, it should \"Return a list containing all global site-packages directories.\"\r\n\r\nI've also checked in a Linux virtualenv environment, and it returns only \"site-packages\" and \"dist-packages\" folders.\r\n\r\n# Demo\r\n\r\n```console\r\nPS> python -m venv test\r\nPS> cd .\\test\\\r\nPS> .\\Scripts\\activate\r\nPS> python\r\nPython 3.10.10 (tags/v3.10.10:aad5f6a, Feb  7 2023, 17:20:36) [MSC v.1929 64 bit (AMD64)] on win32\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import site\r\n>>> site.getsitepackages()\r\n['C:\\\\projects\\\\test', 'C:\\\\projects\\\\test\\\\lib\\\\site-packages']\r\n```\r\n\r\n**Expected:**\r\n\r\n```console\r\n['C:\\\\projects\\\\test\\\\lib\\\\site-packages']\r\n```\r\n\r\n\r\n\r\n**Environment**\r\n\r\n- Operating system and architecture:: Windows 10 / amd64\r\n- CPython versions tested on: 3.10.10 but also 3.10.4\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-102986\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/102733/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/102733/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/102699",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/102699/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/102699/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/102699/events",
      "html_url": "https://github.com/python/cpython/issues/102699",
      "id": 1624215692,
      "node_id": "I_kwDOBN0Z8c5gz5CM",
      "number": 102699,
      "title": "Add a Dataclass abstract base class for instance checking and type annotations",
      "user": {
        "login": "NeilGirdhar",
        "id": 730137,
        "node_id": "MDQ6VXNlcjczMDEzNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/730137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NeilGirdhar",
        "html_url": "https://github.com/NeilGirdhar",
        "followers_url": "https://api.github.com/users/NeilGirdhar/followers",
        "following_url": "https://api.github.com/users/NeilGirdhar/following{/other_user}",
        "gists_url": "https://api.github.com/users/NeilGirdhar/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/NeilGirdhar/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/NeilGirdhar/subscriptions",
        "organizations_url": "https://api.github.com/users/NeilGirdhar/orgs",
        "repos_url": "https://api.github.com/users/NeilGirdhar/repos",
        "events_url": "https://api.github.com/users/NeilGirdhar/events{/privacy}",
        "received_events_url": "https://api.github.com/users/NeilGirdhar/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4030784939,
          "node_id": "LA_kwDOBN0Z8c7wQOWr",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-typing",
          "name": "topic-typing",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 7334604047,
          "node_id": "LA_kwDOBN0Z8c8AAAABtS0tDw",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-dataclasses",
          "name": "topic-dataclasses",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 15,
      "created_at": "2023-03-14T20:03:22Z",
      "updated_at": "2024-08-16T08:55:41Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\nAdd the class `dataclasses.Dataclass` that\r\n- supports instance and subclass checks using similar logic as `dataclasses.is_dataclass`, and\r\n- blocks inheritance in `__init_subclass__`.\r\n\r\n(Edit: removed \"has an attribute `__dataclass_fields__` for the purpose of type checking\")\r\n\r\n# Pitch\r\n\r\nThis class would simplify runtime type-checking of dataclasses:\r\n```python\r\nnot isinstance(x, type) and dataclasses.is_dataclass(x)  # Previously\r\nisinstance(x, dataclasses.Dataclass)  # With this feature.\r\n```\r\nand similarly\r\n```python\r\nisinstance(x, type) and dataclasses.is_dataclass(x)  # Previously.\r\nissubclass(x, dataclasses.Dataclass)  # With this feature.\r\n```\r\nBesides being simpler, it would also allow combined instance checks like `isinstance(x, Dataclass | SomeOtherBase)`, which is arguably more Pythonic than the combined function calls above (marked \"Previously\").\r\n\r\nIt would also allow users to annotate dataclasses using `Dataclass` or `type[Dataclass]`, which is currently impossible without reaching into protected areas of the typeshed.\r\n\r\nInheritance could be blocked for now with a friendly error message (that perhaps tells you to use the decorator either directly or in a base class's `__init_subclass__`).\r\n\r\n# Previous discussion\r\n\r\nThere's some discussion here: https://github.com/python/typing_extensions/issues/115\r\n@AlexWaygood \r\n@JelleZijlstra \r\n@henryiii \n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-102933\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/102699/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/102699/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/102660",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/102660/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/102660/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/102660/events",
      "html_url": "https://github.com/python/cpython/issues/102660",
      "id": 1622302411,
      "node_id": "I_kwDOBN0Z8c5gsl7L",
      "number": 102660,
      "title": "Re-Loading the sys or builtins Modules is Problematic",
      "user": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018993468,
          "node_id": "LA_kwDOBN0Z8c7vjPk8",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-subinterpreters",
          "name": "topic-subinterpreters",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2023-03-13T21:35:44Z",
      "updated_at": "2024-03-15T17:19:57Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "The `sys` and `builtins` modules are special in that they are initialized early in interpreter startup, mostly before the import system.  They aren't initialized like other modules.  Furthermore, the data they expose is fundamental to the interpreter.  Reloading the modules doesn't make much sense.\r\n\r\nThe simplest thing to do is to disallow manually loading them (e.g. via the loader).  At the very least we should handle m_copy for these modules carefully.  (This came up while working on gh-101660.)\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-102661\n* gh-102744\n* gh-103257\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/102660/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/102660/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/102551",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/102551/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/102551/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/102551/events",
      "html_url": "https://github.com/python/cpython/issues/102551",
      "id": 1616586861,
      "node_id": "I_kwDOBN0Z8c5gWyht",
      "number": 102551,
      "title": "Bind greedily assigns kwargs to args, which can cause bugs when binding to decorated functions",
      "user": {
        "login": "Samreay",
        "id": 6748505,
        "node_id": "MDQ6VXNlcjY3NDg1MDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6748505?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Samreay",
        "html_url": "https://github.com/Samreay",
        "followers_url": "https://api.github.com/users/Samreay/followers",
        "following_url": "https://api.github.com/users/Samreay/following{/other_user}",
        "gists_url": "https://api.github.com/users/Samreay/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Samreay/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Samreay/subscriptions",
        "organizations_url": "https://api.github.com/users/Samreay/orgs",
        "repos_url": "https://api.github.com/users/Samreay/repos",
        "events_url": "https://api.github.com/users/Samreay/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Samreay/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 7,
      "created_at": "2023-03-09T07:25:25Z",
      "updated_at": "2024-05-05T20:14:17Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\nSeveral repositories (like Prefect) make use of deferred execution of functions. They utilise inspect.Signature to create a bound method, and turn a list of parameters into args and kwargs to be passed in `*args, **kwargs`.\r\n\r\nWhen it works fine, it looks like this:\r\n\r\n```python\r\nimport inspect\r\n\r\ndef add(a, b, c=100):\r\n    return a + b + c\r\n\r\nbound = inspect.signature(add).bind(1, 2, c=100)\r\nprint(f\"args: {bound.args}, kwargs: {bound.kwargs}, result: {add(*bound.args, **bound.kwargs)}\")\r\n```\r\nAnd this prints out:\r\n```\r\nargs: (1, 2, 100), kwargs: {}, result: 103\r\n```\r\n\r\nNotice that the `100` has moved from a kwarg into an arg, but that's fine, it will still run.\r\n\r\nThings get complicated when decorators are introduced, and it seems base python has no method of getting args and kwargs that will work with *both* the wrapped and unwrapped signature.\r\n\r\nThe below code has two methods, each decorated, and both of them fail the bound execution.\r\n\r\n```python\r\nfrom functools import wraps\r\nimport inspect\r\n\r\n\r\ndef decorator(fn):\r\n    @wraps(fn)\r\n    def wrapper(a, b, **kwargs):\r\n        print(f\"kwargs are {kwargs}\")\r\n        return fn(a, b, **kwargs)\r\n\r\n    return wrapper\r\n\r\n\r\n@decorator\r\ndef add(a, b, c=100):\r\n    return a + b + c\r\n\r\n\r\ndef decorator2(fn):\r\n    @wraps(fn)\r\n    def wrapper(a, b, c=100):\r\n        return fn(a, b, c=c)\r\n\r\n    return wrapper\r\n\r\n\r\n@decorator2\r\ndef add2(a, b, **kwargs):\r\n    return a + b + kwargs.get(\"c\", 100)\r\n\r\n\r\ntry:\r\n    bound_signature = inspect.signature(add).bind(1, 2, c=100)\r\n    print(bound_signature.args, bound_signature.kwargs)\r\n    add(*bound_signature.args, **bound_signature.kwargs)\r\nexcept Exception as e:\r\n    print(\"Failure in first method: \", e)\r\n\r\ntry:\r\n    bound_signature = inspect.signature(add2, follow_wrapped=False).bind(1, 2, c=100)\r\n    print(bound_signature.args, bound_signature.kwargs)\r\n    add(*bound_signature.args, **bound_signature.kwargs)\r\nexcept Exception as e:\r\n    print(\"Failure in second method: \", e)\r\n```\r\n\r\nAnd fails with:\r\n\r\n```\r\n(1, 2, 100) {}\r\nFailure in first method:  wrapper() takes 2 positional arguments but 3 were given\r\n(1, 2, 100) {}\r\nFailure in second method:  wrapper() takes 2 positional arguments but 3 were given\r\n```\r\n\r\nThey fail because of that default behaviour of treating kwargs as args.\r\n\r\nIn terms of expected behaviour, I would have assumed that a signature on a wrapped method, when resolving to args and kwargs, would be able to assign parameters between args and kwargs reliably.\r\n\r\n### Potential Solution\r\n\r\nI notice that in `inspect.py -> BoundArguments -> args/kwargs properties` that some logic might be modified here.\r\n\r\nInstead of making all `_POSITIONAL_OR_KEYWORD` parameters args, I feel the language would be more correct to assign them based upon whether or not the `parameter.default is Parameter.empty`. This may fix the issue and stop greedy conversion to arguments.\r\n\r\n# Your environment\r\n\r\n\r\n- CPython versions tested on: 3.9.13\r\n- Operating system and architecture: MacOS\r\n\r\n\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-102820\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/102551/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/102551/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/102520",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/102520/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/102520/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/102520/events",
      "html_url": "https://github.com/python/cpython/issues/102520",
      "id": 1614468139,
      "node_id": "I_kwDOBN0Z8c5gOtQr",
      "number": 102520,
      "title": "\"This action is restricted\" Internet Explorer dialog when opening browser in Windows with no default browser",
      "user": {
        "login": "JasonWeill",
        "id": 93281816,
        "node_id": "U_kgDOBY9eGA",
        "avatar_url": "https://avatars.githubusercontent.com/u/93281816?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JasonWeill",
        "html_url": "https://github.com/JasonWeill",
        "followers_url": "https://api.github.com/users/JasonWeill/followers",
        "following_url": "https://api.github.com/users/JasonWeill/following{/other_user}",
        "gists_url": "https://api.github.com/users/JasonWeill/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JasonWeill/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JasonWeill/subscriptions",
        "organizations_url": "https://api.github.com/users/JasonWeill/orgs",
        "repos_url": "https://api.github.com/users/JasonWeill/repos",
        "events_url": "https://api.github.com/users/JasonWeill/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JasonWeill/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 570103914,
          "node_id": "MDU6TGFiZWw1NzAxMDM5MTQ=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-windows",
          "name": "OS-windows",
          "color": "d4c5f9",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2023-03-08T01:15:17Z",
      "updated_at": "2023-04-03T10:26:55Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "Moved from https://github.com/jupyterlab/jupyterlab/issues/14142, per [this comment](https://github.com/jupyterlab/jupyterlab/issues/14142#issuecomment-1458872683) that suggests that the fault is in [this file](https://github.com/python/cpython/blob/54060ae91da2df44b3f6e6c698694d40284687e9/Lib/webbrowser.py#L550) in CPython.\r\n\r\n## Description\r\n\r\nOn a Windows 10 computer with Firefox set as the default browser, running `jupyter lab` causes a dialog box to appear: \"Internet Explorer / This action is restricted. For more information, please contact your system administrator.\"\r\n\r\n![ie-popup](https://user-images.githubusercontent.com/93281816/223282642-4bfef503-efaf-4720-9eec-f38a4ddd89b1.png)\r\n\r\nAfter I dismiss the dialog, Microsoft Edge pops up with the JupyterLab URL specified in the terminal.\r\n\r\nOn this Windows machine, there is no default browser set.\r\n\r\n![image (4)](https://user-images.githubusercontent.com/93281816/223282666-4c25c01c-2404-4eb4-8623-dd61cf1678ba.png)\r\n\r\n## Reproduce\r\n\r\n<!--Describe step-by-step instructions to reproduce the behavior-->\r\n\r\n1. Set up a new Windows 10 machine with no default browser.\r\n2. Install JupyterLab via Conda (`conda install jupyterlab`).\r\n3. Run JupyterLab from the terminal (`jupyter lab`)\r\n4. See behavior shown above.\r\n\r\n<!--Describe how you diagnosed the issue. See the guidelines at\r\n https://jupyterlab.readthedocs.io/en/latest/getting_started/issue.html -->\r\n\r\n## Expected behavior\r\n\r\nIf no default browser is selected, the `jupyter` executable does not attempt to launch any browser, but instead displays the URL to load with no further action. This would be similar behavior to when the user runs `jupyter lab` with the `--no-browser` parameter.\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-103212\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/102520/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/102520/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/102247",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/102247/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/102247/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/102247/events",
      "html_url": "https://github.com/python/cpython/issues/102247",
      "id": 1599737580,
      "node_id": "I_kwDOBN0Z8c5fWg7s",
      "number": 102247,
      "title": "Update HTTP status codes in http package to match rfc9110",
      "user": {
        "login": "yeojin-dev",
        "id": 38222260,
        "node_id": "MDQ6VXNlcjM4MjIyMjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222260?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yeojin-dev",
        "html_url": "https://github.com/yeojin-dev",
        "followers_url": "https://api.github.com/users/yeojin-dev/followers",
        "following_url": "https://api.github.com/users/yeojin-dev/following{/other_user}",
        "gists_url": "https://api.github.com/users/yeojin-dev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/yeojin-dev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/yeojin-dev/subscriptions",
        "organizations_url": "https://api.github.com/users/yeojin-dev/orgs",
        "repos_url": "https://api.github.com/users/yeojin-dev/repos",
        "events_url": "https://api.github.com/users/yeojin-dev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/yeojin-dev/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2023-02-25T15:12:01Z",
      "updated_at": "2024-04-07T19:33:55Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\nUpdate HTTP status codes in http package to match rfc9110\r\n* example\r\n  * (422)UNPROCESSABLE_ENTITY -> UNPROCESSABLE_CONTENT\r\n  * (413)REQUEST_ENTITY_TOO_LARGE -> CONTENT_TOO_LARGE\r\n* references\r\n  * https://httpwg.org/specs/rfc9110.html#status.422\r\n  * https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-102570\n* gh-117611\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/102247/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/102247/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/101703",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/101703/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/101703/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/101703/events",
      "html_url": "https://github.com/python/cpython/issues/101703",
      "id": 1576615048,
      "node_id": "I_kwDOBN0Z8c5d-TyI",
      "number": 101703,
      "title": "Let's get rid of sprintf()",
      "user": {
        "login": "gvanrossum",
        "id": 2894642,
        "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gvanrossum",
        "html_url": "https://github.com/gvanrossum",
        "followers_url": "https://api.github.com/users/gvanrossum/followers",
        "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
        "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
        "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
        "repos_url": "https://api.github.com/users/gvanrossum/repos",
        "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 10,
      "created_at": "2023-02-08T18:38:01Z",
      "updated_at": "2024-03-20T10:24:32Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "On macOS with Xcode 14 we now get warnings like these:\r\n```\r\nObjects/unicodeobject.c:736:16: warning: 'sprintf' is deprecated: This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead. [-Wdeprecated-declarations]\r\n```\r\nWhile we can prove to ourselves that these specific `sprintf()` calls are safe, the warnings are annoying, but disabling them would also disable other, more useful warnings (or so @Yhg1s tells me on Discord). So let's just switch these to `snprintf()`.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-101729\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/101703/reactions",
        "total_count": 6,
        "+1": 4,
        "-1": 0,
        "laugh": 0,
        "hooray": 2,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/101703/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/101552",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/101552/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/101552/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/101552/events",
      "html_url": "https://github.com/python/cpython/issues/101552",
      "id": 1570578423,
      "node_id": "I_kwDOBN0Z8c5dnR_3",
      "number": 101552,
      "title": "The builtin `help(...)` should unstringify (and \"unforwardref\") annotations",
      "user": {
        "login": "SimpleArt",
        "id": 71458112,
        "node_id": "MDQ6VXNlcjcxNDU4MTEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/71458112?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SimpleArt",
        "html_url": "https://github.com/SimpleArt",
        "followers_url": "https://api.github.com/users/SimpleArt/followers",
        "following_url": "https://api.github.com/users/SimpleArt/following{/other_user}",
        "gists_url": "https://api.github.com/users/SimpleArt/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/SimpleArt/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/SimpleArt/subscriptions",
        "organizations_url": "https://api.github.com/users/SimpleArt/orgs",
        "repos_url": "https://api.github.com/users/SimpleArt/repos",
        "events_url": "https://api.github.com/users/SimpleArt/events{/privacy}",
        "received_events_url": "https://api.github.com/users/SimpleArt/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4030784939,
          "node_id": "LA_kwDOBN0Z8c7wQOWr",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-typing",
          "name": "topic-typing",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2023-02-03T22:37:21Z",
      "updated_at": "2024-09-27T17:38:07Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\nWhen using `help(...)`, annotations should be unstringified and displayed without `typing.ForwardRef`.\r\n\r\n# Pitch\r\n\r\nCurrent behavior displays string annotations with quotes as follows:\r\n\r\n```python\r\ndef foo(x: List[\"A\"], y: \"B\") -> None:\r\n    ...\r\n\r\nhelp(foo)\r\n\"\"\"\r\nHelp on function foo in module ...:\r\n\r\nfoo(x: List[ForwardRef('A')], y: 'B') -> None\r\n\r\n\"\"\"\r\n```\r\n\r\nIt should be fairly obvious how clunky this is to users, and that the desirable behavior should be something like:\r\n\r\n```python\r\nhelp(foo)\r\n\"\"\"\r\nHelp on function foo in module ...:\r\n\r\nfoo(x: List[A], y: B) -> None\r\n\r\n\"\"\"\r\n```\r\n\r\n#84171 is related, but whereas the suggestion there is to actually evaluate the annotations using `typing.get_type_hints` or similar, this proposal aims to only remove quotations and `typing.ForwardRef(...)` from the outputted documentation.\r\n\r\nThis means that the resulting documentation may not be 100% accurate but will not require evaluating the annotation, which can avoid issues such as annotations which cannot be evaluated for some reason.\r\n\r\nFor example:\r\n\r\n```python\r\nimport typing\r\n\r\nif typing.TYPE_CHECKING:\r\n    import numpy as np\r\n\r\ndef foo(x: \"np.ndarray\") -> None:\r\n    ...\r\n\r\nhelp(foo)\r\n\"\"\"\r\nHelp on function foo in module ...:\r\n\r\nfoo(x: np.ndarray) -> None\r\n\r\n\"\"\"\r\n```\r\n\r\nNote that the `np.ndarray` is not expanded out into its fully qualified name `numpy.ndarray`.\r\n\r\nThere are also some additional edge cases to consider, such as `\"ForwardRef('A')\"`. Ideally this should be changed to `A`, but I don't think there's much impact if it is purposefully left as that, and leaving it as-is avoids other problems e.g. `ForwardRef` is not actually `typing.ForwardRef` in that example.\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124669\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/101552/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/101552/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/101525",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/101525/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/101525/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/101525/events",
      "html_url": "https://github.com/python/cpython/issues/101525",
      "id": 1568949227,
      "node_id": "I_kwDOBN0Z8c5dhEPr",
      "number": 101525,
      "title": "Make BOLT as stable feature",
      "user": {
        "login": "corona10",
        "id": 5110323,
        "node_id": "MDQ6VXNlcjUxMTAzMjM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5110323?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/corona10",
        "html_url": "https://github.com/corona10",
        "followers_url": "https://api.github.com/users/corona10/followers",
        "following_url": "https://api.github.com/users/corona10/following{/other_user}",
        "gists_url": "https://api.github.com/users/corona10/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/corona10/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/corona10/subscriptions",
        "organizations_url": "https://api.github.com/users/corona10/orgs",
        "repos_url": "https://api.github.com/users/corona10/repos",
        "events_url": "https://api.github.com/users/corona10/events{/privacy}",
        "received_events_url": "https://api.github.com/users/corona10/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "corona10",
        "id": 5110323,
        "node_id": "MDQ6VXNlcjUxMTAzMjM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5110323?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/corona10",
        "html_url": "https://github.com/corona10",
        "followers_url": "https://api.github.com/users/corona10/followers",
        "following_url": "https://api.github.com/users/corona10/following{/other_user}",
        "gists_url": "https://api.github.com/users/corona10/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/corona10/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/corona10/subscriptions",
        "organizations_url": "https://api.github.com/users/corona10/orgs",
        "repos_url": "https://api.github.com/users/corona10/repos",
        "events_url": "https://api.github.com/users/corona10/events{/privacy}",
        "received_events_url": "https://api.github.com/users/corona10/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "corona10",
          "id": 5110323,
          "node_id": "MDQ6VXNlcjUxMTAzMjM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/5110323?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/corona10",
          "html_url": "https://github.com/corona10",
          "followers_url": "https://api.github.com/users/corona10/followers",
          "following_url": "https://api.github.com/users/corona10/following{/other_user}",
          "gists_url": "https://api.github.com/users/corona10/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/corona10/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/corona10/subscriptions",
          "organizations_url": "https://api.github.com/users/corona10/orgs",
          "repos_url": "https://api.github.com/users/corona10/repos",
          "events_url": "https://api.github.com/users/corona10/events{/privacy}",
          "received_events_url": "https://api.github.com/users/corona10/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2023-02-02T23:52:45Z",
      "updated_at": "2024-09-02T14:19:21Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Using a BOLT still not guarantee the unexpected behavior changes.\r\nFor example, I observed that https://github.com/python/cpython/issues/53093 is raised if the binary is optimized by BOLT.\r\nWe can reduce several too aggressive optimization.\r\n\r\n- [ ] Tune the optimization flags\r\n- [x] Choose the APIs that should not be optimized BOLT (e.g -skip-funcs)\r\n- [ ] Update libregrtest.utils.get_build_info()\r\n- [x] Update `make test` to work correctly (Should skip the BOLT phase if the binary is already BOLTed)\r\n- [ ] Define minimum LLVM version\r\n- [x] https://github.com/python/cpython/issues/101282\r\n\r\ncc @aaupov\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-103187\n* gh-103574\n* gh-118572\n* gh-123601\n* gh-123603\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/101525/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/101525/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/101486",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/101486/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/101486/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/101486/events",
      "html_url": "https://github.com/python/cpython/issues/101486",
      "id": 1565396290,
      "node_id": "I_kwDOBN0Z8c5dTg1C",
      "number": 101486,
      "title": "Regression: `unittest.IsolatedAsyncioTestCase` in 3.11 is too picky about what it will run with the event loop",
      "user": {
        "login": "zware",
        "id": 6275069,
        "node_id": "MDQ6VXNlcjYyNzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6275069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zware",
        "html_url": "https://github.com/zware",
        "followers_url": "https://api.github.com/users/zware/followers",
        "following_url": "https://api.github.com/users/zware/following{/other_user}",
        "gists_url": "https://api.github.com/users/zware/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zware/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zware/subscriptions",
        "organizations_url": "https://api.github.com/users/zware/orgs",
        "repos_url": "https://api.github.com/users/zware/repos",
        "events_url": "https://api.github.com/users/zware/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zware/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 557226369,
          "node_id": "MDU6TGFiZWw1NTcyMjYzNjk=",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-asyncio",
          "name": "topic-asyncio",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2023-02-01T04:07:50Z",
      "updated_at": "2023-02-03T18:14:41Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "In previous versions, `_callMaybeAsync(self, func, /, *args, **kwargs)` would run `result = func(*args, **kwargs)` and then run the result with the event loop if `inspect.isawaitable(result)` returned True.  In 3.11 `inspect.iscoroutinefunction(func)` is checked ahead of time instead, resulting in a warning about a coroutine not being awaited after trying to run `func(*args, **kwargs)` synchronously.  This prevents using anything other than an `async def`-defined coroutine for test methods or cleanup functions[^1], the latter of which may not be defined in local code.  This can be worked around by wrapping any known awaitable in a dummy `async def _wrapper(aw): return await aw`, but that's rather inconvenient and not a pleasant UX.\r\n\r\nI have a \"fix\" for this that I don't consider to be viable that I'll nevertheless attach as a draft PR for discussion.  It gives the behavior I would prefer to see in `unittest` and passes all existing tests, but relies on an ugly hack in `asyncio` to defeat the non-reentrancy of `contextvars.Context.run`.  Ideally, either `Context.run` would allow recursive calls (by not running the entrance and exit routines if the context is already entered?), or would expose the underlying `ctx_entered` flag to allow LBYL when calling `Context.run`.  I don't have a great understanding of `contextvars`, so I'm not sure how any of these options might break things or if there's a better option that's obvious to someone who knows what's going on here :)\r\n\r\n[^1]: which when initially added explicitly supported exotic awaitables, see https://github.com/python/cpython/blob/76efcb40930d1584e8706f015d0e5475fb16acb5/Lib/unittest/async_case.py#L53-L58\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-101487\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/101486/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/101486/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/101472",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/101472/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/101472/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/101472/events",
      "html_url": "https://github.com/python/cpython/issues/101472",
      "id": 1564784955,
      "node_id": "I_kwDOBN0Z8c5dRLk7",
      "number": 101472,
      "title": "Add nargs='...'  to the reference of add_argument in argparse",
      "user": {
        "login": "ppaez",
        "id": 692448,
        "node_id": "MDQ6VXNlcjY5MjQ0OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/692448?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ppaez",
        "html_url": "https://github.com/ppaez",
        "followers_url": "https://api.github.com/users/ppaez/followers",
        "following_url": "https://api.github.com/users/ppaez/following{/other_user}",
        "gists_url": "https://api.github.com/users/ppaez/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ppaez/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ppaez/subscriptions",
        "organizations_url": "https://api.github.com/users/ppaez/orgs",
        "repos_url": "https://api.github.com/users/ppaez/repos",
        "events_url": "https://api.github.com/users/ppaez/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ppaez/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2023-01-31T18:08:08Z",
      "updated_at": "2023-04-19T05:32:46Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Documentation\r\n\r\nThe [reference](https://docs.python.org/3/library/argparse.html#nargs) for the `nargs` parameter of `add_argument`  does not include the case when `nargs` is `'...'`. A pull request is provided that adds this case to the documentation, including an example of the use.\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-101473\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/101472/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/101472/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/101372",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/101372/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/101372/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/101372/events",
      "html_url": "https://github.com/python/cpython/issues/101372",
      "id": 1559788658,
      "node_id": "I_kwDOBN0Z8c5c-Hxy",
      "number": 101372,
      "title": "unicodedata: is_normalized claims nothing is normalized in any form when using the 3.2.0 database",
      "user": {
        "login": "zahlman",
        "id": 1224170,
        "node_id": "MDQ6VXNlcjEyMjQxNzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1224170?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zahlman",
        "html_url": "https://github.com/zahlman",
        "followers_url": "https://api.github.com/users/zahlman/followers",
        "following_url": "https://api.github.com/users/zahlman/following{/other_user}",
        "gists_url": "https://api.github.com/users/zahlman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zahlman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zahlman/subscriptions",
        "organizations_url": "https://api.github.com/users/zahlman/orgs",
        "repos_url": "https://api.github.com/users/zahlman/repos",
        "events_url": "https://api.github.com/users/zahlman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zahlman/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018694952,
          "node_id": "LA_kwDOBN0Z8c7viGso",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-unicode",
          "name": "topic-unicode",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2023-01-27T13:39:55Z",
      "updated_at": "2023-11-10T21:44:58Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\n3.8 adds the `.is_normalized` function to the `unicodedata` module, which also is available as a method on the legacy `unicodedata.ucd_3_2_0` database. It is supposed to check whether a string is equal to its normalization in a given form, but without having to normalize and compare.\r\n\r\nHowever, the legacy version does not maintain the expected invariant. In fact, it reports that *every* single-character string is *not* normalized, *regardless of* the normalization form chosen. Presumably, the result is the same for every non-empty string. (It appears that the empty string works because it is special-cased at line 871-874.)\r\n\r\nExample:\r\n```\r\n>>> import unicodedata\r\n>>> unicodedata.ucd_3_2_0.normalize('NFC', '!') == '!'\r\nTrue\r\n>>> unicodedata.ucd_3_2_0.is_normalized('NFC', '!')\r\nFalse\r\n>>> any(unicodedata.ucd_3_2_0.is_normalized(form, chr(x)) for form in ('NFC', 'NFD', 'NFKC', 'NFKD') for x in range(0x110000))\r\nFalse\r\n```\r\n\r\nThe bug appears to be [at line 801-804 of unicodedata.c](https://github.com/python/cpython/blob/65dd745f1a343dd80f5e612736f36200631f2840/Modules/unicodedata.c#L801):\r\n```\r\n    /* UCD 3.2.0 is requested, quickchecks must be disabled. */\r\n    if (UCD_Check(self)) {\r\n        return NO;\r\n    }\r\n```\r\nI believe the `NO` should say `MAYBE` instead. The `NO` value appears to indicate that the quickcheck has determined that the string is not normalized - contrary to both the comment and expected behaviour.\r\n\r\n# Your environment\r\n```\r\n$ python\r\nPython 3.8.10 (default, Nov 14 2022, 12:59:47) \r\n[GCC 9.4.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n```\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-101388\n* gh-101597\n* gh-101598\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/101372/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/101372/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/101346",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/101346/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/101346/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/101346/events",
      "html_url": "https://github.com/python/cpython/issues/101346",
      "id": 1558338130,
      "node_id": "I_kwDOBN0Z8c5c4lpS",
      "number": 101346,
      "title": "The hash and equals methods of code objects are large, complex and unnecessary.",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 9,
      "created_at": "2023-01-26T15:35:17Z",
      "updated_at": "2023-11-27T20:09:36Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "We should just compare code objects by identity.\r\n\r\nTechnically, they are immutable values but realistically, there is only on code object per source unit. \r\nAttempting to maintain value semantics when the underlying code object is internally mutable (due to specialization and instrumentation) is cumbersome and probably buggy, and will only get worse with more optimizations.\r\n\r\nWe should just delete the hash and comparison methods and have identity comparison. It will be faster too.\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-103297\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/101346/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/101346/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/101291",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/101291/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/101291/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/101291/events",
      "html_url": "https://github.com/python/cpython/issues/101291",
      "id": 1555356928,
      "node_id": "I_kwDOBN0Z8c5ctN0A",
      "number": 101291,
      "title": "Restore (or beat) Python 2 performance for arithmetic operations on ints that fit into a single word",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 7,
      "created_at": "2023-01-24T17:12:18Z",
      "updated_at": "2024-10-13T17:39:07Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "\r\nIn Python 2 `int`s and `long`s were different objects, and the design of each was tailored to the different size and use cases.\r\nIn Python3 we dropped the distinction, but we also dropped the design for `int`s that fit into a single word.\r\nWe have added various fast paths for \"medium\" integers (e.g. https://github.com/python/cpython/issues/89109) but the underlying data structure gets in the way.\r\n\r\nWe should layout the int/long object so that it supports fast operations for most integers.\r\n\r\nSee https://github.com/faster-cpython/ideas/issues/548 for a fuller discussion\r\n\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-101292\n* gh-101685\n* gh-102464\n* gh-104742\n* gh-104759\n* gh-107388\n* gh-107392\n* gh-125384\n* gh-125407\n* gh-125408\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/101291/reactions",
        "total_count": 3,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 1,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/101291/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/101260",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/101260/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/101260/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/101260/events",
      "html_url": "https://github.com/python/cpython/issues/101260",
      "id": 1553207186,
      "node_id": "I_kwDOBN0Z8c5clA-S",
      "number": 101260,
      "title": "BlocksOutputBuffer causes a performance regression in bz2, lzma and zlib modules",
      "user": {
        "login": "rhpvorderman",
        "id": 26142226,
        "node_id": "MDQ6VXNlcjI2MTQyMjI2",
        "avatar_url": "https://avatars.githubusercontent.com/u/26142226?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rhpvorderman",
        "html_url": "https://github.com/rhpvorderman",
        "followers_url": "https://api.github.com/users/rhpvorderman/followers",
        "following_url": "https://api.github.com/users/rhpvorderman/following{/other_user}",
        "gists_url": "https://api.github.com/users/rhpvorderman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rhpvorderman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rhpvorderman/subscriptions",
        "organizations_url": "https://api.github.com/users/rhpvorderman/orgs",
        "repos_url": "https://api.github.com/users/rhpvorderman/repos",
        "events_url": "https://api.github.com/users/rhpvorderman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rhpvorderman/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2023-01-23T14:33:56Z",
      "updated_at": "2023-11-26T22:08:17Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "<!--\r\n  If you're new to Python and you're not sure whether what you're experiencing is a bug, the CPython issue tracker is not\r\n  the right place to seek help. Consider the following options instead:\r\n\r\n  - reading the Python tutorial: https://docs.python.org/3/tutorial/\r\n  - posting in the \"Users\" category on discuss.python.org: https://discuss.python.org/c/users/7\r\n  - emailing the Python-list mailing list: https://mail.python.org/mailman/listinfo/python-list\r\n  - searching our issue tracker (https://github.com/python/cpython/issues) to see if\r\n    your problem has already been reported\r\n-->\r\n\r\n# Bug report\r\n\r\nThe _BlocksOutputBuffer was introduced for all compression modules (bz2, lzma and zlib)  in python 3.10 https://github.com/python/cpython/pull/21740 . \r\n\r\nIt performs well on its advertised quality: speedy and memory efficient creation of very large in-memory blocks.\r\n\r\nHowever it came at the cost of: \r\n- Lots of extra code\r\n- A performance regression in the common use case\r\n\r\nThe common use case is small things in memory. Having large in-memory buffers (multiple gigabytes) is an anti-pattern and streaming interfaces should be used instead. Which in turn utilize small buffers.\r\n\r\nFor a small buffer the BlocksOutputBuffer needs to create a list and a bytes object, while the 3.9 method only creates the bytes object. When the initial bytes object is too small, the blocksoutputbuffer creates another bytes object and resizes the list. The 3.9 method simply resizes the bytes object.\r\nThe 3.9 method does not scale well beyond a large number of resizings while the BlocksOutputBuffer does (due to cost amortization in the list resize and the fact that it doesn't resize bytes objects, saving on memcpy) but this only applies to very large buffers, and these should be rare.\r\n\r\nThis can be shown by removing the blocksoutputbuffer and reverting to the 3.9 method of arranging the output buffer. I have made a branch here https://github.com/rhpvorderman/cpython/tree/noblocks .\r\n\r\nMicrobenchmarks. Taking current README.rst (10044 bytes) and compressing with compression level 1.\r\nBlocksoutputBuffer\r\n```\r\n$ ./python -m pyperf timeit -s 'data=open(\"README.rst\", \"rb\").read(); from zlib import compress' 'compress(data, level=1)'\r\n.....................\r\nMean +- std dev: 180 us +- 1 us\r\n```\r\narrange_output_buffer:\r\n```\r\n$ ./python -m pyperf timeit -s 'data=open(\"README.rst\", \"rb\").read(); from zlib import compress' 'compress(data, level=1)'\r\n.....................\r\nMean +- std dev: 174 us +- 1 us\r\n```\r\nAlso when taking a larger file Lib/_pydecimal.py (229220 uncompressed, 60974 bytes compressed) which certainly requires resizing the initial 16K buffer.\r\nBlocksOutputBuffer:\r\n```\r\n$ ./python -m pyperf timeit -s 'data=open(\"Lib/_pydecimal.py\", \"rb\").read(); from zlib import compress' 'compress(data, level=1)'\r\n.....................\r\nMean +- std dev: 2.37 ms +- 0.01 ms\r\n```\r\narrange_output_buffer\r\n```\r\n./python -m pyperf timeit -s 'data=open(\"Lib/_pydecimal.py\", \"rb\").read(); from zlib import compress' 'compress(data, level=1)'\r\n.....................\r\nMean +- std dev: 2.28 ms +- 0.01 ms\r\n```\r\nQ.E.D. BlocksOutputBuffer always loses against simple byte resizing for smaller buffers. _pydecimal.py is more than 200K so that is already quite a big input.\r\n\r\nAdditionally: \r\n```\r\n Modules/zlibmodule.c | 417 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++--------------------------------------------------------------------------------------------------------------------------------------------------\r\n 1 file changed, 117 insertions(+), 300 deletions(-)\r\n```\r\nAnd this is not counting the removal of the extra header file that provides the BlocksOutputBuffer.\r\n\r\nThe BlocksOutputBuffer is a nice piece of work when taken in isolation, but it optimizes for the pathological case rather than the common case. It is detrimental to the common case and it requires a lot of extra code that needs to be maintained.\r\n\r\nIf there are some issues with slow performance on larger buffers with arrange_output_buffer, I think several optimizations can still be done which are not as invasive as the _BlocksOutputBufer. For instance when zlib.decompress is called on a 100MB object, it makes sense to start the output buffer at 100MB rather than at 16K (default in 3.9). This severely limits the amount of resizes required. The same goes for zlib.compress. If the input is 100MB the maximum output is going to be maximally 100MB+header and trailer size. Reserving 100MB first and then downscaling to the compressed size (say 20MB) is much quicker than resizing a 16K buffer to 20MB using doublings only. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-101279\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/101260/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/101260/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/101140",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/101140/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/101140/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/101140/events",
      "html_url": "https://github.com/python/cpython/issues/101140",
      "id": 1538588443,
      "node_id": "I_kwDOBN0Z8c5btP8b",
      "number": 101140,
      "title": "Add free list optimization for generators/co-routines",
      "user": {
        "login": "DinoV",
        "id": 320265,
        "node_id": "MDQ6VXNlcjMyMDI2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/320265?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DinoV",
        "html_url": "https://github.com/DinoV",
        "followers_url": "https://api.github.com/users/DinoV/followers",
        "following_url": "https://api.github.com/users/DinoV/following{/other_user}",
        "gists_url": "https://api.github.com/users/DinoV/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DinoV/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DinoV/subscriptions",
        "organizations_url": "https://api.github.com/users/DinoV/orgs",
        "repos_url": "https://api.github.com/users/DinoV/repos",
        "events_url": "https://api.github.com/users/DinoV/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DinoV/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "DinoV",
        "id": 320265,
        "node_id": "MDQ6VXNlcjMyMDI2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/320265?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DinoV",
        "html_url": "https://github.com/DinoV",
        "followers_url": "https://api.github.com/users/DinoV/followers",
        "following_url": "https://api.github.com/users/DinoV/following{/other_user}",
        "gists_url": "https://api.github.com/users/DinoV/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DinoV/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DinoV/subscriptions",
        "organizations_url": "https://api.github.com/users/DinoV/orgs",
        "repos_url": "https://api.github.com/users/DinoV/repos",
        "events_url": "https://api.github.com/users/DinoV/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DinoV/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "DinoV",
          "id": 320265,
          "node_id": "MDQ6VXNlcjMyMDI2NQ==",
          "avatar_url": "https://avatars.githubusercontent.com/u/320265?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/DinoV",
          "html_url": "https://github.com/DinoV",
          "followers_url": "https://api.github.com/users/DinoV/followers",
          "following_url": "https://api.github.com/users/DinoV/following{/other_user}",
          "gists_url": "https://api.github.com/users/DinoV/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/DinoV/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/DinoV/subscriptions",
          "organizations_url": "https://api.github.com/users/DinoV/orgs",
          "repos_url": "https://api.github.com/users/DinoV/repos",
          "events_url": "https://api.github.com/users/DinoV/events{/privacy}",
          "received_events_url": "https://api.github.com/users/DinoV/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2023-01-18T19:37:51Z",
      "updated_at": "2023-11-27T17:30:49Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\nCurrently generators and co-routines are allocated using the typical allocation strategy and don't include a free list like some other commonly used data structures.  In async programs co-routines are heavily allocated and adding a free list can greatly speed things up.\r\n\r\n# Pitch\r\n\r\nAt Instagram we see a .25% - .46% perf improvement by having a free list across our entire web server workload.\r\n\r\n\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-101142\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/101140/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/101140/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/101101",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/101101/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/101101/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/101101/events",
      "html_url": "https://github.com/python/cpython/issues/101101",
      "id": 1536645235,
      "node_id": "I_kwDOBN0Z8c5bl1hz",
      "number": 101101,
      "title": "Unstable C API tier (PEP 689)",
      "user": {
        "login": "encukou",
        "id": 302922,
        "node_id": "MDQ6VXNlcjMwMjkyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/encukou",
        "html_url": "https://github.com/encukou",
        "followers_url": "https://api.github.com/users/encukou/followers",
        "following_url": "https://api.github.com/users/encukou/following{/other_user}",
        "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
        "organizations_url": "https://api.github.com/users/encukou/orgs",
        "repos_url": "https://api.github.com/users/encukou/repos",
        "events_url": "https://api.github.com/users/encukou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/encukou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4019060898,
          "node_id": "LA_kwDOBN0Z8c7vjgCi",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-C-API",
          "name": "topic-C-API",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2023-01-17T16:06:54Z",
      "updated_at": "2023-05-02T08:13:04Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Add an Unstable C API tier as per [PEP 689](https://peps.python.org/pep-0689/).\r\n\r\n* [x] Update CPython docs\r\n* [x] Update the Devguide (https://github.com/python/devguide/pull/1060)\r\n* [x] Add [initial unstable API](https://peps.python.org/pep-0689/#initial-unstable-api) from the PEP\r\n\r\nOther candidates for inclusion are below.\r\nThese usually need discussion first. This is a checklist for *having the discussion*.\r\nPlease try to *not* hold the individual discussions in this issue.\r\n\r\n* [ ] Dict watching API\r\n* [ ] Functions from PEP-523 not specified in PEP-689 (`_PyEval_EvalFrameDefault` & co.) -- this is a can of worms tho\r\n* [ ] FrameStack API (#91371)\r\n* [ ] `_Py_HashDouble`, see https://github.com/python/cpython/issues/91744#issuecomment-1111105784\r\n* [ ] PyBytesObject.ob_shash sounds like a good candidate: see https://discuss.python.org/t/15108 (guess fields need a slightly different naming convention though. Sigh. That should have been in the PEP.)\r\n* [ ] non-opaque access to frame structs and any other key APIs needed to implement alternate eval loops with comparable performance to the default eval loop (unless & until we can figure out stable public APIs that can deliver equivalent performance) - see [Nick's reply](https://mail.python.org/archives/list/python-dev@python.org/message/CW543RWJU6EWAPTWCDDHEUS37UHSAU5I/)\r\n* [ ] C APIs that provide access to compiled code whether in AST or opcode form (the API itself may be stable, but the compiled code isn't) - see [Nick's reply](https://mail.python.org/archives/list/python-dev@python.org/message/CW543RWJU6EWAPTWCDDHEUS37UHSAU5I/)\r\n* [ ] `PyLong_FromByteArray`/`PyUnstable_LongToBase30Digits`: https://discuss.python.org/t/20045\r\n* [ ] Anything that starts with an underscore and is documented\r\n* [ ] Fast access to PyLong contents\r\n\r\nGot any more?\r\nI offer to move other API to the unstable tier myself, *if there's a good usage example* to base docs & regression tests on.\r\n\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-101102\r\n* gh-102350\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/101101/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/101101/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/101027",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/101027/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/101027/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/101027/events",
      "html_url": "https://github.com/python/cpython/issues/101027",
      "id": 1533056365,
      "node_id": "I_kwDOBN0Z8c5bYJVt",
      "number": 101027,
      "title": "`enumerate` and `filter` documentation should explicitly mention that they accept any iterable",
      "user": {
        "login": "JustAnotherArchivist",
        "id": 29556373,
        "node_id": "MDQ6VXNlcjI5NTU2Mzcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29556373?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JustAnotherArchivist",
        "html_url": "https://github.com/JustAnotherArchivist",
        "followers_url": "https://api.github.com/users/JustAnotherArchivist/followers",
        "following_url": "https://api.github.com/users/JustAnotherArchivist/following{/other_user}",
        "gists_url": "https://api.github.com/users/JustAnotherArchivist/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JustAnotherArchivist/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JustAnotherArchivist/subscriptions",
        "organizations_url": "https://api.github.com/users/JustAnotherArchivist/orgs",
        "repos_url": "https://api.github.com/users/JustAnotherArchivist/repos",
        "events_url": "https://api.github.com/users/JustAnotherArchivist/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JustAnotherArchivist/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2023-01-14T00:21:20Z",
      "updated_at": "2023-02-10T02:18:46Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "The documentation of `enumerate(iterable, start=0)` currently reads:\r\n\r\n> Return an enumerate object. *iterable* must be a sequence, an [iterator](https://docs.python.org/3.11/glossary.html#term-iterator), or some other object which supports iteration. The `__next__()` method of the iterator returned by `enumerate()` returns a tuple containing a count (from *start* which defaults to 0) and the values obtained from iterating over *iterable*.\r\n\r\nThis wording dates back to 2002 (commit 38f71973) with minimal changes ('the values obtained' was originally 'the corresponding value obtained', which was slightly more accurate in my opinion). An earlier issue about this paragraph can be found at #66914, though the specific issue at hand, the description of *iterable*'s type, was not really discussed there.\r\n\r\nWhile the parameter name indicates that `enumerate` accepts any iterable as the first argument, I find it strange that the description explicitly lists\r\n\r\n> a sequence, an iterator, or some other object which supports iteration\r\n\r\ninstead of/without actually mentioning 'iterable' and referencing the term's [definition](https://docs.python.org/3.11/glossary.html#term-iterable) in the glossary.\r\n\r\nMy primary suggestion is to replace (the slightly vague, as it could mean iterable or iterator) 'object which supports iteration' with 'iterable' and a link to the glossary. Additionally, since all iterators are iterables, their mention could also be removed.\r\n\r\nSuggestion 1 (with or without a link for 'iterator'):\r\n\r\n> *iterable* must be a sequence, an iterator, or some other [iterable](https://docs.python.org/3.11/glossary.html#term-iterable).\r\n\r\nSuggestion 2:\r\n\r\n> *iterable* must be a sequence or some other [iterable](https://docs.python.org/3.11/glossary.html#term-iterable).\r\n\r\n---\r\n\r\n`filter` has a similar situation:\r\n\r\n> *iterable* may be either a sequence, a container which supports iteration, or an iterator.\r\n\r\n'A container which supports iteration' is quite vague and mildly misleading since other parts of the documentation use the term 'container' for lists and similar types. It also uses 'may' instead of 'must'. I would suggest to use the same wording there as for `enumerate`.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-101771\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/101027/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/101027/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/100987",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/100987/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/100987/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/100987/events",
      "html_url": "https://github.com/python/cpython/issues/100987",
      "id": 1530810159,
      "node_id": "I_kwDOBN0Z8c5bPk8v",
      "number": 100987,
      "title": "Make it easier to traverse the frame stack for third party tools.",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "pablogsal",
        "id": 11718525,
        "node_id": "MDQ6VXNlcjExNzE4NTI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablogsal",
        "html_url": "https://github.com/pablogsal",
        "followers_url": "https://api.github.com/users/pablogsal/followers",
        "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
        "organizations_url": "https://api.github.com/users/pablogsal/orgs",
        "repos_url": "https://api.github.com/users/pablogsal/repos",
        "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pablogsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "pablogsal",
          "id": 11718525,
          "node_id": "MDQ6VXNlcjExNzE4NTI1",
          "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pablogsal",
          "html_url": "https://github.com/pablogsal",
          "followers_url": "https://api.github.com/users/pablogsal/followers",
          "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
          "organizations_url": "https://api.github.com/users/pablogsal/orgs",
          "repos_url": "https://api.github.com/users/pablogsal/repos",
          "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pablogsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 49,
      "created_at": "2023-01-12T14:27:36Z",
      "updated_at": "2023-11-27T18:45:15Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Profilers and debuggers need to traverse the frame stack, but the layout of the stack is an internal implementation detail.\r\nHowever can make some limited promises to make porting tools between Python versions a bit easier.\r\n\r\nIn order to traverse the stack, the offset of the `previous` pointer needs to be known. To understand the frame, more information is needed.\r\n\r\n@pablogsal \r\n@Yhg1s \r\nexpressed interest in this.\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-100988\n* gh-102640\n* gh-103010\n* gh-105727\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/100987/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/100987/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/100964",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/100964/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/100964/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/100964/events",
      "html_url": "https://github.com/python/cpython/issues/100964",
      "id": 1530002782,
      "node_id": "I_kwDOBN0Z8c5bMf1e",
      "number": 100964,
      "title": "Strange reference cycle (?) introduced with shim frames",
      "user": {
        "login": "A5rocks",
        "id": 40616000,
        "node_id": "MDQ6VXNlcjQwNjE2MDAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/40616000?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/A5rocks",
        "html_url": "https://github.com/A5rocks",
        "followers_url": "https://api.github.com/users/A5rocks/followers",
        "following_url": "https://api.github.com/users/A5rocks/following{/other_user}",
        "gists_url": "https://api.github.com/users/A5rocks/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/A5rocks/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/A5rocks/subscriptions",
        "organizations_url": "https://api.github.com/users/A5rocks/orgs",
        "repos_url": "https://api.github.com/users/A5rocks/repos",
        "events_url": "https://api.github.com/users/A5rocks/events{/privacy}",
        "received_events_url": "https://api.github.com/users/A5rocks/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "markshannon",
          "id": 9448417,
          "node_id": "MDQ6VXNlcjk0NDg0MTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/markshannon",
          "html_url": "https://github.com/markshannon",
          "followers_url": "https://api.github.com/users/markshannon/followers",
          "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
          "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
          "organizations_url": "https://api.github.com/users/markshannon/orgs",
          "repos_url": "https://api.github.com/users/markshannon/repos",
          "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/markshannon/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 16,
      "created_at": "2023-01-12T02:35:39Z",
      "updated_at": "2023-12-07T19:06:20Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\nhttps://github.com/python-trio/trio/pull/2514#issuecomment-1378120405\r\n\r\n```py\r\nimport weakref\r\nimport trio\r\nimport gc\r\n\r\nasync def f():\r\n    async with trio.open_nursery() as nursery:\r\n        nursery.cancel_scope.cancel()\r\n\r\n    h = weakref.ref(nursery)\r\n    del nursery\r\n    await trio.lowlevel.checkpoint()\r\n    print(h(), gc.get_referrers(h()) if h() is not None else [])\r\n\r\ntrio.run(f)\r\n```\r\n\r\n(I haven't figured out how to reproduce without the `import trio`)\r\n\r\nI bisected this to https://github.com/python/cpython/commit/1e197e63e21f77b102ff2601a549dda4b6439455\r\n\r\nPreviously:\r\n```\r\nNone []\r\n```\r\n\r\nNow:\r\n```\r\n<trio.Nursery object at 0x7f3f5585d4f0> [NurseryManager(strict_exception_groups=False), <cell at 0x7f3f5585d540: Nursery object at 0x7f3f5585d4f0>, <frame at 0x7f3f55e220c0, file '/workspaces/trio/trio/_core/_run.py', line 1005, code _nested_child_finished>]\r\n```\r\n\r\nI'm not certain this should be a bug, but raising because I'm confused as to the cause.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-107563\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/100964/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/100964/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/100870",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/100870/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/100870/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/100870/events",
      "html_url": "https://github.com/python/cpython/issues/100870",
      "id": 1524924790,
      "node_id": "I_kwDOBN0Z8c5a5IF2",
      "number": 100870,
      "title": "Per-class type cache",
      "user": {
        "login": "Fidget-Spinner",
        "id": 28750310,
        "node_id": "MDQ6VXNlcjI4NzUwMzEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fidget-Spinner",
        "html_url": "https://github.com/Fidget-Spinner",
        "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
        "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
        "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
        "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
        "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2023-01-09T04:43:06Z",
      "updated_at": "2023-11-27T16:00:57Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "See https://github.com/faster-cpython/ideas/issues/532.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-100869\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/100870/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/100870/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/100762",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/100762/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/100762/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/100762/events",
      "html_url": "https://github.com/python/cpython/issues/100762",
      "id": 1519758243,
      "node_id": "I_kwDOBN0Z8c5alauj",
      "number": 100762,
      "title": "Generator finalization is slower in 3.11 vs 3.10",
      "user": {
        "login": "Onlooker2186",
        "id": 121907453,
        "node_id": "U_kgDOB0Qo_Q",
        "avatar_url": "https://avatars.githubusercontent.com/u/121907453?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Onlooker2186",
        "html_url": "https://github.com/Onlooker2186",
        "followers_url": "https://api.github.com/users/Onlooker2186/followers",
        "following_url": "https://api.github.com/users/Onlooker2186/following{/other_user}",
        "gists_url": "https://api.github.com/users/Onlooker2186/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Onlooker2186/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Onlooker2186/subscriptions",
        "organizations_url": "https://api.github.com/users/Onlooker2186/orgs",
        "repos_url": "https://api.github.com/users/Onlooker2186/repos",
        "events_url": "https://api.github.com/users/Onlooker2186/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Onlooker2186/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "markshannon",
          "id": 9448417,
          "node_id": "MDQ6VXNlcjk0NDg0MTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/markshannon",
          "html_url": "https://github.com/markshannon",
          "followers_url": "https://api.github.com/users/markshannon/followers",
          "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
          "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
          "organizations_url": "https://api.github.com/users/markshannon/orgs",
          "repos_url": "https://api.github.com/users/markshannon/repos",
          "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/markshannon/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 30,
      "created_at": "2023-01-05T00:02:06Z",
      "updated_at": "2024-02-22T13:33:10Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "I found that the Python 3.11.1 implementation of all() is 30% slower compared to Python 3.10.9.\r\n\r\nany() also seems to be around 4% slower on my device\r\n\r\n# Environment\r\n- CPython versions tested on: Python 3.10.9 and Python 3.11.1\r\n- Operating system and architecture: Windows 10 22H2 (Build 19045) 64 bit\r\n\r\n# Code to test all():\r\n```python \r\nimport timeit\r\nfrom functools import partial\r\nimport platform\r\n\r\n\r\ndef find_by_keys(\r\n    keys: list[str],\r\n    table: list[dict[str, str | int]],\r\n    match_data: dict[str, str | int],\r\n) -> dict[str, str | int] | None:\r\n    for item in table:\r\n        if all(item[k] == match_data[k] for k in keys):\r\n            return item\r\n    return None\r\n\r\n\r\ndef main():\r\n    keys: list[str] = [\"id\", \"key_1\", \"key_2\"]\r\n    table: list[dict[str, str | int]] = [\r\n        {\r\n            \"id\": i,\r\n            \"key_1\": \"val_1\",\r\n            \"key_2\": \"val_2\",\r\n        }\r\n        for i in range(1, 5001)\r\n    ]\r\n    match_data: dict[str, str | int] = {\r\n        \"id\": 3000,\r\n        \"key_1\": \"val_1\",\r\n        \"key_2\": \"val_2\",\r\n    }\r\n\r\n    timeit_output = timeit.repeat(\r\n        partial(find_by_keys, keys, table, match_data), repeat=10000, number=1\r\n    )\r\n\r\n    average_time = sum(timeit_output) / len(timeit_output)\r\n    best_time = min(timeit_output)\r\n    tps_output = 1 / average_time\r\n\r\n    print(f\"Python version = {platform.python_version()}\")\r\n    print(f\"Average time = {average_time}\")\r\n    print(f\"Best time = {best_time}\")\r\n    print(f\"Average transactions per second = {tps_output}\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n```\r\n \r\n# Results for all()\r\n\r\nConsole output using Python 3.10.9:\r\n```\r\nPython version = 3.10.9\r\nAverage time = 0.0008256170657486655\r\nBest time = 0.0007106999401003122\r\nAverage transactions per second = 1211.2152733824669\r\n```\r\n\r\nConsole output using Python 3.11.1:\r\n```\r\nPython version = 3.11.1\r\nAverage time = 0.0011819988898839802\r\nBest time = 0.001033599954098463\r\nAverage transactions per second = 846.0244832363215\r\n```\r\n\r\n\r\n# Code to test any():\r\n```python \r\nimport timeit\r\nfrom functools import partial\r\nimport platform\r\n\r\n\r\ndef find_by_keys(\r\n    keys: list[str],\r\n    table: list[dict[str, str | int]],\r\n    match_data: dict[str, str | int],\r\n) -> dict[str, str | int] | None:\r\n    for item in table:\r\n        if any(item[k] == match_data[k] for k in keys):\r\n            return item\r\n    return None\r\n\r\n\r\ndef main():\r\n    keys: list[str] = [\"id\", \"key_1\", \"key_2\"]\r\n    table: list[dict[str, str | int]] = [\r\n        {\r\n            \"id\": i,\r\n            \"key_1\": \"foo_1\",\r\n            \"key_2\": \"foo_2\",\r\n        }\r\n        for i in range(1, 5001)\r\n    ]\r\n    match_data: dict[str, str | int] = {\r\n        \"id\": 3000,\r\n        \"key_1\": \"val_1\",\r\n        \"key_2\": \"val_2\",\r\n    }\r\n\r\n    timeit_output = timeit.repeat(\r\n        partial(find_by_keys, keys, table, match_data), repeat=10000, number=1\r\n    )\r\n\r\n    average_time = sum(timeit_output) / len(timeit_output)\r\n    best_time = min(timeit_output)\r\n    tps_output = 1 / average_time\r\n\r\n    print(f\"Python version = {platform.python_version()}\")\r\n    print(f\"Average time = {average_time}\")\r\n    print(f\"Best time = {best_time}\")\r\n    print(f\"Average transactions per second = {tps_output}\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n```\r\n \r\n# Results for any()\r\n\r\nConsole output using Python 3.10.9:\r\n```\r\nPython version = 3.10.9\r\nAverage time = 0.0009300541202770546\r\nBest time = 0.00090230000205338\r\nAverage transactions per second = 1075.206246817238\r\n```\r\n\r\nConsole output using Python 3.11.1:\r\n```\r\nPython version = 3.11.1\r\nAverage time = 0.0009645268900785595\r\nBest time = 0.000930099980905652\r\nAverage transactions per second = 1036.7777303943815\r\n```\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-101011\n* gh-101013\n* gh-101316\n* gh-111069\n* gh-115818\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/100762/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/100762/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/100290",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/100290/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/100290/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/100290/events",
      "html_url": "https://github.com/python/cpython/issues/100290",
      "id": 1500034475,
      "node_id": "I_kwDOBN0Z8c5ZaLWr",
      "number": 100290,
      "title": "unittest: TestLoader.discover() returns tests in package/__init__.py",
      "user": {
        "login": "mherrmann",
        "id": 1076393,
        "node_id": "MDQ6VXNlcjEwNzYzOTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1076393?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mherrmann",
        "html_url": "https://github.com/mherrmann",
        "followers_url": "https://api.github.com/users/mherrmann/followers",
        "following_url": "https://api.github.com/users/mherrmann/following{/other_user}",
        "gists_url": "https://api.github.com/users/mherrmann/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mherrmann/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mherrmann/subscriptions",
        "organizations_url": "https://api.github.com/users/mherrmann/orgs",
        "repos_url": "https://api.github.com/users/mherrmann/repos",
        "events_url": "https://api.github.com/users/mherrmann/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mherrmann/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2022-12-16T11:17:36Z",
      "updated_at": "2022-12-24T02:27:15Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "According to the [docs](https://docs.python.org/3/library/unittest.html#unittest.TestLoader.discover):\r\n\r\n> **TestLoader.discover(start_dir, pattern='test\\*.py', top_level_dir=None)**\r\n> Find all the test modules by recursing into subdirectories from the specified start directory, and return a TestSuite object containing them. **Only test files that match pattern will be loaded.**\r\n\r\nHowever, tests are also loaded from `__init__.py`. This does not match the pattern `test*.py`.\r\n\r\nTo reproduce, create `package/__init__.py` with the following contents:\r\n\r\n```python\r\nimport unittest\r\n\r\nclass Test(unittest.TestCase):\r\n    def test(self):\r\n         self.fail('')\r\n```\r\n\r\nThen run `python3 -m unittest`. The expected output is `Ran 0 tests`. But it actually is:\r\n\r\n```\r\nF\r\n======================================================================\r\nFAIL: test (package.Test)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"package/__init__.py\", line 5, in test\r\n    self.fail('')\r\nAssertionError\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.000s\r\n\r\nFAILED (failures=1)\r\n```\r\n\r\nSo the test was discovered, despite being located in a file that does not match the pattern `test*.py`.\r\n\r\nThe same happens when the `TestCase` subclass is imported in any `__init__.py` file.\r\n\r\nI tested the above with Python 3.9.2. It does _not_ happen for me with Python 2.7.18.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-100487\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/100290/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/100290/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/100288",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/100288/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/100288/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/100288/events",
      "html_url": "https://github.com/python/cpython/issues/100288",
      "id": 1499820911,
      "node_id": "I_kwDOBN0Z8c5ZZXNv",
      "number": 100288,
      "title": "Finish up LOAD_ATTR specialisation",
      "user": {
        "login": "Fidget-Spinner",
        "id": 28750310,
        "node_id": "MDQ6VXNlcjI4NzUwMzEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fidget-Spinner",
        "html_url": "https://github.com/Fidget-Spinner",
        "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
        "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
        "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
        "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
        "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 15,
      "created_at": "2022-12-16T08:48:33Z",
      "updated_at": "2023-11-28T11:50:42Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "We should target the following specialisation failures:\r\n- [X] has managed dict\r\n- [ ] not in dict (how does this even happen??)\r\n\r\nWith these two we can hit >90% specialisation successes.\r\nIf we're feeling really ambitious, we could aim for \"not managed dict\" failure too. But we don't need that to achieve >90% successes.\r\n\r\nI'm doing the first one. Is anyone interested in investigating the second specialisation failure?\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-100289\n* gh-100468\n* gh-100492\n* gh-100753\n* gh-101354\n* gh-101379\n* gh-105990\n* gh-106589\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/100288/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/100288/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/100257",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/100257/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/100257/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/100257/events",
      "html_url": "https://github.com/python/cpython/issues/100257",
      "id": 1497525265,
      "node_id": "I_kwDOBN0Z8c5ZQmwR",
      "number": 100257,
      "title": "summarize_stats: Link failure kinds to GitHub search",
      "user": {
        "login": "lpereira",
        "id": 15001,
        "node_id": "MDQ6VXNlcjE1MDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/15001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lpereira",
        "html_url": "https://github.com/lpereira",
        "followers_url": "https://api.github.com/users/lpereira/followers",
        "following_url": "https://api.github.com/users/lpereira/following{/other_user}",
        "gists_url": "https://api.github.com/users/lpereira/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lpereira/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lpereira/subscriptions",
        "organizations_url": "https://api.github.com/users/lpereira/orgs",
        "repos_url": "https://api.github.com/users/lpereira/repos",
        "events_url": "https://api.github.com/users/lpereira/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lpereira/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2022-12-14T22:50:52Z",
      "updated_at": "2022-12-14T22:53:53Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\nThe `summarize_stats.py` script shows each kind of specialization failures in English only, without referring to the actual piece of code in `specialize.c` that accounted for that failure.  It should link to a GitHub search where the failure is counted.\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-100258\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/100257/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/100257/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/100240",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/100240/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/100240/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/100240/events",
      "html_url": "https://github.com/python/cpython/issues/100240",
      "id": 1496536176,
      "node_id": "I_kwDOBN0Z8c5ZM1Rw",
      "number": 100240,
      "title": "Use a principled, and consistent, implementation of freelists.",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "markshannon",
          "id": 9448417,
          "node_id": "MDQ6VXNlcjk0NDg0MTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/markshannon",
          "html_url": "https://github.com/markshannon",
          "followers_url": "https://api.github.com/users/markshannon/followers",
          "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
          "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
          "organizations_url": "https://api.github.com/users/markshannon/orgs",
          "repos_url": "https://api.github.com/users/markshannon/repos",
          "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/markshannon/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2022-12-14T12:29:39Z",
      "updated_at": "2024-07-17T19:08:44Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "We currently implement freelists for the following object and internal structs\r\n\r\n* str\r\n* float \r\n* tuple (about 20 freelists, which is really wasteful)\r\n* list\r\n* async generator\r\n* contexts\r\n* small dicts\r\n* small dict keys\r\n* slice (a freelist of one)\r\n\r\nAll of these are implemented independently and rather inefficiently.\r\nThey take up 3672 bytes of space, instead of the ~200 bytes they should take.\r\nThis is not a lot in terms of memory, but it is a lot in terms of L1 cache.\r\n\r\nA freelist should look like this:\r\n```C\r\ntypedef struct {\r\n    void *head;\r\n    uint32_t space;\r\n    uint16_t current_capacity;\r\n    uint16_t limit_capacity;\r\n} _PyFreelist;\r\n```\r\n\r\nOnly one test is needed for allocation and deallocation (on the fast path).\r\nAllocation needs to test `freelist.head != NULL`. Deallocation needs to test `freelist.space != 0`.\r\n\r\nThe actual list is threaded through the objects on the list, terminated by `NULL`.\r\n\r\nCache locality is good. The `head` and `space` are adjacent, and 4 freelists fit in a single cache line.\r\nWhen freeing, the object is hot (and thus in cache).\r\nWhen allocating, the object is about to be used, so needs to be moved to cache anyway.\r\n\r\nThe `capacity` fields are there to allow the capacity of a freelist to be temporarily set to 0, ensuring that all allocations go through the main allocator, for use cases like `tracemalloc`. Currently `tracemalloc` doesn't see a lot of allocations, due to freelists.\r\n\r\nUnifying the code for freelists reduces code duplication, and simplifies things for further improvements.\r\n\r\n### Original discussion\r\n\r\nhttps://github.com/faster-cpython/ideas/discussions/132\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-101453\n* gh-121934\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/100240/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/100240/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/99951",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/99951/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/99951/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/99951/events",
      "html_url": "https://github.com/python/cpython/issues/99951",
      "id": 1472850949,
      "node_id": "I_kwDOBN0Z8c5XyewF",
      "number": 99951,
      "title": "Signal if there is an OpenSSL major version mismatch",
      "user": {
        "login": "mmomtchev",
        "id": 31410344,
        "node_id": "MDQ6VXNlcjMxNDEwMzQ0",
        "avatar_url": "https://avatars.githubusercontent.com/u/31410344?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mmomtchev",
        "html_url": "https://github.com/mmomtchev",
        "followers_url": "https://api.github.com/users/mmomtchev/followers",
        "following_url": "https://api.github.com/users/mmomtchev/following{/other_user}",
        "gists_url": "https://api.github.com/users/mmomtchev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mmomtchev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mmomtchev/subscriptions",
        "organizations_url": "https://api.github.com/users/mmomtchev/orgs",
        "repos_url": "https://api.github.com/users/mmomtchev/repos",
        "events_url": "https://api.github.com/users/mmomtchev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mmomtchev/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4019305351,
          "node_id": "LA_kwDOBN0Z8c7vkbuH",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-SSL",
          "name": "topic-SSL",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 7,
      "created_at": "2022-12-02T13:13:40Z",
      "updated_at": "2023-01-30T13:51:22Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\nImplement some kind of obvious warning or even fatal error when the runtime OpenSSL major version does not match the one Python was compiled against.\r\n\r\n# Pitch\r\n\r\nThis is especially valid when using the embedded interpreter. I am developing a Node.js/Python compatiblity layer (https://github.com/mmomtchev/pymport) and Node.js exports the OpenSSL symbols it was built with. Python on Ubuntu 22.04 was compiled with libssl3 and it can't be used in any software compiled with libssl1. There is no magic solution to this problem, but printing a warning or even quitting with a fatal error would avoid wasting many hours debugging very hard to find crashes.\r\n\r\nAs we are currently right in the middle of the painful switch from OpenSSL 1 to OpenSSL 3, I am sure many will be thankful for this feature.\r\n\r\n# Previous discussion\r\n\r\nThis is a two-liner\r\n\r\n<!--\r\nYou can freely edit this text. Remove any lines you believe are unnecessary.\r\n-->\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-100641\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/99951/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/99951/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/99942",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/99942/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/99942/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/99942/events",
      "html_url": "https://github.com/python/cpython/issues/99942",
      "id": 1472299310,
      "node_id": "I_kwDOBN0Z8c5XwYEu",
      "number": 99942,
      "title": "Building and linking C extensions in a post-distutils world",
      "user": {
        "login": "eli-schwartz",
        "id": 6551424,
        "node_id": "MDQ6VXNlcjY1NTE0MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6551424?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eli-schwartz",
        "html_url": "https://github.com/eli-schwartz",
        "followers_url": "https://api.github.com/users/eli-schwartz/followers",
        "following_url": "https://api.github.com/users/eli-schwartz/following{/other_user}",
        "gists_url": "https://api.github.com/users/eli-schwartz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/eli-schwartz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/eli-schwartz/subscriptions",
        "organizations_url": "https://api.github.com/users/eli-schwartz/orgs",
        "repos_url": "https://api.github.com/users/eli-schwartz/repos",
        "events_url": "https://api.github.com/users/eli-schwartz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/eli-schwartz/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5178737896,
          "node_id": "LA_kwDOBN0Z8c8AAAABNK1E6A",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-sysconfig",
          "name": "topic-sysconfig",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "FFY00",
        "id": 11718923,
        "node_id": "MDQ6VXNlcjExNzE4OTIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/11718923?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/FFY00",
        "html_url": "https://github.com/FFY00",
        "followers_url": "https://api.github.com/users/FFY00/followers",
        "following_url": "https://api.github.com/users/FFY00/following{/other_user}",
        "gists_url": "https://api.github.com/users/FFY00/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/FFY00/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/FFY00/subscriptions",
        "organizations_url": "https://api.github.com/users/FFY00/orgs",
        "repos_url": "https://api.github.com/users/FFY00/repos",
        "events_url": "https://api.github.com/users/FFY00/events{/privacy}",
        "received_events_url": "https://api.github.com/users/FFY00/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "FFY00",
          "id": 11718923,
          "node_id": "MDQ6VXNlcjExNzE4OTIz",
          "avatar_url": "https://avatars.githubusercontent.com/u/11718923?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/FFY00",
          "html_url": "https://github.com/FFY00",
          "followers_url": "https://api.github.com/users/FFY00/followers",
          "following_url": "https://api.github.com/users/FFY00/following{/other_user}",
          "gists_url": "https://api.github.com/users/FFY00/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/FFY00/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/FFY00/subscriptions",
          "organizations_url": "https://api.github.com/users/FFY00/orgs",
          "repos_url": "https://api.github.com/users/FFY00/repos",
          "events_url": "https://api.github.com/users/FFY00/events{/privacy}",
          "received_events_url": "https://api.github.com/users/FFY00/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2022-12-02T04:30:55Z",
      "updated_at": "2024-01-05T10:32:05Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "With the removal of distutils from 3.12 alphas, I've recently taken a new look at the use of distutils within https://mesonbuild.com in the hopes that we were finally unblocked and could migrate to sysconfig.\r\n\r\n- install schemes turn out to finally be viable since 3.10.3, when the `deb_system` scheme patch on Debian operating systems for distutils was patched into sysconfig. This hard blocker is gone, thank G-d.\r\n- linking to libpython itself may or may not be an issue, originally I thought it was, but now I think it may not be.\r\n\r\n### How can a C-extension supporting PEP 517 build backend know the best way to compile and link?\r\n\r\n## python <3.12\r\n\r\nMeson has some code: https://github.com/mesonbuild/meson/blob/master/mesonbuild/modules/python.py#L338-L407\r\n\r\nHere's the interesting bit:\r\n```python\r\ndef links_against_libpython():\r\n    from distutils.core import Distribution, Extension\r\n    cmd = Distribution().get_command_obj('build_ext')\r\n    cmd.ensure_finalized()\r\n    return bool(cmd.get_libraries(Extension('dummy', [])))\r\n```\r\n\r\n## python >=3.8\r\n\r\nIn bpo-36721, bpo-21536 etc the above code changes from returning True to False, on many Unix platforms.\r\n\r\nNew additional methods suitable for getting C extension arguments are available. Well, mostly suitable.\r\n\r\n- `sysconfig.get_config_var('LIBPYTHON')`\r\n\r\nthis is configured into:\r\n- `pkg-config --cflags --libs python3`\r\n- `python-config --embed`\r\n\r\nThere's a couple problems with this:\r\n- on Cygwin and Android, LIBPYTHON and thus pkg-config is hardcoded to link to libpython, but distutils only does so when `Py_ENABLE_SHARED`\r\n- none of it works on Windows, which since it is built with PCBuild, doesn't have Makefile config vars (and also / consequently? distributes neither of the latter two)\r\n- pkg-config may not always be installed, so we want a fallback for that\r\n- python-config has tons of CPython build-time junk so we cannot use it\r\n\r\n...\r\n\r\nIt feels uncomfortably like there's still way too much undocumented magic here.\r\n\r\n@vstinner, I assume the Cygwin/Android inconsistency is probably a configure.ac bug that should behave the same way distutils does/did? I can provide a patch to fix it but would like confirmation of which side to fix.\r\n\r\n@FFY00, I think in the long term, sysconfig should expose a function that returns cflags / libs required to build an extension (and works on Windows without `_generate_posix_vars`, and doesn't include lots of `-O3 -pipe -fstack-protector-strong -fdiagnostics-color=always` and more -- i.e. works like pkg-config, not like python-config). Even without the question of \"whether to link to libpython\", there's a 140-line class for figuring out what the name of the library is, which directory to find it in, and what the include directory is too. Of course, this is specific to the case where pkg-config is not available, and most of it is for the Windows case. \n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-100356\n* gh-100967\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/99942/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/99942/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/99777",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/99777/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/99777/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/99777/events",
      "html_url": "https://github.com/python/cpython/issues/99777",
      "id": 1464516654,
      "node_id": "I_kwDOBN0Z8c5XSsAu",
      "number": 99777,
      "title": "`BaseHTTPRequestHandler` hides `TimeoutError` from `handle_error()`",
      "user": {
        "login": "CendioOssman",
        "id": 6640916,
        "node_id": "MDQ6VXNlcjY2NDA5MTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6640916?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CendioOssman",
        "html_url": "https://github.com/CendioOssman",
        "followers_url": "https://api.github.com/users/CendioOssman/followers",
        "following_url": "https://api.github.com/users/CendioOssman/following{/other_user}",
        "gists_url": "https://api.github.com/users/CendioOssman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/CendioOssman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/CendioOssman/subscriptions",
        "organizations_url": "https://api.github.com/users/CendioOssman/orgs",
        "repos_url": "https://api.github.com/users/CendioOssman/repos",
        "events_url": "https://api.github.com/users/CendioOssman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/CendioOssman/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2022-11-25T13:00:00Z",
      "updated_at": "2023-11-25T20:57:31Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\nIf anything in your method handlers (e.g. `do_GET()`) ends up throwing a `TimeoutError`, then that unhandled exception is never forwarded to `handle_error()`, and hence you do not get a chance to do whatever reporting you have set up there.\r\n\r\nThe cause of this is an undocumented timeout handling that was added in bpo-6267. It blindly assumes that any `TimeoutError` must come from the request socket and that it was requested and hence expected. That is not the case for any mildly complex request handler that might communicate with other services.\r\n\r\nThe timeline for this issue is:\r\n\r\n?.? to 2.6: No exceptions are hidden from `handle_error()`\r\n2.7 to 3.2: `recv()` and `send()` timeouts are hidden. Other timeouts, e.g. `connect()`, are not.\r\n3.3 to 3.9: Same situation, but by pure luck since `socket.timeout` was not converted to `TimeoutError` yet\r\n3.10: All timeouts are hidden, not just for `recv()` and `send()`\r\n\r\n# Your environment\r\n\r\n- CPython versions tested on: 2.7.18, 3.2.3, 3.5.10, 3.10.7\r\n- Operating system and architecture: Debian 7 x86_64 and Fedora 35 x86_64\r\n\r\n# Test case\r\n\r\nThis test case should give the output:\r\n\r\n```\r\nGot error!\r\nGot error!\r\n```\r\n\r\nBut instead gives:\r\n```\r\n127.0.0.1 - - [25/Nov/2022 13:48:49] Request timed out: TimeoutError(110, 'Connection timed out')\r\n127.0.0.1 - - [25/Nov/2022 13:48:50] Request timed out: TimeoutError('timed out')\r\n```\r\n\r\nFor 3.9 or older you get a mix.\r\n\r\nCode: (change `simulate` if you want to have the actual socket code throw the exceptions)\r\n\r\n```python3\r\n#!/usr/bin/python3\r\n\r\nimport os\r\nimport errno\r\nimport socket\r\nimport threading\r\nfrom time import sleep\r\ntry:\r\n\tfrom http.server import HTTPServer, BaseHTTPRequestHandler\r\nexcept ImportError:\r\n\tfrom BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler\r\n\r\nsimulate = True\r\n\r\nclass ConnectRequestHandler(BaseHTTPRequestHandler):\r\n\tdef do_GET(self):\r\n\t\tif simulate:\r\n\t\t\traise socket.error(errno.ETIMEDOUT, \"Timeout\")\r\n\t\telse:\r\n\t\t\tsocket.create_connection((\"1.2.3.4\", 9000))\r\n\r\nclass RecvRequestHandler(BaseHTTPRequestHandler):\r\n\tdef do_GET(self):\r\n\t\tif simulate:\r\n\t\t\traise socket.timeout(errno.ETIMEDOUT, \"Timeout\")\r\n\t\telse:\r\n\t\t\t(sock, dummy) = socket.socketpair()\r\n\t\t\tsock.settimeout(1)\r\n\t\t\twhile sock.recv(1024):\r\n\t\t\t\tpass\r\n\r\nclass Server(HTTPServer):\r\n\tdef handle_error(self, request, client_address):\r\n\t\tprint(\"Got error!\")\r\n\r\ndef run_connect_server():\r\n\ts = Server((\"127.0.0.1\", 8998),\r\n\t           ConnectRequestHandler)\r\n\ts.handle_request()\r\n\t\r\ndef run_recv_server():\r\n\ts = Server((\"127.0.0.1\", 8999),\r\n\t           RecvRequestHandler)\r\n\ts.handle_request()\r\n\r\nthreading.Thread(target=run_connect_server).start()\r\nthreading.Thread(target=run_recv_server).start()\r\nsleep(0.5)\r\n\r\ns = socket.create_connection((\"127.0.0.1\", 8998))\r\ns.send(b'GET / HTTP/1.0\\r\\n\\r\\n')\r\nwhile s.recv(1024):\r\n\tpass\r\ns.close()\r\n\r\ns = socket.create_connection((\"127.0.0.1\", 8999))\r\ns.send(b'GET / HTTP/1.0\\r\\n\\r\\n')\r\nwhile s.recv(1024):\r\n\tpass\r\ns.close()\r\n\r\nsleep(0.5)\r\n```\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-99806\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/99777/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/99777/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/99766",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/99766/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/99766/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/99766/events",
      "html_url": "https://github.com/python/cpython/issues/99766",
      "id": 1464067460,
      "node_id": "I_kwDOBN0Z8c5XQ-WE",
      "number": 99766,
      "title": "multiprocessing.connection.Client not support IPV6",
      "user": {
        "login": "thickas",
        "id": 16571995,
        "node_id": "MDQ6VXNlcjE2NTcxOTk1",
        "avatar_url": "https://avatars.githubusercontent.com/u/16571995?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thickas",
        "html_url": "https://github.com/thickas",
        "followers_url": "https://api.github.com/users/thickas/followers",
        "following_url": "https://api.github.com/users/thickas/following{/other_user}",
        "gists_url": "https://api.github.com/users/thickas/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/thickas/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thickas/subscriptions",
        "organizations_url": "https://api.github.com/users/thickas/orgs",
        "repos_url": "https://api.github.com/users/thickas/repos",
        "events_url": "https://api.github.com/users/thickas/events{/privacy}",
        "received_events_url": "https://api.github.com/users/thickas/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2022-11-25T05:53:37Z",
      "updated_at": "2023-11-24T22:59:46Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n**1\u3001Test Code:**\r\n```\r\nfrom multiprocessing.connection import Client\r\naddress = ('fe80::01',9999,0,0)\r\n\r\nwith Client(address,family='AF_INET6', authkey=b'1') as conn:\r\n    print(conn.recv())\r\n```\r\n\r\n**2\u3001Error message**\r\n```\r\nTraceback (most recent call last):\r\n  File \"c:\\Users\\Tiger\\Desktop\\http\\c.py\", line 5, in <module>\r\n    with Client(address,family='AF_INET6', authkey=b'1') as conn:\r\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Tiger\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\connection.py\", line 501, in Client\r\n    c = SocketClient(address)\r\n        ^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Tiger\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\connection.py\", line 629, in SocketClient\r\n    s.connect(address)\r\nTypeError: AF_INET address must be a pair (host, port)\r\n```\r\n\r\n\r\n**3\u3001Causes and Solutions**\r\nSnippets of code in lib/multiprocessing/connection.py\r\n\r\n```\r\ndef address_type(address):\r\n    '''\r\n    Return the types of the address\r\n\r\n    This can be 'AF_INET', 'AF_UNIX', or 'AF_PIPE'\r\n    '''\r\n    if type(address) == tuple:\r\n        return 'AF_INET'  \r\n    elif type(address) is str and address.startswith('\\\\\\\\'):\r\n        return 'AF_PIPE'\r\n    elif type(address) is str or util.is_abstract_socket_namespace(address):\r\n        return 'AF_UNIX'\r\n    else:\r\n        raise ValueError('address type of %r unrecognized' % address)\r\n```\r\nAn ipv6 address is a four-tuple\uff0cthe code for the following sentence should be perfected\r\n```\r\n   if type(address) == tuple:\r\n        return 'AF_INET'  \r\n```\r\nThe modified code is as follows\uff1a\r\n```\r\nif type(address) == tuple:\r\n        if len(address)==2:\r\n            return 'AF_INET'\r\n        else:\r\n            return 'AF_INET6'\r\n```\r\nThat's all, ok!\r\n\r\n**4\u3001A more complete solution**\r\n\"lib/multiprocessing/connection.py\"\r\n\r\nModify the SocketClient function\uff0cadd parameters family\uff0c......\r\n`def SocketClient(address,family=None):`\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-99969\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/99766/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/99766/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/99714",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/99714/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/99714/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/99714/events",
      "html_url": "https://github.com/python/cpython/issues/99714",
      "id": 1460948403,
      "node_id": "I_kwDOBN0Z8c5XFE2z",
      "number": 99714,
      "title": "asyncio - add shield scope context manager for improved control flow in sensitive code sections",
      "user": {
        "login": "whatamithinking",
        "id": 11841857,
        "node_id": "MDQ6VXNlcjExODQxODU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11841857?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/whatamithinking",
        "html_url": "https://github.com/whatamithinking",
        "followers_url": "https://api.github.com/users/whatamithinking/followers",
        "following_url": "https://api.github.com/users/whatamithinking/following{/other_user}",
        "gists_url": "https://api.github.com/users/whatamithinking/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/whatamithinking/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/whatamithinking/subscriptions",
        "organizations_url": "https://api.github.com/users/whatamithinking/orgs",
        "repos_url": "https://api.github.com/users/whatamithinking/repos",
        "events_url": "https://api.github.com/users/whatamithinking/events{/privacy}",
        "received_events_url": "https://api.github.com/users/whatamithinking/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 557226369,
          "node_id": "MDU6TGFiZWw1NTcyMjYzNjk=",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-asyncio",
          "name": "topic-asyncio",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 8,
      "created_at": "2022-11-23T03:49:48Z",
      "updated_at": "2024-05-22T14:34:28Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\nAdd a `shield_scope`  context manager which can shield a block of code from cancellation and block waiting until it completes. A pending cancellation for a task would either be raised during the next non-shielded await or at the end of the task. Shields are task-local and are not be copied into child tasks, to prevent breaking the behavior of child tasks.\r\n\r\n```python\r\nawait cancellable_work()\r\nwith shield_scope():\r\n    state = 2\r\n    await work_to_complete_after_state_change()\r\n    await other_important_work()\r\nprint('sync code, cannot be cancelled')\r\nawait maybe_cancelled_work()\r\n```\r\n\r\n# Pitch\r\n\r\nThe current shielding mechanism, `asyncio.shield` works by wrapping one future in another so the cancellation applies to the outer future while the inner future continues to run. While this solution is effective in protecting the awaitable you pass in, control flow becomes muddled (the exception bubbles up while this future is now running detached in the background) and the code the shield covers often has to grow to encompass other resources to avoid control flow issues, limiting the value of the cancellation features of asyncio.\r\n\r\nThe simplest current workaround to maintaining control flow using `asyncio.shield` seems to be to wrap up the coroutine in a task and wait on that after the cancellation occurs. This solution adds a lot of overhead (Task object + loop cycle until task can start) to shielded functions, which can add up quickly in hot code paths. If shielded functions are nested, where to re-raise the cancellation also becomes a challenge requiring contextual information to know if we are still inside a coroutine which is shielded.\r\n\r\n```python\r\nimport asyncio\r\n\r\n\r\nasync def work():\r\n    print(\"task started\")\r\n    task = asyncio.create_task(asyncio.sleep(5))\r\n    try:\r\n        await asyncio.shield(task)\r\n    except asyncio.CancelledError:\r\n        print(\"task cancellation caught\")\r\n        await task\r\n        print(\"task ran to completion\")\r\n        raise\r\n\r\n\r\nasync def main():\r\n    task = asyncio.create_task(work())\r\n    await asyncio.sleep(1)\r\n    task.cancel()\r\n    await task\r\n\r\n\r\nasyncio.run(main())\r\n```\r\n\r\nThe following example hopefully provides a more concrete example of how a shield scope could more efficiently solve this shielding / control flow need and be easier to work with. \r\n\r\nThe following shows how a `shield_scope` might be used. If the same code were run with `asyncio.shield` wrapping the publish coroutines, the `resource_lock` acquired by `create_resource` would be released before `publish` completed and the `delete_resource` coroutine would finish publishing before the `create_resource` coroutine.\r\n```python\r\nimport asyncio\r\n\r\n# lets say we have a collection of resources and a pub/sub system \r\n# which we want to send all signals related to those resources to\r\n# lets also say that we want all messages (created, deleted, updated, etc.)\r\n# to be sequential for each resource. to do that, we use a lock for each\r\n# resource. there may be some contention around each lock, as\r\n# each operation for a resource may take awhile, so we want to maintain\r\n# the ability to cancel waiting on the lock at any time (such as a client of a web server might do)\r\n\r\n\r\nasync def publish(msg, delay):\r\n    print(f\"starting publish: {msg}\")\r\n    await asyncio.sleep(delay)\r\n    print(f\"ending publish: {msg}\")\r\n\r\n\r\nasync def create_resource(resource_lock):\r\n    print(\"create - wait lock\")\r\n    await resource_lock.acquire()\r\n    print(\"create - acquire lock\")\r\n    try:\r\n        print(\"create - resource\")\r\n        # once we have created the resource, we have to finish publishing\r\n        # or the other parts of the system wont know about it\r\n        # we have to hold the lock or publishing of the created message\r\n        # may interleave with publishing of the deleted message\r\n        with shield_scope():\r\n            await publish(\"create - resource\", delay=3)\r\n    finally:\r\n        resource_lock.release()\r\n        print(\"create - release lock\")\r\n\r\n\r\nasync def delete_resource(resource_lock):\r\n    # the lock is outside the shield so we can still cancel waiting on it\r\n    # if there is contention with the lock. maybe we come back later.\r\n    print(\"delete - wait lock\")\r\n    await resource_lock.acquire()\r\n    print(\"delete - acquire lock\")\r\n    try:\r\n        print(\"delete - resource\")\r\n        with shield_scope():\r\n            await publish(\"delete - resource\", delay=2)\r\n    finally:\r\n        resource_lock.release()\r\n        print(\"delete - release lock\")\r\n\r\n\r\nasync def main():\r\n    resource_lock = asyncio.Lock()\r\n    creator = asyncio.create_task(create_resource(resource_lock))\r\n    await asyncio.sleep(0)\r\n    deleter = asyncio.create_task(delete_resource(resource_lock))\r\n    await asyncio.sleep(0)\r\n    creator.cancel()\r\n    await asyncio.sleep(5)\r\n\r\n\r\nasyncio.run(main())\r\n\r\n```\r\n\r\n# Previous discussion\r\n\r\n- [trio - CancelScope.shield](https://trio.readthedocs.io/en/stable/reference-core.html?highlight=shield#trio.CancelScope.shield)\r\n- [curio - disable_cancellation discussion](https://github.com/dabeaz/curio/issues/96)\r\n- [curio - disable_cancellation docs](https://curio.readthedocs.io/en/latest/howto.html?highlight=shield#how-do-you-shield-operations-from-timeouts-or-cancellation)\r\n- [asyncio - mentioned in TaskGroup discussion](https://github.com/python/cpython/issues/90999)\r\n\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-99898\r\n* gh-99899\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/99714/reactions",
        "total_count": 6,
        "+1": 6,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/99714/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/99502",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/99502/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/99502/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/99502/events",
      "html_url": "https://github.com/python/cpython/issues/99502",
      "id": 1449485332,
      "node_id": "I_kwDOBN0Z8c5WZWQU",
      "number": 99502,
      "title": "secrets.compare_digest raises TypeError if one of it's arguments is None",
      "user": {
        "login": "dwt",
        "id": 57199,
        "node_id": "MDQ6VXNlcjU3MTk5",
        "avatar_url": "https://avatars.githubusercontent.com/u/57199?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dwt",
        "html_url": "https://github.com/dwt",
        "followers_url": "https://api.github.com/users/dwt/followers",
        "following_url": "https://api.github.com/users/dwt/following{/other_user}",
        "gists_url": "https://api.github.com/users/dwt/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dwt/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dwt/subscriptions",
        "organizations_url": "https://api.github.com/users/dwt/orgs",
        "repos_url": "https://api.github.com/users/dwt/repos",
        "events_url": "https://api.github.com/users/dwt/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dwt/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 7,
      "created_at": "2022-11-15T09:50:39Z",
      "updated_at": "2023-11-25T21:47:12Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\nWhen using `secrets.compare_digest()` with one or both of it's arguments being None the function explodes. This is [not explicitly documented](https://docs.python.org/3/library/secrets.html#secrets.compare_digest) even though the documentation mentions that it compares strings.\r\n\r\n```python\r\n\u276f python3.11\r\nPython 3.11.0 (main, Oct 25 2022, 13:57:33) [Clang 14.0.0 (clang-1400.0.29.202)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import secrets\r\n>>> secrets.compare_digest('', '')\r\nTrue\r\n>>> secrets.compare_digest('', None)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: unsupported operand types(s) or combination of types: 'str' and 'NoneType'\r\n>>> secrets.compare_digest(None, '')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: unsupported operand types(s) or combination of types: 'NoneType' and 'str'\r\n>>> secrets.compare_digest(None, None)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: unsupported operand types(s) or combination of types: 'NoneType' and 'NoneType'\r\n```\r\n\r\nI would argue that a function that advertises to securely compare the two arguments in constant time, should not explode and thus reveal that one of the arguments (in this case someone had set the password hash in the Database to `NULL`) has a different length. If this is not wanted, I think the documentation should include some guidance how to handle this case not generate a timing attack that reveals something about the password in the Database? Not sure that is reasonable, but at least som hints about this not handling `None` would have been really helpful.\r\n\r\n# Your environment\r\n\r\n- CPython versions tested on: 3.6, 3.9, 3.10, 3.11\r\n- Operating system and architecture: Linux x86, Mac ARM\r\n\r\n\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-99512\r\n* gh-99790\r\n* gh-99791\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": {
        "login": "kumaraditya303",
        "id": 59607654,
        "node_id": "MDQ6VXNlcjU5NjA3NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/59607654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kumaraditya303",
        "html_url": "https://github.com/kumaraditya303",
        "followers_url": "https://api.github.com/users/kumaraditya303/followers",
        "following_url": "https://api.github.com/users/kumaraditya303/following{/other_user}",
        "gists_url": "https://api.github.com/users/kumaraditya303/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kumaraditya303/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kumaraditya303/subscriptions",
        "organizations_url": "https://api.github.com/users/kumaraditya303/orgs",
        "repos_url": "https://api.github.com/users/kumaraditya303/repos",
        "events_url": "https://api.github.com/users/kumaraditya303/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kumaraditya303/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/99502/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/99502/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/99442",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/99442/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/99442/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/99442/events",
      "html_url": "https://github.com/python/cpython/issues/99442",
      "id": 1446960968,
      "node_id": "I_kwDOBN0Z8c5WPt9I",
      "number": 99442,
      "title": "Python launcher invoked with command \"py\" fails to start process",
      "user": {
        "login": "kai2nenobu",
        "id": 810042,
        "node_id": "MDQ6VXNlcjgxMDA0Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/810042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kai2nenobu",
        "html_url": "https://github.com/kai2nenobu",
        "followers_url": "https://api.github.com/users/kai2nenobu/followers",
        "following_url": "https://api.github.com/users/kai2nenobu/following{/other_user}",
        "gists_url": "https://api.github.com/users/kai2nenobu/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kai2nenobu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kai2nenobu/subscriptions",
        "organizations_url": "https://api.github.com/users/kai2nenobu/orgs",
        "repos_url": "https://api.github.com/users/kai2nenobu/repos",
        "events_url": "https://api.github.com/users/kai2nenobu/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kai2nenobu/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 570103914,
          "node_id": "MDU6TGFiZWw1NzAxMDM5MTQ=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-windows",
          "name": "OS-windows",
          "color": "d4c5f9",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "zooba",
        "id": 1693688,
        "node_id": "MDQ6VXNlcjE2OTM2ODg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zooba",
        "html_url": "https://github.com/zooba",
        "followers_url": "https://api.github.com/users/zooba/followers",
        "following_url": "https://api.github.com/users/zooba/following{/other_user}",
        "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
        "organizations_url": "https://api.github.com/users/zooba/orgs",
        "repos_url": "https://api.github.com/users/zooba/repos",
        "events_url": "https://api.github.com/users/zooba/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zooba/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "zooba",
          "id": 1693688,
          "node_id": "MDQ6VXNlcjE2OTM2ODg=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/zooba",
          "html_url": "https://github.com/zooba",
          "followers_url": "https://api.github.com/users/zooba/followers",
          "following_url": "https://api.github.com/users/zooba/following{/other_user}",
          "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
          "organizations_url": "https://api.github.com/users/zooba/orgs",
          "repos_url": "https://api.github.com/users/zooba/repos",
          "events_url": "https://api.github.com/users/zooba/events{/privacy}",
          "received_events_url": "https://api.github.com/users/zooba/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 30,
      "created_at": "2022-11-13T15:06:09Z",
      "updated_at": "2024-03-07T15:11:38Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\nWhen I invoke a python launcher of version 3.11.0 with `\"py\"` command, a python launcher fails to start process.\r\n\r\nStep to reproduce\r\n\r\n1. Install python 3.11.0 with py launcher for all users.\r\n2. Invoke `\"py\"` in command prompt.\r\n3. I expect to launch a python interpreter, but got a error as below\r\n   \r\n   ```console\r\n   >\"py\"\r\n   Unable to create process using 'C:\\Python311\\py\"':  The system cannot find the file specified.\r\n   ```\r\n\r\n    <details><summary>Debug output when enable PYLAUNCHER_DEBUG</summary>\r\n\r\n    ```console\r\n    >\"py\"\r\n    argv0: py\r\n    version: 3.11.0\r\n    SearchInfo.originalCmdLine: \"py\"\r\n    SearchInfo.restOfCmdLine:\r\n    SearchInfo.executablePath: (null)\r\n    SearchInfo.scriptFile: (null)\r\n    SearchInfo.executable: py\"\r\n    SearchInfo.executableArgs: (null)\r\n    SearchInfo.company: (null)\r\n    SearchInfo.tag: (null)\r\n    SearchInfo.oldStyleTag: False\r\n    SearchInfo.lowPriorityTag: False\r\n    SearchInfo.allowDefaults: False\r\n    SearchInfo.allowExecutableOverride: False\r\n    SearchInfo.windowed: False\r\n    SearchInfo.list: False\r\n    SearchInfo.listPaths: False\r\n    SearchInfo.help: False\r\n     -V:3.11          C:\\Python311\\python.exe\r\n     -V:3.10          C:\\Python310\\python.exe\r\n     -V:3.9           C:\\Python39\\python.exe\r\n     -V:3.7           C:\\Python37\\python.exe\r\n    env.company: PythonCore\r\n    env.tag: 3.11\r\n    # about to run: C:\\Python311\\py\"\r\n    Unable to create process using 'C:\\Python311\\py\"':  The system cannot find the file specified.\r\n    ```\r\n\r\n    </details>\r\n\r\n\r\nI think this error seems to be similar to #95285. If I invoke `py` or `\"py.exe\"`, a python interpreter starts well as I expected.\r\n\r\n```console\r\n>py\r\nPython 3.11.0 (main, Oct 24 2022, 18:26:48) [MSC v.1933 64 bit (AMD64)] on win32\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>>\r\n```\r\n\r\n```console\r\n>\"py.exe\"\r\nPython 3.11.0 (main, Oct 24 2022, 18:26:48) [MSC v.1933 64 bit (AMD64)] on win32\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>>\r\n```\r\n\r\nIn version 3.10.8, all of `\"py\"`, `py` and `\"py.exe\"` start a python interpreter correctly.\r\n\r\n\r\n\r\n# Your environment\r\n\r\n- CPython versions tested on: 3.11.0\r\n- Operating system and architecture: Windows 10 (10.0.19045.2310)/amd64\r\n\r\n\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-99542\n* gh-99579\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "zooba",
        "id": 1693688,
        "node_id": "MDQ6VXNlcjE2OTM2ODg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zooba",
        "html_url": "https://github.com/zooba",
        "followers_url": "https://api.github.com/users/zooba/followers",
        "following_url": "https://api.github.com/users/zooba/following{/other_user}",
        "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
        "organizations_url": "https://api.github.com/users/zooba/orgs",
        "repos_url": "https://api.github.com/users/zooba/repos",
        "events_url": "https://api.github.com/users/zooba/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zooba/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/99442/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/99442/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/99202",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/99202/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/99202/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/99202/events",
      "html_url": "https://github.com/python/cpython/issues/99202",
      "id": 1438400305,
      "node_id": "I_kwDOBN0Z8c5VvD8x",
      "number": 99202,
      "title": "Extension type from documentation doesn't compile in C++20 mode",
      "user": {
        "login": "arogge",
        "id": 22479968,
        "node_id": "MDQ6VXNlcjIyNDc5OTY4",
        "avatar_url": "https://avatars.githubusercontent.com/u/22479968?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/arogge",
        "html_url": "https://github.com/arogge",
        "followers_url": "https://api.github.com/users/arogge/followers",
        "following_url": "https://api.github.com/users/arogge/following{/other_user}",
        "gists_url": "https://api.github.com/users/arogge/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/arogge/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/arogge/subscriptions",
        "organizations_url": "https://api.github.com/users/arogge/orgs",
        "repos_url": "https://api.github.com/users/arogge/repos",
        "events_url": "https://api.github.com/users/arogge/events{/privacy}",
        "received_events_url": "https://api.github.com/users/arogge/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4019060898,
          "node_id": "LA_kwDOBN0Z8c7vjgCi",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-C-API",
          "name": "topic-C-API",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 9,
      "created_at": "2022-11-07T13:50:33Z",
      "updated_at": "2023-04-05T15:45:20Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Bug report\r\nC++20 added support for designated initializers and fails to compile if you mix named and unnamed initializers.\r\n\r\nFor demonstration I'll use the example from the documentation section \"[Defining Extension Types: Tutorial](https://docs.python.org/3/extending/newtypes_tutorial.html)\" with `.tp_doc` removed from `CustomType` so it builds on Python 3.10.\r\n\r\nWhen building with C++ compiler in C++20 mode using\r\n`g++ $(python3-config --cflags) -std=c++20 -Wall -Wextra -Wno-missing-field-initializers -c pymod.cc`\r\nit fails with the following message:\r\n```\r\npymod.cc:11:5: error: either all initializer clauses should be designated or none of them should be\r\n   11 |     .tp_name = \"custom.Custom\",\r\n      |     ^\r\npymod.cc:20:5: error: either all initializer clauses should be designated or none of them should be\r\n   20 |     .m_name = \"custom\",\r\n      |     ^\r\n```\r\nThe problem is the macros that produce non-designated initializers here.\r\n\r\n\r\n# Additional information\r\n\r\nThe following compiles work flawlessly:\r\nGNU C compiler:\r\n`gcc $(python3-config --cflags) -Wall -Wextra -Wno-missing-field-initializers -c pymod.cc`\r\n\r\nGNU C++ compiler with no C++ version specified:\r\n`g++ $(python3-config --cflags) -Wall -Wextra -Wno-missing-field-initializers -c pymod.cc`\r\n\r\nGNU C++ Compiler in C++17 mode:\r\n`g++ $(python3-config --cflags) -std=c++17 -Wall -Wextra -Wno-missing-field-initializers -c pymod.cc`\r\n\r\n# Your environment\r\n- Fedora 36 container with `python-devel`, `gcc` and `gcc-c++` installed\r\n- CPython: 3.10.7\r\n- GCC: 12.2.1 20220819 (Red Hat 12.2.1-2)\r\n\r\nThe issue leading up to this was our build failing in C++20 mode on at least RHEL 7/8/9, Fedora 34 to 37, SLES 12, SLES 15, Debian 10/11, Ubuntu 16 to 22.\r\nSo I guess building with pretty much every GNU C++ compiler will break if you turn on C++20.\r\n\r\npymod.cc:\r\n```\r\n#define PY_SSIZE_T_CLEAN\r\n#include <Python.h>\r\n\r\ntypedef struct {\r\n    PyObject_HEAD\r\n    /* Type-specific fields go here. */\r\n} CustomObject;\r\n\r\nstatic PyTypeObject CustomType = {\r\n    PyVarObject_HEAD_INIT(NULL, 0)\r\n    .tp_name = \"custom.Custom\",\r\n    .tp_basicsize = sizeof(CustomObject),\r\n    .tp_itemsize = 0,\r\n    .tp_flags = Py_TPFLAGS_DEFAULT,\r\n    .tp_new = PyType_GenericNew,\r\n};\r\n\r\nstatic PyModuleDef custommodule = {\r\n    PyModuleDef_HEAD_INIT,\r\n    .m_name = \"custom\",\r\n    .m_doc = \"Example module that creates an extension type.\",\r\n    .m_size = -1,\r\n};\r\n\r\nPyMODINIT_FUNC\r\nPyInit_custom(void)\r\n{\r\n    PyObject *m;\r\n    if (PyType_Ready(&CustomType) < 0)\r\n        return NULL;\r\n\r\n    m = PyModule_Create(&custommodule);\r\n    if (m == NULL)\r\n        return NULL;\r\n\r\n    Py_INCREF(&CustomType);\r\n    if (PyModule_AddObject(m, \"Custom\", (PyObject *) &CustomType) < 0) {\r\n        Py_DECREF(&CustomType);\r\n        Py_DECREF(m);\r\n        return NULL;\r\n    }\r\n\r\n    return m;\r\n}\r\n```\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-102518\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/99202/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/99202/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/99185",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/99185/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/99185/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/99185/events",
      "html_url": "https://github.com/python/cpython/issues/99185",
      "id": 1437845381,
      "node_id": "I_kwDOBN0Z8c5Vs8eF",
      "number": 99185,
      "title": "Windows python3 executable",
      "user": {
        "login": "ptyork",
        "id": 1051795,
        "node_id": "MDQ6VXNlcjEwNTE3OTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1051795?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ptyork",
        "html_url": "https://github.com/ptyork",
        "followers_url": "https://api.github.com/users/ptyork/followers",
        "following_url": "https://api.github.com/users/ptyork/following{/other_user}",
        "gists_url": "https://api.github.com/users/ptyork/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ptyork/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ptyork/subscriptions",
        "organizations_url": "https://api.github.com/users/ptyork/orgs",
        "repos_url": "https://api.github.com/users/ptyork/repos",
        "events_url": "https://api.github.com/users/ptyork/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ptyork/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 570103914,
          "node_id": "MDU6TGFiZWw1NzAxMDM5MTQ=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-windows",
          "name": "OS-windows",
          "color": "d4c5f9",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 40,
      "created_at": "2022-11-07T06:42:29Z",
      "updated_at": "2024-06-03T14:17:00Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "ISSUE:\r\n\r\nOn Windows, a Python 3 install directory contains `python.exe`. However, there is no `python3.exe`, `python3.cmd` or similar. Thus, a user following almost any online tutorial, copy/pasting installation scripts, etc. will fail because all are written for *nix platforms that standardize on `python3` as the name of the executable.\r\n\r\nWorse, there **_is_** a `python3.exe` in a default `AppData\\Local\\Microsoft\\WindowsApps` directory which is a stub to open the Windows Store to download Python 3. So the unsuspecting user is greeted with the option to install Python 3 from the Windows Store, which could break an existing installation and certainly will not do what they intended.\r\n\r\nThis is obviously only an issue for novice users. But I teach novice users. And this comes up numerous times each semester despite posting FAQ's and warnings related to this issue. And it seems very easy to fix in the default install.\r\n\r\nThis seems like it should be an issue long since reported, but I cannot find it by searching. So I apologize if this is a duplicate.\r\n\r\nREQUESTED FIX:\r\n\r\nOne option is simply to add a copy of `python.exe` named `python3.exe` in the base install directory. This appears to be how PIP is handled, with `pip.exe`, `pip3.exe` and `pip3.X.exe` all being copies of the same executable located in a Scripts subdirectory.\r\n\r\nAlternatively, adding a `python3.cmd` script that calls python.exe and forwards all args would serve the same function. Though I'm unsure that saving 100MB would be worth the potential confusion.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-100184\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/99185/reactions",
        "total_count": 13,
        "+1": 12,
        "-1": 1,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/99185/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/99064",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/99064/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/99064/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/99064/events",
      "html_url": "https://github.com/python/cpython/issues/99064",
      "id": 1434935838,
      "node_id": "I_kwDOBN0Z8c5Vh2Ie",
      "number": 99064,
      "title": "xml.etree.ElementTree: file source must be binary for non-UTF-8 encodings",
      "user": {
        "login": "coproc",
        "id": 10478747,
        "node_id": "MDQ6VXNlcjEwNDc4NzQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10478747?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/coproc",
        "html_url": "https://github.com/coproc",
        "followers_url": "https://api.github.com/users/coproc/followers",
        "following_url": "https://api.github.com/users/coproc/following{/other_user}",
        "gists_url": "https://api.github.com/users/coproc/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/coproc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/coproc/subscriptions",
        "organizations_url": "https://api.github.com/users/coproc/orgs",
        "repos_url": "https://api.github.com/users/coproc/repos",
        "events_url": "https://api.github.com/users/coproc/events{/privacy}",
        "received_events_url": "https://api.github.com/users/coproc/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018689026,
          "node_id": "LA_kwDOBN0Z8c7viFQC",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-XML",
          "name": "topic-XML",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2022-11-03T16:20:28Z",
      "updated_at": "2024-10-16T13:34:41Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Documentation\r\n\r\nIn the [documentation for xml.etree.ElementTree.parse](https://docs.python.org/3/library/xml.etree.elementtree.html) it says for the first argument `source`: \"... source is a filename or file object containing XML data. ...\"\r\n\r\nBut for file objects this does not work in all (expected) cases. A hint like the following is missing:\r\n```\r\nFor file objects containing XML data with non-ASCII and non-UTF-8 encoding (e.g. ISO 8859-1), the file must have been opened in binary mode.\r\n```\r\nOtherwise (if opening the file in ASCII mode, regardless of the specified encoding) non-ASCII characters are not read correctly. (see this [question on stackoverflow](https://stackoverflow.com/questions/47883390) and also the [attached files in test_parseXml.zip](https://github.com/python/cpython/files/9930967/test_parseXml.zip) for reproducing the problem)\r\n\r\n\r\nHere is an excerpt of the attached test code:\r\n\r\n```python\r\nimport xml\r\n\r\n# ok\r\nwith open('test_ISO-8859-1.xml', 'rb') as fileInBinary:\r\n    root = xml.etree.ElementTree.parse(fileInBinary).getroot()\r\nprint(root.attrib['attributeWithUmlauts'])\r\n\r\n# garbage\r\nwith open('test_ISO-8859-1.xml', 'r', encoding='ISO-8859-1') as fileInAscii:\r\n    root = xml.etree.ElementTree.parse(fileInAscii).getroot()\r\nprint(root.attrib['attributeWithUmlauts'])\r\n```\r\n\r\ngiving the following output:\r\n\r\n```\r\n\u00e4\u00f6\u00fc\r\n\u00c3\u00a4\u00c3\u00b6\u00c3\u00bc\r\n```\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-123887\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/99064/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/99064/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/99030",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/99030/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/99030/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/99030/events",
      "html_url": "https://github.com/python/cpython/issues/99030",
      "id": 1433914498,
      "node_id": "I_kwDOBN0Z8c5Vd8yC",
      "number": 99030,
      "title": "\"builtins\" module should link to Built-in Types and Built-in Exceptions",
      "user": {
        "login": "wjandrea",
        "id": 22385371,
        "node_id": "MDQ6VXNlcjIyMzg1Mzcx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22385371?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/wjandrea",
        "html_url": "https://github.com/wjandrea",
        "followers_url": "https://api.github.com/users/wjandrea/followers",
        "following_url": "https://api.github.com/users/wjandrea/following{/other_user}",
        "gists_url": "https://api.github.com/users/wjandrea/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/wjandrea/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wjandrea/subscriptions",
        "organizations_url": "https://api.github.com/users/wjandrea/orgs",
        "repos_url": "https://api.github.com/users/wjandrea/repos",
        "events_url": "https://api.github.com/users/wjandrea/events{/privacy}",
        "received_events_url": "https://api.github.com/users/wjandrea/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2022-11-02T23:30:39Z",
      "updated_at": "2024-10-21T00:36:48Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "The [`builtins`](https://docs.python.org/library/builtins.html) module documentation links to [Built-in Functions](https://docs.python.org/library/functions.html#built-in-funcs) and [Built-in Constants](https://docs.python.org/library/constants.html#built-in-consts), but not [Built-in Types](https://docs.python.org/library/stdtypes.html) and [Built-in Exceptions](https://docs.python.org/library/exceptions.html). Those should be included, shouldn't they?\r\n\r\n---\r\n\r\nI'd be happy to submit a PR for this, though I'm not very good with RST. I believe the links would be `` :ref:`bltin-types` `` and `` :ref:`bltin-exceptions` ``.\r\n\r\nI'd also want to change the wording to make it less clunky with more links, from `See ... for documentation.` to `For documentation, see ...`\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-123857\n* gh-125764\n* gh-125765\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/99030/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/99030/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/99005",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/99005/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/99005/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/99005/events",
      "html_url": "https://github.com/python/cpython/issues/99005",
      "id": 1433246110,
      "node_id": "I_kwDOBN0Z8c5VbZme",
      "number": 99005,
      "title": "Add `CALL_INTRINSIC` instruction.",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 7,
      "created_at": "2022-11-02T14:30:32Z",
      "updated_at": "2023-11-27T18:35:09Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "We have a number of instructions that are complicated and executed fairly rarely. For example `MAP_KEYS`, `CHECK_EG_MATCH`, `CLEANUP_THROW`.\r\nThese bulk out the interpreter, possibly slowing things down.\r\nWe should move code from these into helper functions, which can be called though a table from `CALL_INTRINSIC` instruction.\r\n\r\nThe `CALL_INTRINSIC` instruction also provides a means for contributors to add new functionality without a deep understanding of the compiler.\r\n\r\nCandidates for moving into `CALL_INTRINSIC` are:\r\n* SETUP_ANNOTATIONS\r\n* LOAD_BUILD_CLASS\r\n* MATCH_KEYS\r\n* CHECK_EG_MATCH\r\n* CLEANUP_THROW\r\n\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-100771\n* gh-100774\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/99005/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/99005/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/98306",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/98306/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/98306/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/98306/events",
      "html_url": "https://github.com/python/cpython/issues/98306",
      "id": 1410294708,
      "node_id": "I_kwDOBN0Z8c5UD2O0",
      "number": 98306,
      "title": "Proper or custom JSON serialization of non-finite float values",
      "user": {
        "login": "Dzeri96",
        "id": 13813363,
        "node_id": "MDQ6VXNlcjEzODEzMzYz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13813363?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Dzeri96",
        "html_url": "https://github.com/Dzeri96",
        "followers_url": "https://api.github.com/users/Dzeri96/followers",
        "following_url": "https://api.github.com/users/Dzeri96/following{/other_user}",
        "gists_url": "https://api.github.com/users/Dzeri96/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Dzeri96/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Dzeri96/subscriptions",
        "organizations_url": "https://api.github.com/users/Dzeri96/orgs",
        "repos_url": "https://api.github.com/users/Dzeri96/repos",
        "events_url": "https://api.github.com/users/Dzeri96/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Dzeri96/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 10,
      "created_at": "2022-10-15T21:27:14Z",
      "updated_at": "2024-05-12T09:32:58Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Feature or enhancement\r\n\r\nThe goal of this feature is to allow the JSON serializer in stdlib to serialize non-finite values (NaN, Inf, -Inf) according to the [JSON specification](https://datatracker.ietf.org/doc/html/rfc8259). Going beyond just conforming to the spec, we could allow for custom serialization behavior.\r\n\r\n\r\n# Previous discussion\r\nThis problem was previously discussed in #84813, and a [related PR](https://github.com/python/cpython/pull/13233) was submitted in 2019, however, @mdickinson suggested I open a fresh issue where we can discuss the implementation in-depth.\r\n\r\n\r\n# Pitch\r\nCurrently, python's default JSON serializer encodes values like `NaN` as-is, with the explanation being that many JS-based JSON libraries also do this, and that the corresponding parsers can handle such non-conforming input.\r\nIn reality, most major browsers do not support this type of encoding and even NodeJS(v14.16.0) acts according to the previously-linked JSON spec.\r\nThe keyword argument `allow_nan` makes the serializer throw when encountering non-finite values when set to true, but I'd argue it is paramount to ensure compatibility with the spec and modern browsers. Changing the default behavior is of course not needed or possible at this point.\r\n\r\nWhen implementing this feature, there are two main decisions to make.\r\n\r\nFirstly, it has to be decided if `allow_nan` should be extended to take more datatypes like strings and callables, or if we should create a separate argument for this functionality.\r\nRe-purposing `allow_nan` would make the control over such behavior centralized, however the name is very limiting.\r\nIt doesn't say anything about other non-finite values, and without looking at the docs, one would think it only takes bool values.\r\n\r\nSecondly, it has to be decided how far we want to take this feature.\r\nDo we want to have pre-defined cases like `as_is`, `throw`, and `to_null`, or do we want to allow the user to pass their own callable? The latter is implemented by the linked PR. Having both options is also a possibility.\r\n\r\nOverall, each combination of decisions has its advantages and drawbacks. Since I wasn't a part of such discussions before, I don't have a preference.\r\nAll I want is to see this feature get implemented, and I can create a PR once consensus is reached.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-115246\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "Dzeri96",
        "id": 13813363,
        "node_id": "MDQ6VXNlcjEzODEzMzYz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13813363?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Dzeri96",
        "html_url": "https://github.com/Dzeri96",
        "followers_url": "https://api.github.com/users/Dzeri96/followers",
        "following_url": "https://api.github.com/users/Dzeri96/following{/other_user}",
        "gists_url": "https://api.github.com/users/Dzeri96/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Dzeri96/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Dzeri96/subscriptions",
        "organizations_url": "https://api.github.com/users/Dzeri96/orgs",
        "repos_url": "https://api.github.com/users/Dzeri96/repos",
        "events_url": "https://api.github.com/users/Dzeri96/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Dzeri96/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/98306/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/98306/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/97909",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/97909/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/97909/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/97909/events",
      "html_url": "https://github.com/python/cpython/issues/97909",
      "id": 1397992865,
      "node_id": "I_kwDOBN0Z8c5TU62h",
      "number": 97909,
      "title": "Some C struct members are not marked up in docs",
      "user": {
        "login": "encukou",
        "id": 302922,
        "node_id": "MDQ6VXNlcjMwMjkyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/encukou",
        "html_url": "https://github.com/encukou",
        "followers_url": "https://api.github.com/users/encukou/followers",
        "following_url": "https://api.github.com/users/encukou/following{/other_user}",
        "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
        "organizations_url": "https://api.github.com/users/encukou/orgs",
        "repos_url": "https://api.github.com/users/encukou/repos",
        "events_url": "https://api.github.com/users/encukou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/encukou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 13,
      "created_at": "2022-10-05T15:30:53Z",
      "updated_at": "2024-07-31T20:26:12Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "The members of [PyMemberDef](https://docs.python.org/3/c-api/structures.html#c.PyMemberDef) aren't marked up as members, so they can't be linked to individually.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-100089\n* gh-100311\n* gh-100312\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "encukou",
        "id": 302922,
        "node_id": "MDQ6VXNlcjMwMjkyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/encukou",
        "html_url": "https://github.com/encukou",
        "followers_url": "https://api.github.com/users/encukou/followers",
        "following_url": "https://api.github.com/users/encukou/following{/other_user}",
        "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
        "organizations_url": "https://api.github.com/users/encukou/orgs",
        "repos_url": "https://api.github.com/users/encukou/repos",
        "events_url": "https://api.github.com/users/encukou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/encukou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/97909/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/97909/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/97847",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/97847/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/97847/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/97847/events",
      "html_url": "https://github.com/python/cpython/issues/97847",
      "id": 1396882329,
      "node_id": "I_kwDOBN0Z8c5TQruZ",
      "number": 97847,
      "title": "Misplaced or duplicated function descriptions in the multiprocessing documentation",
      "user": {
        "login": "geryogam",
        "id": 33548838,
        "node_id": "MDQ6VXNlcjMzNTQ4ODM4",
        "avatar_url": "https://avatars.githubusercontent.com/u/33548838?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/geryogam",
        "html_url": "https://github.com/geryogam",
        "followers_url": "https://api.github.com/users/geryogam/followers",
        "following_url": "https://api.github.com/users/geryogam/following{/other_user}",
        "gists_url": "https://api.github.com/users/geryogam/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/geryogam/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/geryogam/subscriptions",
        "organizations_url": "https://api.github.com/users/geryogam/orgs",
        "repos_url": "https://api.github.com/users/geryogam/repos",
        "events_url": "https://api.github.com/users/geryogam/events{/privacy}",
        "received_events_url": "https://api.github.com/users/geryogam/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4204725259,
          "node_id": "LA_kwDOBN0Z8c76nwQL",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-multiprocessing",
          "name": "topic-multiprocessing",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2022-10-04T21:48:53Z",
      "updated_at": "2023-03-04T19:09:20Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Documentation\r\n\r\nIn the [documentation](https://docs.python.org/3/library/multiprocessing.html) of the `multiprocessing` module, some public functions of the root module are undocumented but their submodule counterparts are (_misplaced_ information):\r\n\r\n- [`multiprocessing.RawValue`](https://github.com/python/cpython/blob/v3.11.0/Lib/multiprocessing/context.py#L122-L125) is undocumented but `multiprocessing.sharedctypes.RawValue` is [documented](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.sharedctypes.RawValue);\r\n- [`multiprocessing.RawArray`](https://github.com/python/cpython/blob/v3.11.0/Lib/multiprocessing/context.py#L127-L130) is undocumented but `multiprocessing.sharedctypes.RawArray` is [documented](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.sharedctypes.RawArray);\r\n- [`multiprocessing.Pool`](https://github.com/python/cpython/blob/v3.11.0/Lib/multiprocessing/context.py#L115-L120) is undocumented but `multiprocessing.pool.Pool` is [documented](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool).\r\n\r\nAnd some public functions of the root module are documented but also their submodule counterparts (_duplicated_ information):\r\n\r\n- [`multiprocessing.Value`](https://github.com/python/cpython/blob/v3.11.0/Lib/multiprocessing/context.py#L132-L136) is [documented](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Value) and `multiprocessing.sharedctypes.Value` is [documented](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.sharedctypes.Value);\r\n- [`multiprocessing.Array`](https://github.com/python/cpython/blob/v3.11.0/Lib/multiprocessing/context.py#L138-L142) is [documented](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Array) and `multiprocessing.sharedctypes.Array` is [documented](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.sharedctypes.Array).\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-31482\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/97847/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/97847/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/96821",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/96821/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/96821/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/96821/events",
      "html_url": "https://github.com/python/cpython/issues/96821",
      "id": 1372663498,
      "node_id": "I_kwDOBN0Z8c5R0S7K",
      "number": 96821,
      "title": "Enable `-fstrict-overflow`",
      "user": {
        "login": "matthiasgoergens",
        "id": 57026,
        "node_id": "MDQ6VXNlcjU3MDI2",
        "avatar_url": "https://avatars.githubusercontent.com/u/57026?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/matthiasgoergens",
        "html_url": "https://github.com/matthiasgoergens",
        "followers_url": "https://api.github.com/users/matthiasgoergens/followers",
        "following_url": "https://api.github.com/users/matthiasgoergens/following{/other_user}",
        "gists_url": "https://api.github.com/users/matthiasgoergens/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/matthiasgoergens/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/matthiasgoergens/subscriptions",
        "organizations_url": "https://api.github.com/users/matthiasgoergens/orgs",
        "repos_url": "https://api.github.com/users/matthiasgoergens/repos",
        "events_url": "https://api.github.com/users/matthiasgoergens/events{/privacy}",
        "received_events_url": "https://api.github.com/users/matthiasgoergens/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 13,
      "created_at": "2022-09-14T09:33:00Z",
      "updated_at": "2023-11-28T10:53:12Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "At the moment we compile releases with `-fwrapv` which makes the code a bit safer, but disables certain optimizations.  From the GCC docs:\r\n\r\n> This option instructs the compiler to assume that signed arithmetic overflow of addition, subtraction and multiplication wraps around using twos-complement representation. This flag enables some optimizations and disables others.\r\n\r\nMy [experiments with running sanitisers](https://github.com/python/cpython/issues/96678#issuecomment-1243499193) seem to suggest that we are nearly already ready for `-fno-wrapv` (or `-fstrict-overflow` in general).  Doing so could lead to quite a few speedups, but we would need to be more careful with the code we write.\r\n\r\nIt might be worthwhile to get a few benchmarks.\r\n\r\n(To be extra precise, we give `-fwrapv` for clang and gcc for any build that doesn't get `--with-pydebug`.)\r\n\r\n# Pitch\r\n\r\nMy plan right now is to adapt the build system so that only the modules that need it are build with `-fwrapv`, and the rest can be build with `-fstrict-overflow`.\r\n\r\nWe already have config machinery that can add specific `CFLAGS` for specific modules only.\r\n\r\nPerhaps the whole thing can be gated behind a configure flag, like `--with-strict-overflow`.\r\n\r\nIf everything goes well, and this improves performance we can consider adding this functionality to one of the standard optimization options.\r\n\r\nWe can also work on making more modules `-fstrict-overflow` safe.\r\n\r\n# Previous discussion\r\n\r\n@markshannon @ericsnowcurrently \r\n\r\nBrought up on https://github.com/faster-cpython/ideas/issues/458 and inspired by https://github.com/python/cpython/issues/96678\r\n\r\nSome previous issues around `-fwrapv`:\r\n\r\n* https://bugs.python.org/issue11149\r\n* https://bugs.python.org/issue1621\r\n* https://bugs.python.org/issue1608\r\n\r\nI'm sure there are more.\r\n\r\n# Progress so far\r\n\r\nAs far as is currently known, the three remaining modules that rely on defined integer overflow are fixed by:\r\n\r\n* `_struct`: https://github.com/python/cpython/pull/96739\r\n* `audioop`: https://github.com/python/cpython/pull/96923\r\n* `_ctypes`: https://github.com/python/cpython/pull/96925\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-96823\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/96821/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/96821/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/96803",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/96803/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/96803/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/96803/events",
      "html_url": "https://github.com/python/cpython/issues/96803",
      "id": 1371740221,
      "node_id": "I_kwDOBN0Z8c5Rwxg9",
      "number": 96803,
      "title": "Expose _PyInterpreterFrame_GetLine in the private API",
      "user": {
        "login": "pablogsal",
        "id": 11718525,
        "node_id": "MDQ6VXNlcjExNzE4NTI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablogsal",
        "html_url": "https://github.com/pablogsal",
        "followers_url": "https://api.github.com/users/pablogsal/followers",
        "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
        "organizations_url": "https://api.github.com/users/pablogsal/orgs",
        "repos_url": "https://api.github.com/users/pablogsal/repos",
        "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pablogsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 13,
      "created_at": "2022-09-13T16:52:05Z",
      "updated_at": "2023-11-26T11:46:07Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "In 3.11 we are using now an opaque pointer to `_PyInterpreterFrame` in the eval function. The problem is that for PEP 523's APIs, we changed the type of `_PyFrameEvalFunction` to be `PyObject *(*_PyFrameEvalFunction)(PyThreadState *tstate, _PyInterpreterFrame *frame, int throwflag)` but there is no way to do anything with `_PyInterpreterFrame` because is opaque. Even if the extension defines `PY_BUILD_CORE` the symbols are not exposed in the executable/libpython, which means that including the headers is insufficient.\r\n\r\nThis is a problem because it really limits what users of PEP 523 can do with the frame object that they receive, even if is opaque. Most profilers using PEP 523 API do it for speed reasons and the only thing they need is to get the line number, but that is now impossible because the pointer is opaque and we don't offer any exposed APIs.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-96849\n* gh-104211\n* gh-107188\n* gh-107195\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/96803/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/96803/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/95748",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/95748/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/95748/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/95748/events",
      "html_url": "https://github.com/python/cpython/issues/95748",
      "id": 1330837509,
      "node_id": "I_kwDOBN0Z8c5PUvgF",
      "number": 95748,
      "title": "logging.captureWarnings(True) doesn't show object allocation (-X tracemalloc)",
      "user": {
        "login": "Jackenmen",
        "id": 6032823,
        "node_id": "MDQ6VXNlcjYwMzI4MjM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6032823?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Jackenmen",
        "html_url": "https://github.com/Jackenmen",
        "followers_url": "https://api.github.com/users/Jackenmen/followers",
        "following_url": "https://api.github.com/users/Jackenmen/following{/other_user}",
        "gists_url": "https://api.github.com/users/Jackenmen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Jackenmen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Jackenmen/subscriptions",
        "organizations_url": "https://api.github.com/users/Jackenmen/orgs",
        "repos_url": "https://api.github.com/users/Jackenmen/repos",
        "events_url": "https://api.github.com/users/Jackenmen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Jackenmen/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2022-08-06T20:00:42Z",
      "updated_at": "2024-07-14T10:34:41Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "# Bug report\r\n\r\nWhen using `logging.captureWarnings(True)`, the information about object allocation that you *should get* with `-X tracemalloc` gets lost.\r\n\r\nIt appears to be a discrepancy between Python and C implementation of the warnings module? `source` isn't passed to the created `WarningMessage` object in the `Lib/warnings.py`:\r\nhttps://github.com/python/cpython/blob/a17cd47b614f8bc660788647a009a25e121221d7/Lib/warnings.py#L12\r\nhttps://github.com/python/cpython/blob/a17cd47b614f8bc660788647a009a25e121221d7/Lib/warnings.py#L17\r\nhttps://github.com/python/cpython/blob/a17cd47b614f8bc660788647a009a25e121221d7/Lib/warnings.py#L394\r\nwhile it is in `Python/_warnings.c`:\r\nhttps://github.com/python/cpython/blob/a17cd47b614f8bc660788647a009a25e121221d7/Python/_warnings.c#L593-L605\r\n\r\nReproduction steps:\r\n1. Create a file `repro.py` with contents:\r\n```py\r\nimport logging\r\nimport tempfile\r\nimport warnings\r\n\r\nwarnings.simplefilter(\"default\", category=ResourceWarning)\r\nlogging.basicConfig()\r\n\r\n\r\nprint(\"--- UNCAPTURED WARNING ---\")\r\nfile = tempfile.SpooledTemporaryFile(1)\r\nfile.write(b\"foo\")\r\nfile = None\r\n\r\nprint(\"\\n--- CAPTURED WARNING ---\")\r\nlogging.captureWarnings(True)\r\nfile = tempfile.SpooledTemporaryFile(1)\r\nfile.write(b\"foo\")\r\nfile = None\r\n```\r\n2. Run `python -X tracemalloc=5`\r\n3. See that output only contains object allocation traceback for uncaptured warning:\r\n```\r\n--- UNCAPTURED WARNING ---\r\n/tmp/test_tracemallo/repro.py:12: ResourceWarning: unclosed file <_io.BufferedRandom name=3>\r\n  file = None\r\nObject allocated at (most recent call last):\r\n  File \"/tmp/test_tracemallo/repro.py\", lineno 11\r\n    file.write(b\"foo\")\r\n  File \"/usr/lib/python3.10/tempfile.py\", lineno 911\r\n    self._check(file)\r\n  File \"/usr/lib/python3.10/tempfile.py\", lineno 807\r\n    self.rollover()\r\n  File \"/usr/lib/python3.10/tempfile.py\", lineno 812\r\n    newfile = self._file = TemporaryFile(**self._TemporaryFileArgs)\r\n  File \"/usr/lib/python3.10/tempfile.py\", lineno 760\r\n    return _io.open(fd, mode, buffering=buffering,\r\n\r\n--- CAPTURED WARNING ---\r\nWARNING:py.warnings:/tmp/test_tracemallo/repro.py:18: ResourceWarning: unclosed file <_io.BufferedRandom name=3>\r\n  file = None\r\n```\r\n\r\n# Your environment\r\n\r\n- CPython versions tested on: 3.7.13, 3.8.13, 3.9.13 (installed from deadsnakes ppa), 3.10.4 (system Python)\r\n- Operating system and architecture: Ubuntu 22.04\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-111451\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/95748/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/95748/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/95377",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/95377/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/95377/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/95377/events",
      "html_url": "https://github.com/python/cpython/issues/95377",
      "id": 1320847633,
      "node_id": "I_kwDOBN0Z8c5OuokR",
      "number": 95377,
      "title": "Incorrect information in add_subparser() docs. ",
      "user": {
        "login": "JCrane512",
        "id": 93589198,
        "node_id": "U_kgDOBZQOzg",
        "avatar_url": "https://avatars.githubusercontent.com/u/93589198?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JCrane512",
        "html_url": "https://github.com/JCrane512",
        "followers_url": "https://api.github.com/users/JCrane512/followers",
        "following_url": "https://api.github.com/users/JCrane512/following{/other_user}",
        "gists_url": "https://api.github.com/users/JCrane512/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JCrane512/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JCrane512/subscriptions",
        "organizations_url": "https://api.github.com/users/JCrane512/orgs",
        "repos_url": "https://api.github.com/users/JCrane512/repos",
        "events_url": "https://api.github.com/users/JCrane512/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JCrane512/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2022-07-28T12:18:47Z",
      "updated_at": "2022-12-24T00:33:03Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# Documentation\r\n\r\nWhen setting the flag `required=true` for the function `ArgumentParser.add_subparsers()` the setting `dest=\" some description\"` also needs to be set or the parser throws an unhelpful error when the user fails to select a subparser. \r\n\r\nThis is not covered in the documentation. \n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-95490\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/95377/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/95377/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/94155",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/94155/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/94155/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/94155/events",
      "html_url": "https://github.com/python/cpython/issues/94155",
      "id": 1281684669,
      "node_id": "I_kwDOBN0Z8c5MZPS9",
      "number": 94155,
      "title": "Specializing adaptive interpreter code object hashes are less unique",
      "user": {
        "login": "larryhastings",
        "id": 14175923,
        "node_id": "MDQ6VXNlcjE0MTc1OTIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/14175923?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/larryhastings",
        "html_url": "https://github.com/larryhastings",
        "followers_url": "https://api.github.com/users/larryhastings/followers",
        "following_url": "https://api.github.com/users/larryhastings/following{/other_user}",
        "gists_url": "https://api.github.com/users/larryhastings/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/larryhastings/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/larryhastings/subscriptions",
        "organizations_url": "https://api.github.com/users/larryhastings/orgs",
        "repos_url": "https://api.github.com/users/larryhastings/repos",
        "events_url": "https://api.github.com/users/larryhastings/events{/privacy}",
        "received_events_url": "https://api.github.com/users/larryhastings/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2022-06-23T04:01:32Z",
      "updated_at": "2023-11-28T00:04:28Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "In Python 3.11 and 3.12, the hash function for a `PyCodeObject` (`code_hash()`) no longer hashes the bytecode.  I assume this is because the specializing adaptive interpreter can change the bytecode however it likes, which means the bytecode is no longer immutable, which means you can't rely on it not changing, which means you can't use it as part of calculating the hash.  Fair enough.\r\n\r\nBut this means that the hash of a code object no longer factors in the most unique part of a code object.  Currently in 3.11 and 3.12 the hash of a code object is calculated using:\r\n\r\n- the unqualified name of the callable\r\n- the code object's const table (a tuple of immutable objects)\r\n- the code object's tuple of externally-referenced names (globals, nonlocals)\r\n- the code object's tuple of locally-referenced names (parameters, local variables, and closures)\r\n- the total number of arguments\r\n- the count of positional-only arguments\r\n- the count of keyword-only arguments\r\n- the \"flags\" for this code object\r\n\r\nWhich means it's not hard to construct code objects with identical hashes but different bytecode.  For example:\r\n\r\n```Python\r\nclass A:\r\n    def method(self, a, b):\r\n        return a + b\r\n\r\nclass B:\r\n    def method(self, a, b):\r\n        return a * b\r\n\r\nclass C:\r\n    def method(self, a, b):\r\n        return a / b\r\n\r\n\r\nfor cls in (A, B, C):\r\n    o = cls()\r\n    print(o.method(3, 5))\r\n    print(hex(hash(cls.method.__code__)))\r\n```\r\n\r\nThe hashes for for `A.method.__code__`, `B.method.__code__`, and `C.method.__code__` are different in Python 3.10, but identical in Python 3.11b3, and presumably in trunk as well.\r\n\r\nIs this scenario realistic?  I don't know.  Certainly I've never seen it.  But it's at least _plausible;_ a base class could have a tiny function that only does a little work, and a subclass could override that function and tweak the work done slightly, without relying on additional external names / closures or employing a different list of locals.  It's certainly not impossible.\r\n\r\nObviously this is low priority--there's very little code that hashes code objects.  It might cause some collisions and probing when marshal dumps a module exhibiting this behavior, because marshal maintains a hash table of the objects it writes.  That's the worst side-effect I can think up.\r\n\r\nWe could mitigate this slightly by factoring in more values into the code object's hash.  Three come immediately to mind:\r\n\r\n- the filename (`co_filename`)\r\n- the first line number (`co_firstlineno`)\r\n- the first column number (which I'm guessing is encoded in `co_positions` somehow)\r\n\r\nWith only the first two, you'd still have hash collisions from code objects defined using lambdas all on the same line:\r\n```Python\r\n\r\na, b, c = (lambda a, b: a + b), (lambda a, b: a * b), (lambda a, b: a / b)\r\n\r\nfor l in (a, b, c):\r\n    print(l(3, 5))\r\n    print(hex(hash(l.__code__)))\r\n```\r\n\r\nAs unlikely as it is that someone would stumble over this scenario, it's even _less_ likely that it would cause a problem.  But decreasing the likelihood of hash value collisions seems so wholesome and good, I think it's worth pursuing.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-100183\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/94155/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/94155/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/93533",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/93533/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/93533/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/93533/events",
      "html_url": "https://github.com/python/cpython/issues/93533",
      "id": 1261699969,
      "node_id": "I_kwDOBN0Z8c5LNAOB",
      "number": 93533,
      "title": "The inline cache for `LOAD_ATTR` is too large.",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2022-06-06T11:13:09Z",
      "updated_at": "2023-11-24T22:03:55Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "The inline cache for `LOAD_METHOD` takes 10 code units, which is considerably larger than other inline caches, and is an obstacle to merging `LOAD_ATTR` and `LOAD_METHOD` (https://github.com/python/cpython/pull/93430), as `LOAD_ATTR` is such a common instruction.\r\n\r\nSee https://github.com/faster-cpython/ideas/discussions/396 for some ideas on how to shrink the inline cache.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-103014\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/93533/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/93533/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/93516",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/93516/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/93516/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/93516/events",
      "html_url": "https://github.com/python/cpython/issues/93516",
      "id": 1261036332,
      "node_id": "I_kwDOBN0Z8c5LKeMs",
      "number": 93516,
      "title": "Severe performance degradation for tracing under 3.11",
      "user": {
        "login": "nedbat",
        "id": 23789,
        "node_id": "MDQ6VXNlcjIzNzg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/23789?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nedbat",
        "html_url": "https://github.com/nedbat",
        "followers_url": "https://api.github.com/users/nedbat/followers",
        "following_url": "https://api.github.com/users/nedbat/following{/other_user}",
        "gists_url": "https://api.github.com/users/nedbat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nedbat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nedbat/subscriptions",
        "organizations_url": "https://api.github.com/users/nedbat/orgs",
        "repos_url": "https://api.github.com/users/nedbat/repos",
        "events_url": "https://api.github.com/users/nedbat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nedbat/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "markshannon",
          "id": 9448417,
          "node_id": "MDQ6VXNlcjk0NDg0MTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/markshannon",
          "html_url": "https://github.com/markshannon",
          "followers_url": "https://api.github.com/users/markshannon/followers",
          "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
          "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
          "organizations_url": "https://api.github.com/users/markshannon/orgs",
          "repos_url": "https://api.github.com/users/markshannon/repos",
          "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/markshannon/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 59,
      "created_at": "2022-06-05T12:21:38Z",
      "updated_at": "2023-11-24T20:06:18Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "<!--\r\n  If you're new to Python and you're not sure whether what you're experiencing is a bug, the CPython issue tracker is not\r\n  the right place to seek help. Consider the following options instead:\r\n\r\n  - reading the Python tutorial: https://docs.python.org/3/tutorial/\r\n  - posting in the \"Users\" category on discuss.python.org: https://discuss.python.org/c/users/7\r\n  - emailing the Python-list mailing list: https://mail.python.org/mailman/listinfo/python-list\r\n  - searching our issue tracker (https://github.com/python/cpython/issues) to see if\r\n    your problem has already been reported\r\n-->\r\n\r\n**Bug report**\r\n\r\nCoverage.py is seeing a significant increase in overhead for tracing code in 3.11 compared to 3.10: https://github.com/nedbat/coveragepy/issues/1287\r\n\r\nAs an example:\r\n\r\n| cov | proj | python3.10 | python3.11 | 3.11 vs 3.10 |\r\n|----|----|----|----|----|\r\n| none | bug1339.py | 0.184 s | 0.142 s | 76% |\r\n| none | bm_sudoku.py | 10.789 s | 9.901 s | 91% |\r\n| none | bm_spectral_norm.py | 14.305 s | 9.185 s | 64% |\r\n| 6.4.1 | bug1339.py | 0.450 s | 0.854 s | 189% |\r\n| 6.4.1 | bm_sudoku.py | 27.141 s | 55.504 s | 204% |\r\n| 6.4.1 | bm_spectral_norm.py | 36.793 s | 67.970 s | 184% |\r\n\r\n(This is the output of [lab/benchmark.py](https://github.com/nedbat/coveragepy/blob/master/lab/benchmark.py).)\r\n\r\n**Your environment**\r\n\r\n<!-- Include as many relevant details as possible about the environment you experienced the bug in -->\r\n\r\n- CPython versions tested on: 3.10, 3.11 \r\n- Operating system and architecture: MacOS, Intel\r\n\r\n<!--\r\nYou can freely edit this text. Remove any lines you believe are unnecessary.\r\n-->\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-108028\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/93516/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/93516/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/93502",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/93502/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/93502/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/93502/events",
      "html_url": "https://github.com/python/cpython/issues/93502",
      "id": 1260918194,
      "node_id": "I_kwDOBN0Z8c5LKBWy",
      "number": 93502,
      "title": "Expose tracemalloc hook into `_Py_NewReference` for other tracers",
      "user": {
        "login": "pablogsal",
        "id": 11718525,
        "node_id": "MDQ6VXNlcjExNzE4NTI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablogsal",
        "html_url": "https://github.com/pablogsal",
        "followers_url": "https://api.github.com/users/pablogsal/followers",
        "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
        "organizations_url": "https://api.github.com/users/pablogsal/orgs",
        "repos_url": "https://api.github.com/users/pablogsal/repos",
        "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pablogsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 14,
      "created_at": "2022-06-05T00:00:04Z",
      "updated_at": "2024-05-31T15:50:43Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "When new objects are created, the allocation code ends calling into `_Py_NewReference` (with some exceptions). `tracemalloc` has a hook into this function to correlate allocations and traces (that do not know anything about objects or references) with newly created objects. This happens here:\r\n\r\nhttps://github.com/python/cpython/blob/3d647e70cf4fd0e7cef68ed6662de3cb2cb0d63d/Objects/object.c#L2018-L2020\r\n\r\nThis allows `tracemalloc` to be able to return the traceback where objects where allocated, which is great. Unfortunately other debuggers and profilers do not have this capability as there is no way to leverage trace malloc functionality or to hook into object creation.\r\n\r\nI propose to expose an API (unclear what layer of the C-API this should be in) where callbacks can be registered to be called in `_Py_NewReference` and switch tracemalloc to use this API.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-115945\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/93502/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/93502/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/92347",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/92347/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/92347/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/92347/events",
      "html_url": "https://github.com/python/cpython/issues/92347",
      "id": 1227096426,
      "node_id": "I_kwDOBN0Z8c5JJAFq",
      "number": 92347,
      "title": "Iterating over ctypes pointer causes hang or segmentation fault",
      "user": {
        "login": "chgnrdv",
        "id": 52372310,
        "node_id": "MDQ6VXNlcjUyMzcyMzEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/52372310?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chgnrdv",
        "html_url": "https://github.com/chgnrdv",
        "followers_url": "https://api.github.com/users/chgnrdv/followers",
        "following_url": "https://api.github.com/users/chgnrdv/following{/other_user}",
        "gists_url": "https://api.github.com/users/chgnrdv/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/chgnrdv/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chgnrdv/subscriptions",
        "organizations_url": "https://api.github.com/users/chgnrdv/orgs",
        "repos_url": "https://api.github.com/users/chgnrdv/repos",
        "events_url": "https://api.github.com/users/chgnrdv/events{/privacy}",
        "received_events_url": "https://api.github.com/users/chgnrdv/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 2211400743,
          "node_id": "MDU6TGFiZWwyMjExNDAwNzQz",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-ctypes",
          "name": "topic-ctypes",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2022-05-05T19:34:50Z",
      "updated_at": "2024-11-02T03:14:54Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "Trying to create iterable (`list`, `tuple`, `set` etc.) from `PyCPointer` instance leads to hang or segmentation fault.\r\nThis code causes hang and memory leak which goes until oom-killer kills python process:\r\n```\r\nimport ctypes\r\nx = ctypes.c_int32(12345)\r\nbuf4_p_t = ctypes.POINTER(ctypes.ARRAY(ctypes.c_byte, 4))\r\nbuf_p = ctypes.cast(ctypes.byref(x), buf4_p_t)\r\nlist(buf_p)\r\n```\r\nSimilar code that causes segmentation fault:\r\n```\r\nimport ctypes\r\nx = ctypes.c_int32(54321)\r\nxp = ctypes.pointer(x)\r\nlist(xp)\r\n```\r\nIterating over pointer using `for` statement leads to an infinite loop:\r\n`for i in buf_p: print(i)`\r\n`for i in xp: print(i)`\r\n`list(for i in buf_p)`\r\n\r\nTried on 3.10.3 and 3.11.0a6+, fails at both. \r\n\r\nThe possible reason is that `PyCPointer_Type` defines `sq_item` without defining `tp_iter`. \r\nDespite I can't imagine any reason why anyone might need to use pointer as iterable/sequence, raising `TypeError` in such situation would be a better option.\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-126318\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/92347/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/92347/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/91912",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/91912/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/91912/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/91912/events",
      "html_url": "https://github.com/python/cpython/issues/91912",
      "id": 1214621939,
      "node_id": "I_kwDOBN0Z8c5IZajz",
      "number": 91912,
      "title": "Free list for longobject medium value",
      "user": {
        "login": "penguin-wwy",
        "id": 15888598,
        "node_id": "MDQ6VXNlcjE1ODg4NTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/15888598?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/penguin-wwy",
        "html_url": "https://github.com/penguin-wwy",
        "followers_url": "https://api.github.com/users/penguin-wwy/followers",
        "following_url": "https://api.github.com/users/penguin-wwy/following{/other_user}",
        "gists_url": "https://api.github.com/users/penguin-wwy/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/penguin-wwy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/penguin-wwy/subscriptions",
        "organizations_url": "https://api.github.com/users/penguin-wwy/orgs",
        "repos_url": "https://api.github.com/users/penguin-wwy/repos",
        "events_url": "https://api.github.com/users/penguin-wwy/events{/privacy}",
        "received_events_url": "https://api.github.com/users/penguin-wwy/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2022-04-25T14:46:43Z",
      "updated_at": "2023-11-27T17:30:40Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "https://github.com/python/cpython/blob/93d280141c369fd1906569ff605148b6e22f6a43/Objects/longobject.c#L194-L204\r\n\r\nMedium value needs to be allocated and deallocated very frequently.\r\n\r\nI tested under different `numfree` and showed that `freelist` can improve performance.\r\n\r\n```\r\n./main/bin/python3 -m pyperf compare_to --min-speed 5 -G --table --table-format md main.json free_list100.json \r\n```\r\n| Benchmark      | main    | numfree 100          |\r\n|----------------|:-------:|:---------------------:|\r\n| spectral_norm  | 112 ms  | 96.7 ms: 1.16x faster |\r\n| json_loads     | 29.8 us | 25.9 us: 1.15x faster |\r\n| logging_silent | 112 ns  | 102 ns: 1.10x faster  |\r\n| regex_v8       | 25.4 ms | 23.7 ms: 1.07x faster |\r\n| mako           | 10.6 ms | 10.1 ms: 1.06x faster |\r\n| pyflate        | 454 ms  | 430 ms: 1.06x faster  |\r\n| regex_dna      | 228 ms  | 217 ms: 1.05x faster  |\r\n| crypto_pyaes   | 87.0 ms | 91.6 ms: 1.05x slower |\r\n| chaos          | 76.6 ms | 82.4 ms: 1.08x slower |\r\n| Geometric mean | (ref)   | 1.01x faster          |\r\n\r\n./main/bin/python3 -m pyperf compare_to --min-speed 5 -G --table --table-format md main.json free_list500.json \r\n| Benchmark               | main    | numfree 500          |\r\n|-------------------------|:-------:|:---------------------:|\r\n| json_loads              | 29.8 us | 26.3 us: 1.13x faster |\r\n| regex_v8                | 25.4 ms | 23.5 ms: 1.08x faster |\r\n| scimark_sparse_mat_mult | 4.63 ms | 4.34 ms: 1.07x faster |\r\n| spectral_norm           | 112 ms  | 106 ms: 1.06x faster  |\r\n| scimark_fft             | 361 ms  | 343 ms: 1.05x faster  |\r\n| regex_dna               | 228 ms  | 217 ms: 1.05x faster  |\r\n| scimark_lu              | 105 ms  | 112 ms: 1.07x slower  |\r\n| crypto_pyaes            | 87.0 ms | 95.3 ms: 1.10x slower |\r\n| Geometric mean          | (ref)   | 1.00x faster          |\r\n\r\n./main/bin/python3 -m pyperf compare_to --min-speed 5 -G --table --table-format md main.json free_list1000.json \r\n| Benchmark               | main    | numfree 1000         |\r\n|-------------------------|:-------:|:---------------------:|\r\n| regex_dna               | 228 ms  | 184 ms: 1.24x faster  |\r\n| spectral_norm           | 112 ms  | 96.9 ms: 1.16x faster |\r\n| json_loads              | 29.8 us | 26.2 us: 1.13x faster |\r\n| scimark_sparse_mat_mult | 4.63 ms | 4.17 ms: 1.11x faster |\r\n| scimark_sor             | 129 ms  | 121 ms: 1.07x faster  |\r\n| regex_effbot            | 3.02 ms | 2.82 ms: 1.07x faster |\r\n| scimark_fft             | 361 ms  | 341 ms: 1.06x faster  |\r\n| pickle_dict             | 30.4 us | 28.8 us: 1.06x faster |\r\n| logging_silent          | 112 ns  | 106 ns: 1.06x faster  |\r\n| telco                   | 7.23 ms | 6.85 ms: 1.06x faster |\r\n| crypto_pyaes            | 87.0 ms | 99.0 ms: 1.14x slower |\r\n| Geometric mean          | (ref)   | 1.02x faster          |\r\n\r\nThe current results show that a `numfree` of 1000 can speed 2% in the pyperformance benchmark. In memory, medium value need `sizeof(PyLongObject) + 4`. In the worst case, every thread may have to pay about 36k of extra memory(if `numfree == 1000`)\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-91938\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "penguin-wwy",
        "id": 15888598,
        "node_id": "MDQ6VXNlcjE1ODg4NTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/15888598?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/penguin-wwy",
        "html_url": "https://github.com/penguin-wwy",
        "followers_url": "https://api.github.com/users/penguin-wwy/followers",
        "following_url": "https://api.github.com/users/penguin-wwy/following{/other_user}",
        "gists_url": "https://api.github.com/users/penguin-wwy/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/penguin-wwy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/penguin-wwy/subscriptions",
        "organizations_url": "https://api.github.com/users/penguin-wwy/orgs",
        "repos_url": "https://api.github.com/users/penguin-wwy/repos",
        "events_url": "https://api.github.com/users/penguin-wwy/events{/privacy}",
        "received_events_url": "https://api.github.com/users/penguin-wwy/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/91912/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/91912/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/91602",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/91602/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/91602/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/91602/events",
      "html_url": "https://github.com/python/cpython/issues/91602",
      "id": 1206075927,
      "node_id": "I_kwDOBN0Z8c5H40IX",
      "number": 91602,
      "title": "dump of a single table in sqlite3 library",
      "user": {
        "login": "WolfgangFahl",
        "id": 1336221,
        "node_id": "MDQ6VXNlcjEzMzYyMjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1336221?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/WolfgangFahl",
        "html_url": "https://github.com/WolfgangFahl",
        "followers_url": "https://api.github.com/users/WolfgangFahl/followers",
        "following_url": "https://api.github.com/users/WolfgangFahl/following{/other_user}",
        "gists_url": "https://api.github.com/users/WolfgangFahl/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/WolfgangFahl/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/WolfgangFahl/subscriptions",
        "organizations_url": "https://api.github.com/users/WolfgangFahl/orgs",
        "repos_url": "https://api.github.com/users/WolfgangFahl/repos",
        "events_url": "https://api.github.com/users/WolfgangFahl/events{/privacy}",
        "received_events_url": "https://api.github.com/users/WolfgangFahl/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4137378777,
          "node_id": "LA_kwDOBN0Z8c72m2PZ",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-sqlite3",
          "name": "topic-sqlite3",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 19,
      "created_at": "2022-04-16T10:14:51Z",
      "updated_at": "2024-02-21T12:51:58Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "**Feature or enhancement**\r\n\r\n_I would like to dump only one table but by the looks of it, there is no parameter for this._\r\nsee https://stackoverflow.com/questions/6677540/how-do-i-dump-a-single-sqlite3-table-in-python\r\n\r\n\r\n**Pitch**\r\nCopying tables is much easier  when a dump per table is available.\r\n\r\n**Previous discussion**\r\nhttps://stackoverflow.com/a/6677833/1497139 already suggested a code change in stackoverflow in 2011. I think it just never made it as a feature request here.\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-114501\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/91602/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/91602/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/91533",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/91533/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/91533/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/91533/events",
      "html_url": "https://github.com/python/cpython/issues/91533",
      "id": 1204502006,
      "node_id": "I_kwDOBN0Z8c5Hyz32",
      "number": 91533,
      "title": "Proposal: Convert the `typing`-module PEPs into a series of HOWTOs",
      "user": {
        "login": "AlexWaygood",
        "id": 66076021,
        "node_id": "MDQ6VXNlcjY2MDc2MDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/66076021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AlexWaygood",
        "html_url": "https://github.com/AlexWaygood",
        "followers_url": "https://api.github.com/users/AlexWaygood/followers",
        "following_url": "https://api.github.com/users/AlexWaygood/following{/other_user}",
        "gists_url": "https://api.github.com/users/AlexWaygood/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/AlexWaygood/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AlexWaygood/subscriptions",
        "organizations_url": "https://api.github.com/users/AlexWaygood/orgs",
        "repos_url": "https://api.github.com/users/AlexWaygood/repos",
        "events_url": "https://api.github.com/users/AlexWaygood/events{/privacy}",
        "received_events_url": "https://api.github.com/users/AlexWaygood/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4030784939,
          "node_id": "LA_kwDOBN0Z8c7wQOWr",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-typing",
          "name": "topic-typing",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "AlexWaygood",
        "id": 66076021,
        "node_id": "MDQ6VXNlcjY2MDc2MDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/66076021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AlexWaygood",
        "html_url": "https://github.com/AlexWaygood",
        "followers_url": "https://api.github.com/users/AlexWaygood/followers",
        "following_url": "https://api.github.com/users/AlexWaygood/following{/other_user}",
        "gists_url": "https://api.github.com/users/AlexWaygood/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/AlexWaygood/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AlexWaygood/subscriptions",
        "organizations_url": "https://api.github.com/users/AlexWaygood/orgs",
        "repos_url": "https://api.github.com/users/AlexWaygood/repos",
        "events_url": "https://api.github.com/users/AlexWaygood/events{/privacy}",
        "received_events_url": "https://api.github.com/users/AlexWaygood/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "AlexWaygood",
          "id": 66076021,
          "node_id": "MDQ6VXNlcjY2MDc2MDIx",
          "avatar_url": "https://avatars.githubusercontent.com/u/66076021?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/AlexWaygood",
          "html_url": "https://github.com/AlexWaygood",
          "followers_url": "https://api.github.com/users/AlexWaygood/followers",
          "following_url": "https://api.github.com/users/AlexWaygood/following{/other_user}",
          "gists_url": "https://api.github.com/users/AlexWaygood/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/AlexWaygood/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/AlexWaygood/subscriptions",
          "organizations_url": "https://api.github.com/users/AlexWaygood/orgs",
          "repos_url": "https://api.github.com/users/AlexWaygood/repos",
          "events_url": "https://api.github.com/users/AlexWaygood/events{/privacy}",
          "received_events_url": "https://api.github.com/users/AlexWaygood/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 23,
      "created_at": "2022-04-14T13:02:10Z",
      "updated_at": "2023-06-15T13:08:08Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "## Problem description\r\n\r\nThe `typing` module docs have a problem.\r\n\r\n`typing.rst` is littered with references to the many typing-related PEPs that have been accepted by the Steering Council. Often these references to PEPs are used in lieu of detailed examples or explanation as to how a feature is supposed to work.\r\n\r\nHowever, PEPs [are not supposed](https://github.com/python/cpython/pull/32103#issuecomment-1085125763) to be living pieces of documentation. As such, proposals to update old typing PEPs to reflect changes in implementation details [have been rejected](https://github.com/python/peps/issues/2199). But when these PEPs are the closest thing we have to a full Python-typing specification, this means that our specifications are slowly growing out of date.\r\n\r\nThis unfortunate situation has also been recognised by the Steering Council in a [recent email to the typing-sig mailing list](https://mail.python.org/archives/list/typing-sig@python.org/thread/TVMQJXOJFOYFPDMQDFG6G4B6J3MLRYKB/).\r\n\r\n## Proposed solution\r\n\r\nI propose that we slowly start to convert various typing PEPs into a series of Python-typing HOWTOs. In this way, we'd follow the example of other modules such as [`enum`](https://docs.python.org/3.11/howto/enum.html) or [`socket`](https://docs.python.org/3/howto/sockets.html). These modules have terse API references in [`socket.rst`](https://docs.python.org/3/library/socket.html) and [`enum.rst`](https://www.google.com/search?client=opera&q=python+typing&sourceid=opera&ie=UTF-8&oe=UTF-8), but these API references are supplemented with expansive HOWTOs that serve as a guide for users who are new to the respective modules. Given the number of typing PEPs, the scale of the task for typing will be larger; but I still believe that this is a good example to follow.\r\n\r\nSpecifically, I think we should have something like the following structure:\r\n\r\n1. \"Introduction to type hints in Python\". This HOWTO would combine material from the following sources (updating examples where relevant to use modern syntax such as PEP-604 union types).\r\n    1. PEPs 483 & 484 (introducing type hints to Python)\r\n    2. PEP 526 (syntax for variable annotations, `ClassVar`)\r\n    3. PEP 613 (explicit type aliases)\r\n    5. PEP 673 (`typing.Self`)\r\n    6. The sections in `typing.rst` on `Any`, `Callable` and type aliases.\r\n    7. Some of the material in `typing.rst` on `TypeVar` and generics (but only the most basic material).\r\n2.  \"Generics HOWTO\". While the intro HOWTO would introduce the basic concept of TypeVars, this HOWTO would tackle the nitty-gritty:\r\n    1. Using `typing.Generic` to make generic classes.\r\n    2. The differences between bound TypeVars, constrained TypeVars, and TypeVars which are neither.\r\n    3. Covariance versus contravariance versus invariance.\r\n    4. Maybe a brief mention of PEP 585 (generic stdlib collections).\r\n    5. `ParamSpec` and `Concatenate` (material from PEP 612).\r\n    6. Variadic generics (material from PEP 646).\r\n4. \"Structural subtyping HOWTO\", using material from PEP 544 and the section in `typing.rst` on structural subtyping and `typing.Protocol`.\r\n5. \"TypedDict HOWTO\", using material from PEPs 589 & 655, as well as the section on `TypedDict` in `typing.rst`.\r\n6. \"Literal types HOWTO\", describing how to use PEPs 586 (`typing.Literal`) & 675 (`typing.LiteralString`).\r\n\r\nDue to the brevity of their PEPs, and the fact that they don't really \"fit in\" neatly with any of the other proposed HOWTOs, I propose that the following typing features have their full specifications integrated into the `typing.rst` API reference, rather than having dedicated HOWTOs:\r\n1. \"`Final`/`@final` (PEP 581)\r\n2. `Annotated` (PEP 593)\r\n3. `TypeGuard` (PEP 647)\r\n\r\n## Why not have this information at typing.readthedocs.io?\r\n\r\nThere's an ongoing effort, spearheaded by @srittau among others, to include a body of `typing` documentation at https://typing.readthedocs.io/en/latest/. I am fully in support of this effort, and see the documentation there as complementary to the documentation that currently lives in the `typing` PEPs. However, I do not believe that the documentation currently in the `typing` PEPs should belong on that site, for several reasons:\r\n\r\n- https://typing.readthedocs.io/en/latest/ is a third-party site, rather than being an \"official\" corpus of Python-language documentation. This is a good thing -- it allows contributors to that site to iterate and improve on the documentation there at a more rapid pace. However, the information in the `typing` PEPs are officially recognised changes to the language and the language's typing framework. As such, -- in my opinion -- it should live in the central docs.python.org documentation along with the documentation for the rest of the language.\r\n- https://typing.readthedocs.io/en/latest/ is currently not particularly discoverable via search engines. For example, it does not appear in the first page of [Google results for \"Python typing\"](https://www.google.com/search?client=opera&q=python+typing&sourceid=opera&ie=UTF-8&oe=UTF-8).\r\n\r\n## Questions to be discussed\r\n\r\n1. What do we think of the general idea of moving material out of PEPs, providing specifications through a series of HOWTOs, and slimming down `typing.rst` into a terser API reference?\r\n2. What do we think of my specific proposal for how to structure this series of HOWTOs?\r\n\r\n## Copied to:\r\n\r\n- `typing` module maintainers: @gvanrossum, @Fidget-Spinner, @JelleZijlstra\r\n- @srittau, who does a lot of valuable work on typing documentation over at the https://github.com/python/typing repo.\r\n- @hauntsaninja, who recently expressed interest in helping with typing docs.\r\n- Several miscellaneous typing-PEP authors who may be interested in this proposal: @ambv, @JukkaL, @ilevkivskyi, @mrkmndz, @pradeep90, @Gobot1234, @mrahtz, @davidfstr, @erictraut\r\n- @encukou, who recently sent the email to typing-sig on this topic on behalf of the Steering Council, and is also a member of the docs working group.\r\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-105827\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/91533/reactions",
        "total_count": 20,
        "+1": 14,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 2,
        "rocket": 4,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/91533/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/91371",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/91371/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/91371/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/91371/events",
      "html_url": "https://github.com/python/cpython/issues/91371",
      "id": 1199078193,
      "node_id": "I_kwDOBN0Z8c5HeHsx",
      "number": 91371,
      "title": "Add \"unstable\" frame stack api",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4019060898,
          "node_id": "LA_kwDOBN0Z8c7vjgCi",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-C-API",
          "name": "topic-C-API",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
        {
          "login": "markshannon",
          "id": 9448417,
          "node_id": "MDQ6VXNlcjk0NDg0MTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/markshannon",
          "html_url": "https://github.com/markshannon",
          "followers_url": "https://api.github.com/users/markshannon/followers",
          "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
          "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
          "organizations_url": "https://api.github.com/users/markshannon/orgs",
          "repos_url": "https://api.github.com/users/markshannon/repos",
          "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/markshannon/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2022-04-04T11:59:08Z",
      "updated_at": "2024-06-17T20:14:02Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [47215](https://bugs.python.org/issue47215)\n--- | :---\nNosy | @markshannon, @brandtbucher\nPRs | <li>python/cpython#32303</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = 'https://github.com/markshannon'\nclosed_at = None\ncreated_at = <Date 2022-04-04.11:59:07.553>\nlabels = ['expert-C-API', 'type-feature', '3.11']\ntitle = 'Add \"unstable\" frame stack api'\nupdated_at = <Date 2022-04-04.12:09:47.075>\nuser = 'https://github.com/markshannon'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2022-04-04.12:09:47.075>\nactor = 'Mark.Shannon'\nassignee = 'Mark.Shannon'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['C API']\ncreation = <Date 2022-04-04.11:59:07.553>\ncreator = 'Mark.Shannon'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 47215\nkeywords = ['patch']\nmessage_count = 1.0\nmessages = ['416665']\nnosy_count = 2.0\nnosy_names = ['Mark.Shannon', 'brandtbucher']\npr_nums = ['32303']\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue47215'\nversions = ['Python 3.11']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-119596\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/91371/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/91371/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/91079",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/91079/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/91079/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/91079/events",
      "html_url": "https://github.com/python/cpython/issues/91079",
      "id": 1199076421,
      "node_id": "I_kwDOBN0Z8c5HeHRF",
      "number": 91079,
      "title": "Implement stack overflow protection for supported platforms",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
        {
          "login": "markshannon",
          "id": 9448417,
          "node_id": "MDQ6VXNlcjk0NDg0MTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/markshannon",
          "html_url": "https://github.com/markshannon",
          "followers_url": "https://api.github.com/users/markshannon/followers",
          "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
          "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
          "organizations_url": "https://api.github.com/users/markshannon/orgs",
          "repos_url": "https://api.github.com/users/markshannon/repos",
          "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/markshannon/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 9,
      "created_at": "2022-03-04T16:54:19Z",
      "updated_at": "2024-01-11T13:07:33Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [46923](https://bugs.python.org/issue46923)\n--- | :---\nNosy | @gpshead, @ronaldoussoren, @stevendaprano, @markshannon, @corona10, @brandtbucher\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = 'https://github.com/markshannon'\nclosed_at = None\ncreated_at = <Date 2022-03-04.16:54:19.358>\nlabels = []\ntitle = 'Implement stack overflow protection for supported platforms'\nupdated_at = <Date 2022-03-14.14:27:17.389>\nuser = 'https://github.com/markshannon'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2022-03-14.14:27:17.389>\nactor = 'ronaldoussoren'\nassignee = 'Mark.Shannon'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = []\ncreation = <Date 2022-03-04.16:54:19.358>\ncreator = 'Mark.Shannon'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 46923\nkeywords = []\nmessage_count = 3.0\nmessages = ['414538', '414553', '415143']\nnosy_count = 6.0\nnosy_names = ['gregory.p.smith', 'ronaldoussoren', 'steven.daprano', 'Mark.Shannon', 'corona10', 'brandtbucher']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = None\nstatus = 'open'\nsuperseder = None\ntype = None\nurl = 'https://bugs.python.org/issue46923'\nversions = []\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-108507\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/91079/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/91079/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/90996",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/90996/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/90996/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/90996/events",
      "html_url": "https://github.com/python/cpython/issues/90996",
      "id": 1199075900,
      "node_id": "I_kwDOBN0Z8c5HeHI8",
      "number": 90996,
      "title": "xmlrpc.client.ServerProxy shows password in __repr__ when using basic authentication",
      "user": {
        "login": "60a7aa40-7ec6-4cf9-8645-78621ac9bad8",
        "id": 101755590,
        "node_id": "M_kgDOBhCqxg",
        "avatar_url": "https://avatars.githubusercontent.com/u/101755590?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/60a7aa40-7ec6-4cf9-8645-78621ac9bad8",
        "html_url": "https://github.com/perrinjerome",
        "followers_url": "https://api.github.com/users/60a7aa40-7ec6-4cf9-8645-78621ac9bad8/followers",
        "following_url": "https://api.github.com/users/60a7aa40-7ec6-4cf9-8645-78621ac9bad8/following{/other_user}",
        "gists_url": "https://api.github.com/users/60a7aa40-7ec6-4cf9-8645-78621ac9bad8/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/60a7aa40-7ec6-4cf9-8645-78621ac9bad8/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/60a7aa40-7ec6-4cf9-8645-78621ac9bad8/subscriptions",
        "organizations_url": "https://api.github.com/users/60a7aa40-7ec6-4cf9-8645-78621ac9bad8/orgs",
        "repos_url": "https://api.github.com/users/60a7aa40-7ec6-4cf9-8645-78621ac9bad8/repos",
        "events_url": "https://api.github.com/users/60a7aa40-7ec6-4cf9-8645-78621ac9bad8/events{/privacy}",
        "received_events_url": "https://api.github.com/users/60a7aa40-7ec6-4cf9-8645-78621ac9bad8/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2022-02-24T01:40:40Z",
      "updated_at": "2024-09-13T13:00:53Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [46840](https://bugs.python.org/issue46840)\n--- | :---\nNosy | @perrinjerome\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2022-02-24.01:40:39.920>\nlabels = ['library']\ntitle = 'xmlrpc.client.ServerProxy shows password in __repr__ when using basic authentication'\nupdated_at = <Date 2022-02-24.01:40:39.920>\nuser = 'https://github.com/perrinjerome'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2022-02-24.01:40:39.920>\nactor = 'perrinjerome'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)']\ncreation = <Date 2022-02-24.01:40:39.920>\ncreator = 'perrinjerome'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 46840\nkeywords = []\nmessage_count = 1.0\nmessages = ['413870']\nnosy_count = 1.0\nnosy_names = ['perrinjerome']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = None\nstatus = 'open'\nsuperseder = None\ntype = None\nurl = 'https://bugs.python.org/issue46840'\nversions = []\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124051\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/90996/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/90996/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/90111",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/90111/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/90111/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/90111/events",
      "html_url": "https://github.com/python/cpython/issues/90111",
      "id": 1199070335,
      "node_id": "I_kwDOBN0Z8c5HeFx_",
      "number": 90111,
      "title": "Statically allocate interpreter states as much as possible.",
      "user": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
        {
          "login": "ericsnowcurrently",
          "id": 1152074,
          "node_id": "MDQ6VXNlcjExNTIwNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ericsnowcurrently",
          "html_url": "https://github.com/ericsnowcurrently",
          "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
          "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
          "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
          "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
          "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
          "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 19,
      "created_at": "2021-12-01T18:50:39Z",
      "updated_at": "2023-05-24T20:24:12Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [45953](https://bugs.python.org/issue45953)\n--- | :---\nNosy | @gvanrossum, @vstinner, @markshannon, @ericsnowcurrently, @JulienPalard, @miss-islington, @brandtbucher\nPRs | <li>python/cpython#29883</li><li>python/cpython#30092</li><li>python/cpython#30096</li><li>python/cpython#30588</li><li>python/cpython#30589</li><li>python/cpython#30590</li><li>python/cpython#31038</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = 'https://github.com/ericsnowcurrently'\nclosed_at = None\ncreated_at = <Date 2021-12-01.18:50:39.120>\nlabels = ['interpreter-core', '3.11']\ntitle = 'Statically allocate interpreter states as much as possible.'\nupdated_at = <Date 2022-03-29.07:04:09.685>\nuser = 'https://github.com/ericsnowcurrently'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2022-03-29.07:04:09.685>\nactor = 'mdk'\nassignee = 'eric.snow'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Interpreter Core']\ncreation = <Date 2021-12-01.18:50:39.120>\ncreator = 'eric.snow'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 45953\nkeywords = ['patch']\nmessage_count = 15.0\nmessages = ['407476', '408507', '410315', '410441', '410536', '410537', '412046', '412213', '412291', '416159', '416161', '416170', '416208', '416210', '416245']\nnosy_count = 7.0\nnosy_names = ['gvanrossum', 'vstinner', 'Mark.Shannon', 'eric.snow', 'mdk', 'miss-islington', 'brandtbucher']\npr_nums = ['29883', '30092', '30096', '30588', '30589', '30590', '31038']\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = None\nurl = 'https://bugs.python.org/issue45953'\nversions = ['Python 3.11']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-100254\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/90111/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/90111/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/89812",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/89812/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/89812/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/89812/events",
      "html_url": "https://github.com/python/cpython/issues/89812",
      "id": 1199068233,
      "node_id": "I_kwDOBN0Z8c5HeFRJ",
      "number": 89812,
      "title": "Add tarfile.TarPath",
      "user": {
        "login": "FFY00",
        "id": 11718923,
        "node_id": "MDQ6VXNlcjExNzE4OTIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/11718923?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/FFY00",
        "html_url": "https://github.com/FFY00",
        "followers_url": "https://api.github.com/users/FFY00/followers",
        "following_url": "https://api.github.com/users/FFY00/following{/other_user}",
        "gists_url": "https://api.github.com/users/FFY00/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/FFY00/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/FFY00/subscriptions",
        "organizations_url": "https://api.github.com/users/FFY00/orgs",
        "repos_url": "https://api.github.com/users/FFY00/repos",
        "events_url": "https://api.github.com/users/FFY00/events{/privacy}",
        "received_events_url": "https://api.github.com/users/FFY00/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 12,
      "created_at": "2021-10-28T15:59:22Z",
      "updated_at": "2023-07-13T09:02:42Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [45649](https://bugs.python.org/issue45649)\n--- | :---\nNosy | @jaraco, @ethanfurman, @FFY00, @barneygale\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2021-10-28.15:59:21.866>\nlabels = ['type-feature', 'library', '3.11']\ntitle = 'Add tarinfo.Path'\nupdated_at = <Date 2022-01-02.00:01:26.196>\nuser = 'https://github.com/FFY00'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2022-01-02.00:01:26.196>\nactor = 'barneygale'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)']\ncreation = <Date 2021-10-28.15:59:21.866>\ncreator = 'FFY00'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 45649\nkeywords = []\nmessage_count = 6.0\nmessages = ['405194', '405206', '405210', '409479', '409481', '409482']\nnosy_count = 4.0\nnosy_names = ['jaraco', 'ethan.furman', 'FFY00', 'barneygale']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = None\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue45649'\nversions = ['Python 3.11']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-104243\n* gh-104272\n* gh-104810\n* gh-104829\n* gh-105807\n* gh-105926\n* gh-106060\n* gh-106061\n* gh-106062\n* gh-106063\n* gh-106064\n* gh-106337\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/89812/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/89812/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/89683",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/89683/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/89683/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/89683/events",
      "html_url": "https://github.com/python/cpython/issues/89683",
      "id": 1199067369,
      "node_id": "I_kwDOBN0Z8c5HeFDp",
      "number": 89683,
      "title": "Frozen dataclass deep copy doesn't work with __slots__",
      "user": {
        "login": "4a93283c-c903-4f64-bca5-96978136d9a8",
        "id": 92881679,
        "node_id": "M_kgDOBYlDDw",
        "avatar_url": "https://avatars.githubusercontent.com/u/92881679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/4a93283c-c903-4f64-bca5-96978136d9a8",
        "html_url": "https://github.com/jfuruness",
        "followers_url": "https://api.github.com/users/4a93283c-c903-4f64-bca5-96978136d9a8/followers",
        "following_url": "https://api.github.com/users/4a93283c-c903-4f64-bca5-96978136d9a8/following{/other_user}",
        "gists_url": "https://api.github.com/users/4a93283c-c903-4f64-bca5-96978136d9a8/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/4a93283c-c903-4f64-bca5-96978136d9a8/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/4a93283c-c903-4f64-bca5-96978136d9a8/subscriptions",
        "organizations_url": "https://api.github.com/users/4a93283c-c903-4f64-bca5-96978136d9a8/orgs",
        "repos_url": "https://api.github.com/users/4a93283c-c903-4f64-bca5-96978136d9a8/repos",
        "events_url": "https://api.github.com/users/4a93283c-c903-4f64-bca5-96978136d9a8/events{/privacy}",
        "received_events_url": "https://api.github.com/users/4a93283c-c903-4f64-bca5-96978136d9a8/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        },
        {
          "id": 7334604047,
          "node_id": "LA_kwDOBN0Z8c8AAAABtS0tDw",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-dataclasses",
          "name": "topic-dataclasses",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "picnixz",
        "id": 10796600,
        "node_id": "MDQ6VXNlcjEwNzk2NjAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/picnixz",
        "html_url": "https://github.com/picnixz",
        "followers_url": "https://api.github.com/users/picnixz/followers",
        "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
        "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
        "organizations_url": "https://api.github.com/users/picnixz/orgs",
        "repos_url": "https://api.github.com/users/picnixz/repos",
        "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/picnixz/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "picnixz",
          "id": 10796600,
          "node_id": "MDQ6VXNlcjEwNzk2NjAw",
          "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/picnixz",
          "html_url": "https://github.com/picnixz",
          "followers_url": "https://api.github.com/users/picnixz/followers",
          "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
          "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
          "organizations_url": "https://api.github.com/users/picnixz/orgs",
          "repos_url": "https://api.github.com/users/picnixz/repos",
          "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
          "received_events_url": "https://api.github.com/users/picnixz/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 8,
      "created_at": "2021-10-18T23:18:22Z",
      "updated_at": "2024-09-27T16:41:21Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [45520](https://bugs.python.org/issue45520)\n--- | :---\nNosy | @ericvsmith, @MojoVampire, @jfuruness, @sobolevn\nPRs | <li>python/cpython#29147</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2021-10-18.23:18:22.340>\nlabels = ['type-bug', '3.9', '3.10']\ntitle = \"Frozen dataclass deep copy doesn't work with __slots__\"\nupdated_at = <Date 2021-10-22.08:08:50.197>\nuser = 'https://github.com/jfuruness'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2021-10-22.08:08:50.197>\nactor = 'sobolevn'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = []\ncreation = <Date 2021-10-18.23:18:22.340>\ncreator = 'jfuruness'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 45520\nkeywords = ['patch']\nmessage_count = 5.0\nmessages = ['404245', '404260', '404273', '404354', '404525']\nnosy_count = 4.0\nnosy_names = ['eric.smith', 'josh.r', 'jfuruness', 'sobolevn']\npr_nums = ['29147']\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue45520'\nversions = ['Python 3.9', 'Python 3.10']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-123098\n* gh-124678\n* gh-124679\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/89683/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/89683/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/89547",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/89547/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/89547/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/89547/events",
      "html_url": "https://github.com/python/cpython/issues/89547",
      "id": 1199066444,
      "node_id": "I_kwDOBN0Z8c5HeE1M",
      "number": 89547,
      "title": "Clarify meaning of Final in dataclasses",
      "user": {
        "login": "3f3f69a9-eb63-42d7-a515-cb2fea57e654",
        "id": 92882006,
        "node_id": "M_kgDOBYlEVg",
        "avatar_url": "https://avatars.githubusercontent.com/u/92882006?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/3f3f69a9-eb63-42d7-a515-cb2fea57e654",
        "html_url": "https://github.com/GBeauregard",
        "followers_url": "https://api.github.com/users/3f3f69a9-eb63-42d7-a515-cb2fea57e654/followers",
        "following_url": "https://api.github.com/users/3f3f69a9-eb63-42d7-a515-cb2fea57e654/following{/other_user}",
        "gists_url": "https://api.github.com/users/3f3f69a9-eb63-42d7-a515-cb2fea57e654/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/3f3f69a9-eb63-42d7-a515-cb2fea57e654/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/3f3f69a9-eb63-42d7-a515-cb2fea57e654/subscriptions",
        "organizations_url": "https://api.github.com/users/3f3f69a9-eb63-42d7-a515-cb2fea57e654/orgs",
        "repos_url": "https://api.github.com/users/3f3f69a9-eb63-42d7-a515-cb2fea57e654/repos",
        "events_url": "https://api.github.com/users/3f3f69a9-eb63-42d7-a515-cb2fea57e654/events{/privacy}",
        "received_events_url": "https://api.github.com/users/3f3f69a9-eb63-42d7-a515-cb2fea57e654/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4030784939,
          "node_id": "LA_kwDOBN0Z8c7wQOWr",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-typing",
          "name": "topic-typing",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 25,
      "created_at": "2021-10-05T23:00:03Z",
      "updated_at": "2024-03-29T16:11:17Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [45384](https://bugs.python.org/issue45384)\n--- | :---\nNosy | @ericvsmith, @carljm, @GBeauregard, @saaketp\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2021-10-05.23:00:02.707>\nlabels = ['type-bug', 'library']\ntitle = 'Accept Final as indicating ClassVar for dataclass'\nupdated_at = <Date 2022-01-21.01:21:16.689>\nuser = 'https://github.com/GBeauregard'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2022-01-21.01:21:16.689>\nactor = 'med2277'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)']\ncreation = <Date 2021-10-05.23:00:02.707>\ncreator = 'GBeauregard'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 45384\nkeywords = []\nmessage_count = 12.0\nmessages = ['403277', '403552', '403553', '403555', '403560', '403565', '403615', '403616', '403617', '403890', '403931', '411067']\nnosy_count = 6.0\nnosy_names = ['eric.smith', 'carljm', 'GBeauregard', 'saaketp', 'msully4321', 'med2277']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = None\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue45384'\nversions = []\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-116092\n* gh-116096\n* gh-116686\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/89547/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/89547/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/89435",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/89435/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/89435/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/89435/events",
      "html_url": "https://github.com/python/cpython/issues/89435",
      "id": 1199065703,
      "node_id": "I_kwDOBN0Z8c5HeEpn",
      "number": 89435,
      "title": "'os.path' should not be a frozen module",
      "user": {
        "login": "zooba",
        "id": 1693688,
        "node_id": "MDQ6VXNlcjE2OTM2ODg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zooba",
        "html_url": "https://github.com/zooba",
        "followers_url": "https://api.github.com/users/zooba/followers",
        "following_url": "https://api.github.com/users/zooba/following{/other_user}",
        "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
        "organizations_url": "https://api.github.com/users/zooba/orgs",
        "repos_url": "https://api.github.com/users/zooba/repos",
        "events_url": "https://api.github.com/users/zooba/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zooba/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
        {
          "login": "ericsnowcurrently",
          "id": 1152074,
          "node_id": "MDQ6VXNlcjExNTIwNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ericsnowcurrently",
          "html_url": "https://github.com/ericsnowcurrently",
          "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
          "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
          "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
          "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
          "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
          "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2021-09-23T16:24:55Z",
      "updated_at": "2024-11-17T03:27:54Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [45272](https://bugs.python.org/issue45272)\n--- | :---\nNosy | @gvanrossum, @warsaw, @brettcannon, @jaraco, @ncoghlan, @ericsnowcurrently, @zooba, @corona10, @FFY00\nPRs | <li>python/cpython#29329</li><li>python/cpython#29648</li><li>python/cpython#29648</li><li>python/cpython#29648</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = 'https://github.com/ericsnowcurrently'\nclosed_at = None\ncreated_at = <Date 2021-09-23.16:24:55.449>\nlabels = ['type-bug', '3.11']\ntitle = \"'os.path' should not be a frozen module\"\nupdated_at = <Date 2021-11-20.00:28:14.819>\nuser = 'https://github.com/zooba'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2021-11-20.00:28:14.819>\nactor = 'gvanrossum'\nassignee = 'eric.snow'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = []\ncreation = <Date 2021-09-23.16:24:55.449>\ncreator = 'steve.dower'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 45272\nkeywords = ['patch']\nmessage_count = 5.0\nmessages = ['402506', '402516', '403327', '403332', '403334']\nnosy_count = 9.0\nnosy_names = ['gvanrossum', 'barry', 'brett.cannon', 'jaraco', 'ncoghlan', 'eric.snow', 'steve.dower', 'corona10', 'FFY00']\npr_nums = ['29329', '29648', '29648', '29648']\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue45272'\nversions = ['Python 3.11']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-126924\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/89435/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/89435/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/89240",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/89240/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/89240/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/89240/events",
      "html_url": "https://github.com/python/cpython/issues/89240",
      "id": 1199064373,
      "node_id": "MDU6SXNzdWUxMTk5MDY0Mzcz",
      "number": 89240,
      "title": "multiprocessing.Pool(64) throws on Windows",
      "user": {
        "login": "6475b3bd-9876-4c35-9df5-7935b61953f4",
        "id": 92882080,
        "node_id": "M_kgDOBYlEoA",
        "avatar_url": "https://avatars.githubusercontent.com/u/92882080?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/6475b3bd-9876-4c35-9df5-7935b61953f4",
        "html_url": "https://github.com/saschanaz",
        "followers_url": "https://api.github.com/users/6475b3bd-9876-4c35-9df5-7935b61953f4/followers",
        "following_url": "https://api.github.com/users/6475b3bd-9876-4c35-9df5-7935b61953f4/following{/other_user}",
        "gists_url": "https://api.github.com/users/6475b3bd-9876-4c35-9df5-7935b61953f4/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/6475b3bd-9876-4c35-9df5-7935b61953f4/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/6475b3bd-9876-4c35-9df5-7935b61953f4/subscriptions",
        "organizations_url": "https://api.github.com/users/6475b3bd-9876-4c35-9df5-7935b61953f4/orgs",
        "repos_url": "https://api.github.com/users/6475b3bd-9876-4c35-9df5-7935b61953f4/repos",
        "events_url": "https://api.github.com/users/6475b3bd-9876-4c35-9df5-7935b61953f4/events{/privacy}",
        "received_events_url": "https://api.github.com/users/6475b3bd-9876-4c35-9df5-7935b61953f4/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 570103914,
          "node_id": "MDU6TGFiZWw1NzAxMDM5MTQ=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-windows",
          "name": "OS-windows",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018772048,
          "node_id": "LA_kwDOBN0Z8c7viZhQ",
          "url": "https://api.github.com/repos/python/cpython/labels/3.10",
          "name": "3.10",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018772049,
          "node_id": "LA_kwDOBN0Z8c7viZhR",
          "url": "https://api.github.com/repos/python/cpython/labels/3.9",
          "name": "3.9",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4204725259,
          "node_id": "LA_kwDOBN0Z8c76nwQL",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-multiprocessing",
          "name": "topic-multiprocessing",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2021-09-01T13:20:44Z",
      "updated_at": "2023-08-11T16:14:34Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [45077](https://bugs.python.org/issue45077)\n--- | :---\nNosy | @pfmoore, @tjguk, @zware, @eryksun, @zooba, @corona10, @saschanaz\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2021-09-01.13:20:44.186>\nlabels = ['type-bug', '3.9', '3.10', '3.11', 'library', 'OS-windows']\ntitle = 'multiprocessing.Pool(64) throws on Windows'\nupdated_at = <Date 2021-10-03.11:23:58.490>\nuser = 'https://github.com/saschanaz'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2021-10-03.11:23:58.490>\nactor = 'saschanaz'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)', 'Windows']\ncreation = <Date 2021-09-01.13:20:44.186>\ncreator = 'saschanaz'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 45077\nkeywords = []\nmessage_count = 3.0\nmessages = ['400832', '400834', '400987']\nnosy_count = 7.0\nnosy_names = ['paul.moore', 'tim.golden', 'zach.ware', 'eryksun', 'steve.dower', 'corona10', 'saschanaz']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = None\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue45077'\nversions = ['Python 3.9', 'Python 3.10', 'Python 3.11']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-102920\n* gh-107873\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/89240/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/89240/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/89039",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/89039/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/89039/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/89039/events",
      "html_url": "https://github.com/python/cpython/issues/89039",
      "id": 1199063183,
      "node_id": "MDU6SXNzdWUxMTk5MDYzMTgz",
      "number": 89039,
      "title": ".replace functions in datetime do not call __new__",
      "user": {
        "login": "df6ca58d-603e-4c91-bb6f-689910cec4fe",
        "id": 92881638,
        "node_id": "M_kgDOBYlC5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/92881638?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/df6ca58d-603e-4c91-bb6f-689910cec4fe",
        "html_url": "https://github.com/joelgibson",
        "followers_url": "https://api.github.com/users/df6ca58d-603e-4c91-bb6f-689910cec4fe/followers",
        "following_url": "https://api.github.com/users/df6ca58d-603e-4c91-bb6f-689910cec4fe/following{/other_user}",
        "gists_url": "https://api.github.com/users/df6ca58d-603e-4c91-bb6f-689910cec4fe/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/df6ca58d-603e-4c91-bb6f-689910cec4fe/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/df6ca58d-603e-4c91-bb6f-689910cec4fe/subscriptions",
        "organizations_url": "https://api.github.com/users/df6ca58d-603e-4c91-bb6f-689910cec4fe/orgs",
        "repos_url": "https://api.github.com/users/df6ca58d-603e-4c91-bb6f-689910cec4fe/repos",
        "events_url": "https://api.github.com/users/df6ca58d-603e-4c91-bb6f-689910cec4fe/events{/privacy}",
        "received_events_url": "https://api.github.com/users/df6ca58d-603e-4c91-bb6f-689910cec4fe/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2021-08-09T22:58:31Z",
      "updated_at": "2024-02-12T12:45:24Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [44876](https://bugs.python.org/issue44876)\n--- | :---\nNosy | @joelgibson\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2021-08-09.22:58:31.112>\nlabels = ['type-bug', 'library']\ntitle = '.replace functions in datetime do not call __new__'\nupdated_at = <Date 2021-08-09.22:58:31.112>\nuser = 'https://github.com/joelgibson'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2021-08-09.22:58:31.112>\nactor = 'joelgibson'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)']\ncreation = <Date 2021-08-09.22:58:31.112>\ncreator = 'joelgibson'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 44876\nkeywords = []\nmessage_count = 1.0\nmessages = ['399295']\nnosy_count = 1.0\nnosy_names = ['joelgibson']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = None\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue44876'\nversions = []\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-114780\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/89039/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/89039/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/87533",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/87533/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/87533/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/87533/events",
      "html_url": "https://github.com/python/cpython/issues/87533",
      "id": 1199053726,
      "node_id": "MDU6SXNzdWUxMTk5MDUzNzI2",
      "number": 87533,
      "title": "submodule of c-extension module is quirky",
      "user": {
        "login": "mattip",
        "id": 823911,
        "node_id": "MDQ6VXNlcjgyMzkxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/823911?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mattip",
        "html_url": "https://github.com/mattip",
        "followers_url": "https://api.github.com/users/mattip/followers",
        "following_url": "https://api.github.com/users/mattip/following{/other_user}",
        "gists_url": "https://api.github.com/users/mattip/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mattip/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mattip/subscriptions",
        "organizations_url": "https://api.github.com/users/mattip/orgs",
        "repos_url": "https://api.github.com/users/mattip/repos",
        "events_url": "https://api.github.com/users/mattip/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mattip/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2021-03-02T11:41:24Z",
      "updated_at": "2024-09-25T06:48:20Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [43367](https://bugs.python.org/issue43367)\n--- | :---\nNosy | @mattip, @skoslowski, @YannickJadoul\nFiles | <li>[test.c](https://bugs.python.org/file49844/test.c \"Uploaded as text/x-csrc at 2021-03-02.11:41:23 by @mattip\"): Complete C module to reproduce the issue</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2021-03-02.11:41:23.575>\nlabels = []\ntitle = 'submodule of c-extension module is quirky'\nupdated_at = <Date 2021-03-02.14:54:05.759>\nuser = 'https://github.com/mattip'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2021-03-02.14:54:05.759>\nactor = 'skoslowski'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = []\ncreation = <Date 2021-03-02.11:41:23.575>\ncreator = 'mattip'\ndependencies = []\nfiles = ['49844']\nhgrepos = []\nissue_num = 43367\nkeywords = []\nmessage_count = 2.0\nmessages = ['387917', '387935']\nnosy_count = 3.0\nnosy_names = ['mattip', 'skoslowski', 'YannickJadoul']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = None\nstatus = 'open'\nsuperseder = None\ntype = None\nurl = 'https://bugs.python.org/issue43367'\nversions = []\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-119152\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/87533/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/87533/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/87135",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/87135/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/87135/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/87135/events",
      "html_url": "https://github.com/python/cpython/issues/87135",
      "id": 1199051244,
      "node_id": "MDU6SXNzdWUxMTk5MDUxMjQ0",
      "number": 87135,
      "title": "pthread_exit & PyThread_exit_thread from PyEval_RestoreThread etc. are harmful",
      "user": {
        "login": "gpshead",
        "id": 68491,
        "node_id": "MDQ6VXNlcjY4NDkx",
        "avatar_url": "https://avatars.githubusercontent.com/u/68491?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gpshead",
        "html_url": "https://github.com/gpshead",
        "followers_url": "https://api.github.com/users/gpshead/followers",
        "following_url": "https://api.github.com/users/gpshead/following{/other_user}",
        "gists_url": "https://api.github.com/users/gpshead/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gpshead/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gpshead/subscriptions",
        "organizations_url": "https://api.github.com/users/gpshead/orgs",
        "repos_url": "https://api.github.com/users/gpshead/repos",
        "events_url": "https://api.github.com/users/gpshead/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gpshead/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "gpshead",
        "id": 68491,
        "node_id": "MDQ6VXNlcjY4NDkx",
        "avatar_url": "https://avatars.githubusercontent.com/u/68491?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gpshead",
        "html_url": "https://github.com/gpshead",
        "followers_url": "https://api.github.com/users/gpshead/followers",
        "following_url": "https://api.github.com/users/gpshead/following{/other_user}",
        "gists_url": "https://api.github.com/users/gpshead/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gpshead/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gpshead/subscriptions",
        "organizations_url": "https://api.github.com/users/gpshead/orgs",
        "repos_url": "https://api.github.com/users/gpshead/repos",
        "events_url": "https://api.github.com/users/gpshead/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gpshead/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "gpshead",
          "id": 68491,
          "node_id": "MDQ6VXNlcjY4NDkx",
          "avatar_url": "https://avatars.githubusercontent.com/u/68491?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/gpshead",
          "html_url": "https://github.com/gpshead",
          "followers_url": "https://api.github.com/users/gpshead/followers",
          "following_url": "https://api.github.com/users/gpshead/following{/other_user}",
          "gists_url": "https://api.github.com/users/gpshead/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/gpshead/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/gpshead/subscriptions",
          "organizations_url": "https://api.github.com/users/gpshead/orgs",
          "repos_url": "https://api.github.com/users/gpshead/repos",
          "events_url": "https://api.github.com/users/gpshead/events{/privacy}",
          "received_events_url": "https://api.github.com/users/gpshead/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 28,
      "created_at": "2021-01-19T19:35:47Z",
      "updated_at": "2024-10-23T18:03:00Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [42969](https://bugs.python.org/issue42969)\n--- | :---\nNosy | @gpshead, @pitrou, @vstinner, @colesbury, @izbyshev, @jbms\nPRs | <li>python/cpython#28525</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2021-01-19.19:35:46.531>\nlabels = ['interpreter-core', 'type-bug', '3.9', '3.10', '3.11']\ntitle = 'pthread_exit & PyThread_exit_thread from PyEval_RestoreThread etc. are harmful'\nupdated_at = <Date 2021-11-15.22:28:59.110>\nuser = 'https://github.com/gpshead'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2021-11-15.22:28:59.110>\nactor = 'colesbury'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Interpreter Core']\ncreation = <Date 2021-01-19.19:35:46.531>\ncreator = 'gregory.p.smith'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 42969\nkeywords = ['patch', '3.2regression']\nmessage_count = 26.0\nmessages = ['385288', '385289', '396669', '396679', '401886', '401922', '401958', '401959', '402218', '402219', '402220', '402264', '402266', '402474', '402475', '402487', '402509', '402519', '402556', '402558', '402559', '402560', '402571', '402608', '402684', '406363']\nnosy_count = 6.0\nnosy_names = ['gregory.p.smith', 'pitrou', 'vstinner', 'colesbury', 'izbyshev', 'jbms']\npr_nums = ['28525']\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue42969'\nversions = ['Python 3.9', 'Python 3.10', 'Python 3.11']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-105805\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/87135/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/87135/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/84686",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/84686/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/84686/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/84686/events",
      "html_url": "https://github.com/python/cpython/issues/84686",
      "id": 1199035721,
      "node_id": "MDU6SXNzdWUxMTk5MDM1NzIx",
      "number": 84686,
      "title": "add support for os.PathLike filename in zipfile.ZipFile.write()",
      "user": {
        "login": "2e43ab83-bade-46f4-acc7-c599eba17e11",
        "id": 93805558,
        "node_id": "M_kgDOBZdb9g",
        "avatar_url": "https://avatars.githubusercontent.com/u/93805558?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2e43ab83-bade-46f4-acc7-c599eba17e11",
        "html_url": "https://github.com/domragusa",
        "followers_url": "https://api.github.com/users/2e43ab83-bade-46f4-acc7-c599eba17e11/followers",
        "following_url": "https://api.github.com/users/2e43ab83-bade-46f4-acc7-c599eba17e11/following{/other_user}",
        "gists_url": "https://api.github.com/users/2e43ab83-bade-46f4-acc7-c599eba17e11/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2e43ab83-bade-46f4-acc7-c599eba17e11/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2e43ab83-bade-46f4-acc7-c599eba17e11/subscriptions",
        "organizations_url": "https://api.github.com/users/2e43ab83-bade-46f4-acc7-c599eba17e11/orgs",
        "repos_url": "https://api.github.com/users/2e43ab83-bade-46f4-acc7-c599eba17e11/repos",
        "events_url": "https://api.github.com/users/2e43ab83-bade-46f4-acc7-c599eba17e11/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2e43ab83-bade-46f4-acc7-c599eba17e11/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2020-05-05T02:12:03Z",
      "updated_at": "2024-01-19T17:41:10Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [40506](https://bugs.python.org/issue40506)\r\n--- | :---\r\nNosy | @Yhg1s, @ethanfurman, @serhiy-storchaka, @domragusa\r\nFiles | <li>[pathlike_writestr.patch](https://bugs.python.org/file49132/pathlike_writestr.patch \"Uploaded as text/plain at 2020-05-06.18:31:13 by @domragusa\")</li>\r\n\r\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\r\n\r\n<details><summary>Show more details</summary><p>\r\n\r\nGitHub fields:\r\n```python\r\nassignee = None\r\nclosed_at = None\r\ncreated_at = <Date 2020-05-05.02:12:03.387>\r\nlabels = ['type-feature', 'library', '3.10']\r\ntitle = 'add support for os.Pathlike filenames in zipfile.ZipFile.writestr'\r\nupdated_at = <Date 2021-09-08.00:49:22.380>\r\nuser = 'https://github.com/domragusa'\r\n```\r\n\r\nbugs.python.org fields:\r\n```python\r\nactivity = <Date 2021-09-08.00:49:22.380>\r\nactor = 'ethan.furman'\r\nassignee = 'none'\r\nclosed = False\r\nclosed_date = None\r\ncloser = None\r\ncomponents = ['Library (Lib)']\r\ncreation = <Date 2020-05-05.02:12:03.387>\r\ncreator = 'd.ragusa'\r\ndependencies = []\r\nfiles = ['49132']\r\nhgrepos = []\r\nissue_num = 40506\r\nkeywords = ['patch']\r\nmessage_count = 2.0\r\nmessages = ['368098', '368289']\r\nnosy_count = 4.0\r\nnosy_names = ['twouters', 'ethan.furman', 'serhiy.storchaka', 'd.ragusa']\r\npr_nums = ['20002']\r\npriority = 'normal'\r\nresolution = None\r\nstage = 'patch review'\r\nstatus = 'open'\r\nsuperseder = None\r\ntype = 'enhancement'\r\nurl = 'https://bugs.python.org/issue40506'\r\nversions = ['Python 3.10']\r\n```\r\n\r\n</p></details>\r\n\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-20002\r\n* gh-113386\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/84686/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/84686/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/83861",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/83861/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/83861/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/83861/events",
      "html_url": "https://github.com/python/cpython/issues/83861",
      "id": 1199030749,
      "node_id": "MDU6SXNzdWUxMTk5MDMwNzQ5",
      "number": 83861,
      "title": "datetime.astimezone() method does not handle invalid local times as required by PEP 495",
      "user": {
        "login": "abalkin",
        "id": 535197,
        "node_id": "MDQ6VXNlcjUzNTE5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/535197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/abalkin",
        "html_url": "https://github.com/abalkin",
        "followers_url": "https://api.github.com/users/abalkin/followers",
        "following_url": "https://api.github.com/users/abalkin/following{/other_user}",
        "gists_url": "https://api.github.com/users/abalkin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/abalkin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/abalkin/subscriptions",
        "organizations_url": "https://api.github.com/users/abalkin/orgs",
        "repos_url": "https://api.github.com/users/abalkin/repos",
        "events_url": "https://api.github.com/users/abalkin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/abalkin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018772049,
          "node_id": "LA_kwDOBN0Z8c7viZhR",
          "url": "https://api.github.com/repos/python/cpython/labels/3.9",
          "name": "3.9",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
        {
          "login": "abalkin",
          "id": 535197,
          "node_id": "MDQ6VXNlcjUzNTE5Nw==",
          "avatar_url": "https://avatars.githubusercontent.com/u/535197?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/abalkin",
          "html_url": "https://github.com/abalkin",
          "followers_url": "https://api.github.com/users/abalkin/followers",
          "following_url": "https://api.github.com/users/abalkin/following{/other_user}",
          "gists_url": "https://api.github.com/users/abalkin/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/abalkin/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/abalkin/subscriptions",
          "organizations_url": "https://api.github.com/users/abalkin/orgs",
          "repos_url": "https://api.github.com/users/abalkin/repos",
          "events_url": "https://api.github.com/users/abalkin/events{/privacy}",
          "received_events_url": "https://api.github.com/users/abalkin/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2020-02-19T00:56:01Z",
      "updated_at": "2023-11-28T00:13:51Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [39680](https://bugs.python.org/issue39680)\n--- | :---\nNosy | @abalkin, @pganssle\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = 'https://github.com/abalkin'\nclosed_at = None\ncreated_at = <Date 2020-02-19.00:56:00.603>\nlabels = ['type-bug', '3.9']\ntitle = 'datetime.astimezone() method does not handle invalid local times as required by PEP 495'\nupdated_at = <Date 2020-02-19.00:56:00.603>\nuser = 'https://github.com/abalkin'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2020-02-19.00:56:00.603>\nactor = 'belopolsky'\nassignee = 'belopolsky'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = []\ncreation = <Date 2020-02-19.00:56:00.603>\ncreator = 'belopolsky'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 39680\nkeywords = []\nmessage_count = 1.0\nmessages = ['362241']\nnosy_count = 2.0\nnosy_names = ['belopolsky', 'p-ganssle']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = None\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue39680'\nversions = ['Python 3.9']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-101545\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/83861/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/83861/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/82300",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/82300/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/82300/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/82300/events",
      "html_url": "https://github.com/python/cpython/issues/82300",
      "id": 1199019540,
      "node_id": "MDU6SXNzdWUxMTk5MDE5NTQw",
      "number": 82300,
      "title": "resource tracker destroys shared memory segments when other processes should still have valid access",
      "user": {
        "login": "applio",
        "id": 121634,
        "node_id": "MDQ6VXNlcjEyMTYzNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/121634?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/applio",
        "html_url": "https://github.com/applio",
        "followers_url": "https://api.github.com/users/applio/followers",
        "following_url": "https://api.github.com/users/applio/following{/other_user}",
        "gists_url": "https://api.github.com/users/applio/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/applio/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/applio/subscriptions",
        "organizations_url": "https://api.github.com/users/applio/orgs",
        "repos_url": "https://api.github.com/users/applio/repos",
        "events_url": "https://api.github.com/users/applio/events{/privacy}",
        "received_events_url": "https://api.github.com/users/applio/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4204725259,
          "node_id": "LA_kwDOBN0Z8c76nwQL",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-multiprocessing",
          "name": "topic-multiprocessing",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
        {
          "login": "applio",
          "id": 121634,
          "node_id": "MDQ6VXNlcjEyMTYzNA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/121634?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/applio",
          "html_url": "https://github.com/applio",
          "followers_url": "https://api.github.com/users/applio/followers",
          "following_url": "https://api.github.com/users/applio/following{/other_user}",
          "gists_url": "https://api.github.com/users/applio/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/applio/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/applio/subscriptions",
          "organizations_url": "https://api.github.com/users/applio/orgs",
          "repos_url": "https://api.github.com/users/applio/repos",
          "events_url": "https://api.github.com/users/applio/events{/privacy}",
          "received_events_url": "https://api.github.com/users/applio/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 35,
      "created_at": "2019-09-11T15:58:27Z",
      "updated_at": "2024-06-15T01:52:39Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [38119](https://bugs.python.org/issue38119)\r\n--- | :---\r\nNosy | @pitrou, @applio, @pablogsal, @maggyero, @vinay0410, @JSmith-BitFlipper, @keven425, @TKaluza\r\nPRs | <li>python/cpython#15989</li><li>python/cpython#21516</li><li>python/cpython#23174</li>\r\nFiles | <li>[mprt_monkeypatch.py](https://bugs.python.org/file49859/mprt_monkeypatch.py \"Uploaded as text/plain at 2021-03-08.19:22:16 by turicas\")</li>\r\n\r\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\r\n\r\n<details><summary>Show more details</summary><p>\r\n\r\nGitHub fields:\r\n```python\r\nassignee = 'https://github.com/applio'\r\nclosed_at = None\r\ncreated_at = <Date 2019-09-11.15:58:26.817>\r\nlabels = ['3.8', 'type-bug', 'library', '3.9', '3.10']\r\ntitle = 'resource tracker destroys shared memory segments when other processes should still have valid access'\r\nupdated_at = <Date 2022-02-10.20:53:56.777>\r\nuser = 'https://github.com/applio'\r\n```\r\n\r\nbugs.python.org fields:\r\n```python\r\nactivity = <Date 2022-02-10.20:53:56.777>\r\nactor = 'maggyero'\r\nassignee = 'davin'\r\nclosed = False\r\nclosed_date = None\r\ncloser = None\r\ncomponents = ['Library (Lib)']\r\ncreation = <Date 2019-09-11.15:58:26.817>\r\ncreator = 'davin'\r\ndependencies = []\r\nfiles = ['49859']\r\nhgrepos = []\r\nissue_num = 38119\r\nkeywords = ['patch']\r\nmessage_count = 14.0\r\nmessages = ['351960', '352050', '374434', '374939', '374944', '374951', '374954', '374956', '374958', '374974', '387606', '388287', '390198', '412440']\r\nnosy_count = 12.0\r\nnosy_names = ['pitrou', 'steve.newcomb', 'turicas', 'davin', 'pablogsal', 'maggyero', 'vinay0410', 'damian.barabonkov', 'keven425', 'davfelsen', 'jdogzz-g5', 'timka']\r\npr_nums = ['15989', '21516', '23174']\r\npriority = 'normal'\r\nresolution = None\r\nstage = 'patch review'\r\nstatus = 'open'\r\nsuperseder = None\r\ntype = 'behavior'\r\nurl = 'https://bugs.python.org/issue38119'\r\nversions = ['Python 3.8', 'Python 3.9', 'Python 3.10']\r\n```\r\n\r\n</p></details>\r\n\r\n## TODO list:\r\n\r\n* [x] Add a `track=True` parameter to SharedMemory (#110778 did this) so it can be disabled by the user.\r\n* [ ] It still needs covering in the What's New in 3.13 documentation.\r\n* [ ] Verify and make other documentation improvements as necessary as alluded by @ambv below in https://github.com/python/cpython/issues/82300#issuecomment-1336166761 - It sounded like we've got docs implying that resources outlive the process _by default_ which was not what the implementation ever did.\r\n\r\n<!-- gh-linked-prs -->\r\n### Linked PRs\r\n* gh-110778\r\n<!-- /gh-linked-prs -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/82300/reactions",
        "total_count": 9,
        "+1": 9,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/82300/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/81435",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/81435/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/81435/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/81435/events",
      "html_url": "https://github.com/python/cpython/issues/81435",
      "id": 1199014115,
      "node_id": "MDU6SXNzdWUxMTk5MDE0MTE1",
      "number": 81435,
      "title": "POST large file to server (using http.server.CGIHTTPRequestHandler), always reset by server.",
      "user": {
        "login": "61b4b968-db4e-44a6-871c-7dd50e2008fb",
        "id": 93803974,
        "node_id": "M_kgDOBZdVxg",
        "avatar_url": "https://avatars.githubusercontent.com/u/93803974?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/61b4b968-db4e-44a6-871c-7dd50e2008fb",
        "html_url": "https://github.com/shajianrui",
        "followers_url": "https://api.github.com/users/61b4b968-db4e-44a6-871c-7dd50e2008fb/followers",
        "following_url": "https://api.github.com/users/61b4b968-db4e-44a6-871c-7dd50e2008fb/following{/other_user}",
        "gists_url": "https://api.github.com/users/61b4b968-db4e-44a6-871c-7dd50e2008fb/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/61b4b968-db4e-44a6-871c-7dd50e2008fb/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/61b4b968-db4e-44a6-871c-7dd50e2008fb/subscriptions",
        "organizations_url": "https://api.github.com/users/61b4b968-db4e-44a6-871c-7dd50e2008fb/orgs",
        "repos_url": "https://api.github.com/users/61b4b968-db4e-44a6-871c-7dd50e2008fb/repos",
        "events_url": "https://api.github.com/users/61b4b968-db4e-44a6-871c-7dd50e2008fb/events{/privacy}",
        "received_events_url": "https://api.github.com/users/61b4b968-db4e-44a6-871c-7dd50e2008fb/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018775329,
          "node_id": "LA_kwDOBN0Z8c7viaUh",
          "url": "https://api.github.com/repos/python/cpython/labels/3.7%20(EOL)",
          "name": "3.7 (EOL)",
          "color": "888888",
          "default": false,
          "description": "end of life"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-06-12T15:24:48Z",
      "updated_at": "2023-01-06T15:20:50Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [37254](https://bugs.python.org/issue37254)\n--- | :---\nNosy | @shajianrui\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2019-06-12.15:24:48.347>\nlabels = ['3.7', 'type-bug', 'library']\ntitle = 'POST large file to server (using http.server.CGIHTTPRequestHandler), always reset by server.'\nupdated_at = <Date 2019-06-12.15:24:48.347>\nuser = 'https://github.com/shajianrui'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2019-06-12.15:24:48.347>\nactor = 'shajianrui'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)']\ncreation = <Date 2019-06-12.15:24:48.347>\ncreator = 'shajianrui'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 37254\nkeywords = []\nmessage_count = 1.0\nmessages = ['345370']\nnosy_count = 1.0\nnosy_names = ['shajianrui']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = None\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue37254'\nversions = ['Python 3.7']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-100794\n* gh-100796\n* gh-100797\n* gh-100801\n* gh-100802\n* gh-100803\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/81435/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/81435/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/80931",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/80931/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/80931/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/80931/events",
      "html_url": "https://github.com/python/cpython/issues/80931",
      "id": 1199010920,
      "node_id": "MDU6SXNzdWUxMTk5MDEwOTIw",
      "number": 80931,
      "title": "test_socket leaks file descriptors on macOS",
      "user": {
        "login": "tirkarthi",
        "id": 3972343,
        "node_id": "MDQ6VXNlcjM5NzIzNDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3972343?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tirkarthi",
        "html_url": "https://github.com/tirkarthi",
        "followers_url": "https://api.github.com/users/tirkarthi/followers",
        "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}",
        "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions",
        "organizations_url": "https://api.github.com/users/tirkarthi/orgs",
        "repos_url": "https://api.github.com/users/tirkarthi/repos",
        "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tirkarthi/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 588881297,
          "node_id": "MDU6TGFiZWw1ODg4ODEyOTc=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-mac",
          "name": "OS-mac",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 23,
      "created_at": "2019-04-29T08:26:45Z",
      "updated_at": "2024-01-21T11:17:30Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [36750](https://bugs.python.org/issue36750)\n--- | :---\nNosy | @vstinner, @giampaolo, @pablogsal, @remilapeyre, @tirkarthi\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2019-04-29.08:26:44.616>\nlabels = ['3.8', 'type-bug', 'library', '3.9', '3.10']\ntitle = 'test_socket leaks file descriptors on macOS'\nupdated_at = <Date 2020-06-07.17:06:50.594>\nuser = 'https://github.com/tirkarthi'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2020-06-07.17:06:50.594>\nactor = 'remi.lapeyre'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)']\ncreation = <Date 2019-04-29.08:26:44.616>\ncreator = 'xtreak'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 36750\nkeywords = []\nmessage_count = 4.0\nmessages = ['341052', '341053', '341136', '370908']\nnosy_count = 5.0\nnosy_names = ['vstinner', 'giampaolo.rodola', 'pablogsal', 'remi.lapeyre', 'xtreak']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = None\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue36750'\nversions = ['Python 3.8', 'Python 3.9', 'Python 3.10']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-114057\n* gh-114380\n* gh-114381\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/80931/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/80931/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/79218",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/79218/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/79218/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/79218/events",
      "html_url": "https://github.com/python/cpython/issues/79218",
      "id": 1198999671,
      "node_id": "MDU6SXNzdWUxMTk4OTk5Njcx",
      "number": 79218,
      "title": "PYLONG_BITS_IN_DIGIT differs between MinGW and MSVC",
      "user": {
        "login": "scoder",
        "id": 491659,
        "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/scoder",
        "html_url": "https://github.com/scoder",
        "followers_url": "https://api.github.com/users/scoder/followers",
        "following_url": "https://api.github.com/users/scoder/following{/other_user}",
        "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
        "organizations_url": "https://api.github.com/users/scoder/orgs",
        "repos_url": "https://api.github.com/users/scoder/repos",
        "events_url": "https://api.github.com/users/scoder/events{/privacy}",
        "received_events_url": "https://api.github.com/users/scoder/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 570103914,
          "node_id": "MDU6TGFiZWw1NzAxMDM5MTQ=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-windows",
          "name": "OS-windows",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 4018672955,
          "node_id": "LA_kwDOBN0Z8c7viBU7",
          "url": "https://api.github.com/repos/python/cpython/labels/extension-modules",
          "name": "extension-modules",
          "color": "09fc59",
          "default": false,
          "description": "C modules in the Modules dir"
        },
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018772048,
          "node_id": "LA_kwDOBN0Z8c7viZhQ",
          "url": "https://api.github.com/repos/python/cpython/labels/3.10",
          "name": "3.10",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018772049,
          "node_id": "LA_kwDOBN0Z8c7viZhR",
          "url": "https://api.github.com/repos/python/cpython/labels/3.9",
          "name": "3.9",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 11,
      "created_at": "2018-10-21T08:22:53Z",
      "updated_at": "2022-12-09T15:08:43Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [35037](https://bugs.python.org/issue35037)\n--- | :---\nNosy | @pfmoore, @mdickinson, @scoder, @tjguk, @zware, @serhiy-storchaka, @zooba, @BenjaminLiuPenrose\nPRs | <li>python/cpython#19326</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2018-10-21.08:22:52.766>\nlabels = ['3.9', '3.10', '3.11', 'extension-modules', 'build', 'OS-windows']\ntitle = 'PYLONG_BITS_IN_DIGIT differs between MinGW and MSVC'\nupdated_at = <Date 2021-12-22.13:16:07.818>\nuser = 'https://github.com/scoder'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2021-12-22.13:16:07.818>\nactor = 'mark.dickinson'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Extension Modules', 'Windows']\ncreation = <Date 2018-10-21.08:22:52.766>\ncreator = 'scoder'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 35037\nkeywords = ['patch']\nmessage_count = 9.0\nmessages = ['328197', '328198', '328202', '328203', '328204', '328206', '328341', '404733', '409034']\nnosy_count = 8.0\nnosy_names = ['paul.moore', 'mark.dickinson', 'scoder', 'tim.golden', 'zach.ware', 'serhiy.storchaka', 'steve.dower', 'Beier Liu']\npr_nums = ['19326']\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'compile error'\nurl = 'https://bugs.python.org/issue35037'\nversions = ['Python 3.9', 'Python 3.10', 'Python 3.11']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-100137\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/79218/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/79218/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/77894",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/77894/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/77894/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/77894/events",
      "html_url": "https://github.com/python/cpython/issues/77894",
      "id": 1198992533,
      "node_id": "MDU6SXNzdWUxMTk4OTkyNTMz",
      "number": 77894,
      "title": "memoryview can set an exception in tp_clear",
      "user": {
        "login": "serhiy-storchaka",
        "id": 3659035,
        "node_id": "MDQ6VXNlcjM2NTkwMzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/serhiy-storchaka",
        "html_url": "https://github.com/serhiy-storchaka",
        "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
        "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
        "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
        "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
        "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018772048,
          "node_id": "LA_kwDOBN0Z8c7viZhQ",
          "url": "https://api.github.com/repos/python/cpython/labels/3.10",
          "name": "3.10",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018848914,
          "node_id": "LA_kwDOBN0Z8c7visSS",
          "url": "https://api.github.com/repos/python/cpython/labels/type-crash",
          "name": "type-crash",
          "color": "b60205",
          "default": false,
          "description": "A hard crash of the interpreter, possibly with a core dump"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 18,
      "created_at": "2018-05-31T12:15:11Z",
      "updated_at": "2024-09-11T09:15:57Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [33713](https://bugs.python.org/issue33713)\n--- | :---\nNosy | @pitrou, @vstinner, @skrah, @serhiy-storchaka\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2018-05-31.12:15:10.896>\nlabels = ['interpreter-core', '3.10', '3.9', 'type-crash', '3.11']\ntitle = 'memoryview can set an exception in tp_clear'\nupdated_at = <Date 2021-10-18.20:19:58.191>\nuser = 'https://github.com/serhiy-storchaka'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2021-10-18.20:19:58.191>\nactor = 'iritkatriel'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Interpreter Core']\ncreation = <Date 2018-05-31.12:15:10.896>\ncreator = 'serhiy.storchaka'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 33713\nkeywords = []\nmessage_count = 14.0\nmessages = ['318288', '318291', '318295', '318296', '318297', '318298', '318299', '318300', '318306', '318316', '318318', '318319', '318320', '318586']\nnosy_count = 4.0\nnosy_names = ['pitrou', 'vstinner', 'skrah', 'serhiy.storchaka']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = None\nstatus = 'open'\nsuperseder = None\ntype = 'crash'\nurl = 'https://bugs.python.org/issue33713'\nversions = ['Python 3.9', 'Python 3.10', 'Python 3.11']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-123898\n* gh-123936\n* gh-123937\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/77894/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/77894/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/77782",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/77782/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/77782/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/77782/events",
      "html_url": "https://github.com/python/cpython/issues/77782",
      "id": 1198991920,
      "node_id": "MDU6SXNzdWUxMTk4OTkxOTIw",
      "number": 77782,
      "title": "[doc] Py_UTF8Mode is not documented",
      "user": {
        "login": "serhiy-storchaka",
        "id": 3659035,
        "node_id": "MDQ6VXNlcjM2NTkwMzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/serhiy-storchaka",
        "html_url": "https://github.com/serhiy-storchaka",
        "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
        "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
        "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
        "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
        "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018743106,
          "node_id": "LA_kwDOBN0Z8c7viSdC",
          "url": "https://api.github.com/repos/python/cpython/labels/easy",
          "name": "easy",
          "color": "0e8a16",
          "default": false,
          "description": null
        },
        {
          "id": 4018772048,
          "node_id": "LA_kwDOBN0Z8c7viZhQ",
          "url": "https://api.github.com/repos/python/cpython/labels/3.10",
          "name": "3.10",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018772049,
          "node_id": "LA_kwDOBN0Z8c7viZhR",
          "url": "https://api.github.com/repos/python/cpython/labels/3.9",
          "name": "3.9",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
        {
          "login": "Mariatta",
          "id": 5844587,
          "node_id": "MDQ6VXNlcjU4NDQ1ODc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/5844587?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Mariatta",
          "html_url": "https://github.com/Mariatta",
          "followers_url": "https://api.github.com/users/Mariatta/followers",
          "following_url": "https://api.github.com/users/Mariatta/following{/other_user}",
          "gists_url": "https://api.github.com/users/Mariatta/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Mariatta/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Mariatta/subscriptions",
          "organizations_url": "https://api.github.com/users/Mariatta/orgs",
          "repos_url": "https://api.github.com/users/Mariatta/repos",
          "events_url": "https://api.github.com/users/Mariatta/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Mariatta/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 10,
      "created_at": "2018-05-22T13:49:41Z",
      "updated_at": "2024-01-11T16:41:14Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [33601](https://bugs.python.org/issue33601)\n--- | :---\nNosy | @ncoghlan, @vstinner, @serhiy-storchaka, @Mariatta, @Vidhyavinu\nPRs | <li>python/cpython#7143</li><li>python/cpython#31480</li>\nFiles | <li>[init.html](https://bugs.python.org/file50630/init.html \"Uploaded as text/plain at 2022-02-18.21:05:33 by @Vidhyavinu\"): c-api/init.html</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = 'https://github.com/Mariatta'\nclosed_at = None\ncreated_at = <Date 2018-05-22.13:49:41.438>\nlabels = ['easy', '3.9', '3.10', '3.11', 'type-feature', 'docs']\ntitle = '[doc] Py_UTF8Mode is not documented'\nupdated_at = <Date 2022-02-21.20:15:37.372>\nuser = 'https://github.com/serhiy-storchaka'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2022-02-21.20:15:37.372>\nactor = 'vidhya'\nassignee = 'Mariatta'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Documentation']\ncreation = <Date 2018-05-22.13:49:41.438>\ncreator = 'serhiy.storchaka'\ndependencies = []\nfiles = ['50630']\nhgrepos = []\nissue_num = 33601\nkeywords = ['patch', 'easy']\nmessage_count = 7.0\nmessages = ['317286', '317292', '317294', '338920', '413511', '413648', '413674']\nnosy_count = 6.0\nnosy_names = ['ncoghlan', 'vstinner', 'docs@python', 'serhiy.storchaka', 'Mariatta', 'vidhya']\npr_nums = ['7143', '31480']\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue33601'\nversions = ['Python 3.9', 'Python 3.10', 'Python 3.11']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-106272\n* gh-106274\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/77782/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/77782/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/77188",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/77188/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/77188/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/77188/events",
      "html_url": "https://github.com/python/cpython/issues/77188",
      "id": 1198988573,
      "node_id": "MDU6SXNzdWUxMTk4OTg4NTcz",
      "number": 77188,
      "title": "Objects referencing private-mangled names do not roundtrip properly under pickling.",
      "user": {
        "login": "379dc349-3a10-424f-b9d2-a0104f092359",
        "id": 92881619,
        "node_id": "M_kgDOBYlC0w",
        "avatar_url": "https://avatars.githubusercontent.com/u/92881619?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/379dc349-3a10-424f-b9d2-a0104f092359",
        "html_url": "https://github.com/anntzer",
        "followers_url": "https://api.github.com/users/379dc349-3a10-424f-b9d2-a0104f092359/followers",
        "following_url": "https://api.github.com/users/379dc349-3a10-424f-b9d2-a0104f092359/following{/other_user}",
        "gists_url": "https://api.github.com/users/379dc349-3a10-424f-b9d2-a0104f092359/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/379dc349-3a10-424f-b9d2-a0104f092359/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/379dc349-3a10-424f-b9d2-a0104f092359/subscriptions",
        "organizations_url": "https://api.github.com/users/379dc349-3a10-424f-b9d2-a0104f092359/orgs",
        "repos_url": "https://api.github.com/users/379dc349-3a10-424f-b9d2-a0104f092359/repos",
        "events_url": "https://api.github.com/users/379dc349-3a10-424f-b9d2-a0104f092359/events{/privacy}",
        "received_events_url": "https://api.github.com/users/379dc349-3a10-424f-b9d2-a0104f092359/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2018-03-06T05:36:52Z",
      "updated_at": "2024-01-05T12:15:26Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [33007](https://bugs.python.org/issue33007)\n--- | :---\nNosy | @avassalotti, @serhiy-storchaka, @anntzer, @MojoVampire, @ZackerySpytz\nPRs | <li>python/cpython#21480</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2018-03-06.05:36:52.125>\nlabels = ['3.8', 'library', '3.9', '3.10']\ntitle = 'Objects referencing private-mangled names do not roundtrip properly under pickling.'\nupdated_at = <Date 2020-07-15.17:51:11.385>\nuser = 'https://github.com/anntzer'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2020-07-15.17:51:11.385>\nactor = 'serhiy.storchaka'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)']\ncreation = <Date 2018-03-06.05:36:52.125>\ncreator = 'Antony.Lee'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 33007\nkeywords = ['patch']\nmessage_count = 2.0\nmessages = ['313306', '349838']\nnosy_count = 5.0\nnosy_names = ['alexandre.vassalotti', 'serhiy.storchaka', 'Antony.Lee', 'josh.r', 'ZackerySpytz']\npr_nums = ['21480']\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = None\nurl = 'https://bugs.python.org/issue33007'\nversions = ['Python 3.8', 'Python 3.9', 'Python 3.10']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-99669\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/77188/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/77188/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/76960",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/76960/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/76960/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/76960/events",
      "html_url": "https://github.com/python/cpython/issues/76960",
      "id": 1198987137,
      "node_id": "MDU6SXNzdWUxMTk4OTg3MTM3",
      "number": 76960,
      "title": "urljoining an empty query string doesn't clear query string",
      "user": {
        "login": "c29b6996-d572-4c17-906e-e392d8cb0cd9",
        "id": 99429704,
        "node_id": "M_kgDOBe0tSA",
        "avatar_url": "https://avatars.githubusercontent.com/u/99429704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/c29b6996-d572-4c17-906e-e392d8cb0cd9",
        "html_url": "https://github.com/thetorpedodog",
        "followers_url": "https://api.github.com/users/c29b6996-d572-4c17-906e-e392d8cb0cd9/followers",
        "following_url": "https://api.github.com/users/c29b6996-d572-4c17-906e-e392d8cb0cd9/following{/other_user}",
        "gists_url": "https://api.github.com/users/c29b6996-d572-4c17-906e-e392d8cb0cd9/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/c29b6996-d572-4c17-906e-e392d8cb0cd9/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/c29b6996-d572-4c17-906e-e392d8cb0cd9/subscriptions",
        "organizations_url": "https://api.github.com/users/c29b6996-d572-4c17-906e-e392d8cb0cd9/orgs",
        "repos_url": "https://api.github.com/users/c29b6996-d572-4c17-906e-e392d8cb0cd9/repos",
        "events_url": "https://api.github.com/users/c29b6996-d572-4c17-906e-e392d8cb0cd9/events{/privacy}",
        "received_events_url": "https://api.github.com/users/c29b6996-d572-4c17-906e-e392d8cb0cd9/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 13,
      "created_at": "2018-02-06T04:48:49Z",
      "updated_at": "2024-11-11T11:47:17Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [32779](https://bugs.python.org/issue32779)\n--- | :---\nNosy | @orsenthil, @asvetlov, @thetorpedodog, @iritkatriel\nPRs | <li>python/cpython#5645</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2018-02-06.04:48:49.412>\nlabels = ['type-bug', 'library', '3.9', '3.10', '3.11']\ntitle = \"urljoining an empty query string doesn't clear query string\"\nupdated_at = <Date 2021-05-28.14:36:47.327>\nuser = 'https://github.com/thetorpedodog'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2021-05-28.14:36:47.327>\nactor = 'pfish'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)']\ncreation = <Date 2018-02-06.04:48:49.412>\ncreator = 'pfish'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 32779\nkeywords = ['patch']\nmessage_count = 7.0\nmessages = ['311704', '311937', '312201', '312223', '394648', '394649', '394664']\nnosy_count = 4.0\nnosy_names = ['orsenthil', 'asvetlov', 'pfish', 'iritkatriel']\npr_nums = ['5645']\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue32779'\nversions = ['Python 3.9', 'Python 3.10', 'Python 3.11']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-123273\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/76960/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/76960/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/76637",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/76637/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/76637/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/76637/events",
      "html_url": "https://github.com/python/cpython/issues/76637",
      "id": 1198985120,
      "node_id": "MDU6SXNzdWUxMTk4OTg1MTIw",
      "number": 76637,
      "title": "PYTHONIOENCODING=undefined doesn't work in Python 3",
      "user": {
        "login": "serhiy-storchaka",
        "id": 3659035,
        "node_id": "MDQ6VXNlcjM2NTkwMzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/serhiy-storchaka",
        "html_url": "https://github.com/serhiy-storchaka",
        "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
        "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
        "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
        "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
        "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018694952,
          "node_id": "LA_kwDOBN0Z8c7viGso",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-unicode",
          "name": "topic-unicode",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4018775329,
          "node_id": "LA_kwDOBN0Z8c7viaUh",
          "url": "https://api.github.com/repos/python/cpython/labels/3.7%20(EOL)",
          "name": "3.7 (EOL)",
          "color": "888888",
          "default": false,
          "description": "end of life"
        },
        {
          "id": 4018834665,
          "node_id": "LA_kwDOBN0Z8c7viozp",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-IO",
          "name": "topic-IO",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 14,
      "created_at": "2017-12-30T16:26:14Z",
      "updated_at": "2024-01-19T09:25:12Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [32456](https://bugs.python.org/issue32456)\n--- | :---\nNosy | @malemburg, @ncoghlan, @vstinner, @benjaminp, @ezio-melotti, @vadmium, @serhiy-storchaka\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2017-12-30.16:26:14.027>\nlabels = ['interpreter-core', 'type-bug', '3.7', 'expert-unicode', 'expert-IO']\ntitle = \"PYTHONIOENCODING=undefined doesn't work in Python 3\"\nupdated_at = <Date 2018-01-03.11:01:14.784>\nuser = 'https://github.com/serhiy-storchaka'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2018-01-03.11:01:14.784>\nactor = 'serhiy.storchaka'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Interpreter Core', 'Unicode', 'IO']\ncreation = <Date 2017-12-30.16:26:14.027>\ncreator = 'serhiy.storchaka'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 32456\nkeywords = []\nmessage_count = 5.0\nmessages = ['309237', '309390', '309404', '309406', '309408']\nnosy_count = 7.0\nnosy_names = ['lemburg', 'ncoghlan', 'vstinner', 'benjamin.peterson', 'ezio.melotti', 'martin.panter', 'serhiy.storchaka']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = None\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue32456'\nversions = ['Python 3.6', 'Python 3.7']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-113834\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/76637/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/76637/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/75710",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/75710/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/75710/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/75710/events",
      "html_url": "https://github.com/python/cpython/issues/75710",
      "id": 1198979686,
      "node_id": "MDU6SXNzdWUxMTk4OTc5Njg2",
      "number": 75710,
      "title": "IDLE: Add docstrings and tests for editor.py reload functions",
      "user": {
        "login": "csabella",
        "id": 25619791,
        "node_id": "MDQ6VXNlcjI1NjE5Nzkx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25619791?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/csabella",
        "html_url": "https://github.com/csabella",
        "followers_url": "https://api.github.com/users/csabella/followers",
        "following_url": "https://api.github.com/users/csabella/following{/other_user}",
        "gists_url": "https://api.github.com/users/csabella/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/csabella/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/csabella/subscriptions",
        "organizations_url": "https://api.github.com/users/csabella/orgs",
        "repos_url": "https://api.github.com/users/csabella/repos",
        "events_url": "https://api.github.com/users/csabella/events{/privacy}",
        "received_events_url": "https://api.github.com/users/csabella/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 4018676472,
          "node_id": "LA_kwDOBN0Z8c7viCL4",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-IDLE",
          "name": "topic-IDLE",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
        {
          "login": "terryjreedy",
          "id": 19036496,
          "node_id": "MDQ6VXNlcjE5MDM2NDk2",
          "avatar_url": "https://avatars.githubusercontent.com/u/19036496?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/terryjreedy",
          "html_url": "https://github.com/terryjreedy",
          "followers_url": "https://api.github.com/users/terryjreedy/followers",
          "following_url": "https://api.github.com/users/terryjreedy/following{/other_user}",
          "gists_url": "https://api.github.com/users/terryjreedy/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/terryjreedy/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/terryjreedy/subscriptions",
          "organizations_url": "https://api.github.com/users/terryjreedy/orgs",
          "repos_url": "https://api.github.com/users/terryjreedy/repos",
          "events_url": "https://api.github.com/users/terryjreedy/events{/privacy}",
          "received_events_url": "https://api.github.com/users/terryjreedy/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-09-20T13:06:21Z",
      "updated_at": "2024-08-06T17:49:01Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [31529](https://bugs.python.org/issue31529)\n--- | :---\nNosy | @terryjreedy, @csabella\nPRs | <li>python/cpython#3669</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = 'https://github.com/terryjreedy'\nclosed_at = None\ncreated_at = <Date 2017-09-20.13:06:20.730>\nlabels = ['expert-IDLE', 'type-feature', '3.7']\ntitle = 'IDLE: Add docstrings and tests for editor.py reload functions'\nupdated_at = <Date 2018-05-23.04:43:16.595>\nuser = 'https://github.com/csabella'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2018-05-23.04:43:16.595>\nactor = 'terry.reedy'\nassignee = 'terry.reedy'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['IDLE']\ncreation = <Date 2017-09-20.13:06:20.730>\ncreator = 'cheryl.sabella'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 31529\nkeywords = ['patch']\nmessage_count = 4.0\nmessages = ['302609', '302704', '311623', '317352']\nnosy_count = 2.0\nnosy_names = ['terry.reedy', 'cheryl.sabella']\npr_nums = ['3669']\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue31529'\nversions = ['Python 3.6', 'Python 3.7']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-104446\n* gh-104450\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/75710/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/75710/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/75666",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/75666/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/75666/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/75666/events",
      "html_url": "https://github.com/python/cpython/issues/75666",
      "id": 1198979434,
      "node_id": "MDU6SXNzdWUxMTk4OTc5NDM0",
      "number": 75666,
      "title": "Tkinter widget.unbind(sequence, funcid) unbind all bindings",
      "user": {
        "login": "2ef01535-b470-4c17-b590-e6661f445174",
        "id": 99430065,
        "node_id": "M_kgDOBe0usQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/99430065?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2ef01535-b470-4c17-b590-e6661f445174",
        "html_url": "https://github.com/j4321",
        "followers_url": "https://api.github.com/users/2ef01535-b470-4c17-b590-e6661f445174/followers",
        "following_url": "https://api.github.com/users/2ef01535-b470-4c17-b590-e6661f445174/following{/other_user}",
        "gists_url": "https://api.github.com/users/2ef01535-b470-4c17-b590-e6661f445174/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2ef01535-b470-4c17-b590-e6661f445174/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2ef01535-b470-4c17-b590-e6661f445174/subscriptions",
        "organizations_url": "https://api.github.com/users/2ef01535-b470-4c17-b590-e6661f445174/orgs",
        "repos_url": "https://api.github.com/users/2ef01535-b470-4c17-b590-e6661f445174/repos",
        "events_url": "https://api.github.com/users/2ef01535-b470-4c17-b590-e6661f445174/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2ef01535-b470-4c17-b590-e6661f445174/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018676065,
          "node_id": "LA_kwDOBN0Z8c7viCFh",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-tkinter",
          "name": "topic-tkinter",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "serhiy-storchaka",
        "id": 3659035,
        "node_id": "MDQ6VXNlcjM2NTkwMzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/serhiy-storchaka",
        "html_url": "https://github.com/serhiy-storchaka",
        "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
        "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
        "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
        "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
        "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "serhiy-storchaka",
          "id": 3659035,
          "node_id": "MDQ6VXNlcjM2NTkwMzU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/serhiy-storchaka",
          "html_url": "https://github.com/serhiy-storchaka",
          "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
          "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
          "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
          "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
          "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
          "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
          "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        {
          "login": "terryjreedy",
          "id": 19036496,
          "node_id": "MDQ6VXNlcjE5MDM2NDk2",
          "avatar_url": "https://avatars.githubusercontent.com/u/19036496?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/terryjreedy",
          "html_url": "https://github.com/terryjreedy",
          "followers_url": "https://api.github.com/users/terryjreedy/followers",
          "following_url": "https://api.github.com/users/terryjreedy/following{/other_user}",
          "gists_url": "https://api.github.com/users/terryjreedy/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/terryjreedy/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/terryjreedy/subscriptions",
          "organizations_url": "https://api.github.com/users/terryjreedy/orgs",
          "repos_url": "https://api.github.com/users/terryjreedy/repos",
          "events_url": "https://api.github.com/users/terryjreedy/events{/privacy}",
          "received_events_url": "https://api.github.com/users/terryjreedy/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 21,
      "created_at": "2017-09-15T13:57:14Z",
      "updated_at": "2024-01-11T16:31:57Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [31485](https://bugs.python.org/issue31485)\n--- | :---\nNosy | @terryjreedy, @serhiy-storchaka, @j4321, @GiovaLomba\nPRs | <li>python/cpython#17954</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2017-09-15.13:57:14.322>\nlabels = ['type-feature', 'expert-tkinter', '3.10']\ntitle = 'Tkinter widget.unbind(sequence, funcid) unbind all bindings'\nupdated_at = <Date 2020-05-26.07:51:27.964>\nuser = 'https://github.com/j4321'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2020-05-26.07:51:27.964>\nactor = 'terry.reedy'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Tkinter']\ncreation = <Date 2017-09-15.13:57:14.322>\ncreator = 'j-4321-i'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 31485\nkeywords = ['patch']\nmessage_count = 10.0\nmessages = ['302256', '302258', '302262', '302293', '302299', '302487', '358227', '359369', '360142', '360145']\nnosy_count = 4.0\nnosy_names = ['terry.reedy', 'serhiy.storchaka', 'j-4321-i', 'glombardo']\npr_nums = ['17954']\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue31485'\nversions = ['Python 3.10']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-111202\n* gh-111255\n* gh-111256\n* gh-111322\n* gh-112801\n* gh-112802\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/75666/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/75666/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/74481",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/74481/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/74481/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/74481/events",
      "html_url": "https://github.com/python/cpython/issues/74481",
      "id": 1198972905,
      "node_id": "MDU6SXNzdWUxMTk4OTcyOTA1",
      "number": 74481,
      "title": "msvcrt SetErrorMode not documented",
      "user": {
        "login": "giampaolo",
        "id": 681260,
        "node_id": "MDQ6VXNlcjY4MTI2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/681260?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/giampaolo",
        "html_url": "https://github.com/giampaolo",
        "followers_url": "https://api.github.com/users/giampaolo/followers",
        "following_url": "https://api.github.com/users/giampaolo/following{/other_user}",
        "gists_url": "https://api.github.com/users/giampaolo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/giampaolo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/giampaolo/subscriptions",
        "organizations_url": "https://api.github.com/users/giampaolo/orgs",
        "repos_url": "https://api.github.com/users/giampaolo/repos",
        "events_url": "https://api.github.com/users/giampaolo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/giampaolo/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 570103914,
          "node_id": "MDU6TGFiZWw1NzAxMDM5MTQ=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-windows",
          "name": "OS-windows",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018772048,
          "node_id": "LA_kwDOBN0Z8c7viZhQ",
          "url": "https://api.github.com/repos/python/cpython/labels/3.10",
          "name": "3.10",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018772049,
          "node_id": "LA_kwDOBN0Z8c7viZhR",
          "url": "https://api.github.com/repos/python/cpython/labels/3.9",
          "name": "3.9",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018775327,
          "node_id": "LA_kwDOBN0Z8c7viaUf",
          "url": "https://api.github.com/repos/python/cpython/labels/3.8%20(EOL)",
          "name": "3.8 (EOL)",
          "color": "888888",
          "default": false,
          "description": "end of life"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-05-07T12:24:21Z",
      "updated_at": "2023-09-23T14:34:57Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [30295](https://bugs.python.org/issue30295)\n--- | :---\nNosy | @pfmoore, @giampaolo, @tjguk, @zware, @eryksun, @zooba\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2017-05-07.12:24:20.777>\nlabels = ['3.8', '3.9', '3.10', 'type-feature', 'library', 'OS-windows', 'docs']\ntitle = 'msvcrt SetErrorMode not documented'\nupdated_at = <Date 2021-03-06.15:34:24.241>\nuser = 'https://github.com/giampaolo'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2021-03-06.15:34:24.241>\nactor = 'eryksun'\nassignee = 'docs@python'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Documentation', 'Library (Lib)', 'Windows']\ncreation = <Date 2017-05-07.12:24:20.777>\ncreator = 'giampaolo.rodola'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 30295\nkeywords = []\nmessage_count = 2.0\nmessages = ['293189', '293200']\nnosy_count = 7.0\nnosy_names = ['paul.moore', 'giampaolo.rodola', 'tim.golden', 'docs@python', 'zach.ware', 'eryksun', 'steve.dower']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = None\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue30295'\nversions = ['Python 3.8', 'Python 3.9', 'Python 3.10']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-109650\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/74481/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/74481/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/74182",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/74182/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/74182/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/74182/events",
      "html_url": "https://github.com/python/cpython/issues/74182",
      "id": 1198971215,
      "node_id": "MDU6SXNzdWUxMTk4OTcxMjE1",
      "number": 74182,
      "title": "Use terminal width by default in pprint",
      "user": {
        "login": "serhiy-storchaka",
        "id": 3659035,
        "node_id": "MDQ6VXNlcjM2NTkwMzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/serhiy-storchaka",
        "html_url": "https://github.com/serhiy-storchaka",
        "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
        "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
        "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
        "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
        "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018772048,
          "node_id": "LA_kwDOBN0Z8c7viZhQ",
          "url": "https://api.github.com/repos/python/cpython/labels/3.10",
          "name": "3.10",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018772049,
          "node_id": "LA_kwDOBN0Z8c7viZhR",
          "url": "https://api.github.com/repos/python/cpython/labels/3.9",
          "name": "3.9",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018775327,
          "node_id": "LA_kwDOBN0Z8c7viaUf",
          "url": "https://api.github.com/repos/python/cpython/labels/3.8%20(EOL)",
          "name": "3.8 (EOL)",
          "color": "888888",
          "default": false,
          "description": "end of life"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 13,
      "created_at": "2017-04-05T16:29:17Z",
      "updated_at": "2023-06-12T08:43:59Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [29996](https://bugs.python.org/issue29996)\n--- | :---\nNosy | @freddrake, @rhettinger, @merwok, @serhiy-storchaka, @eryksun, @MojoVampire, @zhangyangyu\nPRs | <li>python/cpython#1008</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = <Date 2021-03-20.08:38:43.627>\ncreated_at = <Date 2017-04-05.16:29:16.812>\nlabels = ['3.8', 'type-feature', 'library', '3.9', '3.10']\ntitle = 'Use terminal width by default in pprint'\nupdated_at = <Date 2021-03-20.08:38:43.626>\nuser = 'https://github.com/serhiy-storchaka'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2021-03-20.08:38:43.626>\nactor = 'serhiy.storchaka'\nassignee = 'none'\nclosed = True\nclosed_date = <Date 2021-03-20.08:38:43.627>\ncloser = 'serhiy.storchaka'\ncomponents = ['Library (Lib)']\ncreation = <Date 2017-04-05.16:29:16.812>\ncreator = 'serhiy.storchaka'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 29996\nkeywords = []\nmessage_count = 12.0\nmessages = ['291187', '291195', '291196', '291197', '291238', '291239', '291240', '291243', '291244', '291248', '301157', '389149']\nnosy_count = 7.0\nnosy_names = ['fdrake', 'rhettinger', 'eric.araujo', 'serhiy.storchaka', 'eryksun', 'josh.r', 'xiang.zhang']\npr_nums = ['1008']\npriority = 'normal'\nresolution = 'rejected'\nstage = 'resolved'\nstatus = 'closed'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue29996'\nversions = ['Python 3.8', 'Python 3.9', 'Python 3.10']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-105631\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "serhiy-storchaka",
        "id": 3659035,
        "node_id": "MDQ6VXNlcjM2NTkwMzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/serhiy-storchaka",
        "html_url": "https://github.com/serhiy-storchaka",
        "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
        "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
        "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
        "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
        "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/74182/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/74182/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/73456",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/73456/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/73456/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/73456/events",
      "html_url": "https://github.com/python/cpython/issues/73456",
      "id": 1198966810,
      "node_id": "MDU6SXNzdWUxMTk4OTY2ODEw",
      "number": 73456,
      "title": "ctypes: fail to create a _ctypes._SimpleCData subclass using a closure like calling super() without arguments",
      "user": {
        "login": "e1d2052b-073a-490c-9940-80dad2000cd3",
        "id": 101766934,
        "node_id": "M_kgDOBhDXFg",
        "avatar_url": "https://avatars.githubusercontent.com/u/101766934?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/e1d2052b-073a-490c-9940-80dad2000cd3",
        "html_url": "https://github.com/waveform80",
        "followers_url": "https://api.github.com/users/e1d2052b-073a-490c-9940-80dad2000cd3/followers",
        "following_url": "https://api.github.com/users/e1d2052b-073a-490c-9940-80dad2000cd3/following{/other_user}",
        "gists_url": "https://api.github.com/users/e1d2052b-073a-490c-9940-80dad2000cd3/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/e1d2052b-073a-490c-9940-80dad2000cd3/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/e1d2052b-073a-490c-9940-80dad2000cd3/subscriptions",
        "organizations_url": "https://api.github.com/users/e1d2052b-073a-490c-9940-80dad2000cd3/orgs",
        "repos_url": "https://api.github.com/users/e1d2052b-073a-490c-9940-80dad2000cd3/repos",
        "events_url": "https://api.github.com/users/e1d2052b-073a-490c-9940-80dad2000cd3/events{/privacy}",
        "received_events_url": "https://api.github.com/users/e1d2052b-073a-490c-9940-80dad2000cd3/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 2211400743,
          "node_id": "MDU6TGFiZWwyMjExNDAwNzQz",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-ctypes",
          "name": "topic-ctypes",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 15,
      "created_at": "2017-01-13T22:10:22Z",
      "updated_at": "2024-02-01T20:43:01Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [29270](https://bugs.python.org/issue29270)\n--- | :---\nNosy | @ncoghlan, @vstinner, @serhiy-storchaka, @eryksun, @https://github.com/hakril, @waveform80\nFiles | <li>[issue_29270_01.patch](https://bugs.python.org/file46285/issue_29270_01.patch \"Uploaded as text/plain at 2017-01-14.02:15:12 by @eryksun\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2017-01-13.22:10:22.119>\nlabels = ['ctypes', 'type-bug', '3.9', '3.10', '3.11']\ntitle = 'ctypes: fail to create a _ctypes._SimpleCData subclass using a closure like calling super() without arguments'\nupdated_at = <Date 2022-03-28.22:12:40.498>\nuser = 'https://github.com/waveform80'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2022-03-28.22:12:40.498>\nactor = 'vstinner'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['ctypes']\ncreation = <Date 2017-01-13.22:10:22.119>\ncreator = 'Dave Jones'\ndependencies = []\nfiles = ['46285']\nhgrepos = []\nissue_num = 29270\nkeywords = ['patch']\nmessage_count = 14.0\nmessages = ['285444', '285450', '285454', '285469', '285473', '285474', '285475', '285480', '286287', '286310', '313985', '355368', '360252', '416219']\nnosy_count = 7.0\nnosy_names = ['ncoghlan', 'vstinner', 'serhiy.storchaka', 'eryksun', 'hakril', 'Dave Jones', 'Asdger Gdsfe']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = 'needs patch'\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue29270'\nversions = ['Python 3.9', 'Python 3.10', 'Python 3.11']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-104576\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/73456/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/73456/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/72284",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/72284/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/72284/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/72284/events",
      "html_url": "https://github.com/python/cpython/issues/72284",
      "id": 1198958974,
      "node_id": "MDU6SXNzdWUxMTk4OTU4OTc0",
      "number": 72284,
      "title": "IDLE: document all key bindings, add menu items for more.",
      "user": {
        "login": "terryjreedy",
        "id": 19036496,
        "node_id": "MDQ6VXNlcjE5MDM2NDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/19036496?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/terryjreedy",
        "html_url": "https://github.com/terryjreedy",
        "followers_url": "https://api.github.com/users/terryjreedy/followers",
        "following_url": "https://api.github.com/users/terryjreedy/following{/other_user}",
        "gists_url": "https://api.github.com/users/terryjreedy/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/terryjreedy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/terryjreedy/subscriptions",
        "organizations_url": "https://api.github.com/users/terryjreedy/orgs",
        "repos_url": "https://api.github.com/users/terryjreedy/repos",
        "events_url": "https://api.github.com/users/terryjreedy/events{/privacy}",
        "received_events_url": "https://api.github.com/users/terryjreedy/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018676472,
          "node_id": "LA_kwDOBN0Z8c7viCL4",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-IDLE",
          "name": "topic-IDLE",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
        {
          "login": "terryjreedy",
          "id": 19036496,
          "node_id": "MDQ6VXNlcjE5MDM2NDk2",
          "avatar_url": "https://avatars.githubusercontent.com/u/19036496?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/terryjreedy",
          "html_url": "https://github.com/terryjreedy",
          "followers_url": "https://api.github.com/users/terryjreedy/followers",
          "following_url": "https://api.github.com/users/terryjreedy/following{/other_user}",
          "gists_url": "https://api.github.com/users/terryjreedy/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/terryjreedy/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/terryjreedy/subscriptions",
          "organizations_url": "https://api.github.com/users/terryjreedy/orgs",
          "repos_url": "https://api.github.com/users/terryjreedy/repos",
          "events_url": "https://api.github.com/users/terryjreedy/events{/privacy}",
          "received_events_url": "https://api.github.com/users/terryjreedy/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2016-09-12T07:03:31Z",
      "updated_at": "2024-08-06T17:25:40Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [28097](https://bugs.python.org/issue28097)\n--- | :---\nNosy | @terryjreedy, @csabella, @miss-islington\nPRs | <li>python/cpython#11325</li><li>python/cpython#11345</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = 'https://github.com/terryjreedy'\nclosed_at = None\ncreated_at = <Date 2016-09-12.07:03:30.950>\nlabels = ['3.8', 'expert-IDLE', 'type-bug', '3.7']\ntitle = 'IDLE: document all key bindings, add menu items for more.'\nupdated_at = <Date 2018-12-28.20:29:46.499>\nuser = 'https://github.com/terryjreedy'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2018-12-28.20:29:46.499>\nactor = 'miss-islington'\nassignee = 'terry.reedy'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['IDLE']\ncreation = <Date 2016-09-12.07:03:30.950>\ncreator = 'terry.reedy'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 28097\nkeywords = ['patch', 'patch', 'patch']\nmessage_count = 7.0\nmessages = ['275980', '278326', '332560', '332641', '332673', '332678', '332679']\nnosy_count = 3.0\nnosy_names = ['terry.reedy', 'cheryl.sabella', 'miss-islington']\npr_nums = ['11325', '11345']\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue28097'\nversions = ['Python 3.7', 'Python 3.8']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-114174\n* gh-114175\n* gh-114176\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/72284/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/72284/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/70278",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/70278/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/70278/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/70278/events",
      "html_url": "https://github.com/python/cpython/issues/70278",
      "id": 1198946744,
      "node_id": "MDU6SXNzdWUxMTk4OTQ2NzQ0",
      "number": 70278,
      "title": "More correct string truncating in PyUnicode_FromFormat()",
      "user": {
        "login": "serhiy-storchaka",
        "id": 3659035,
        "node_id": "MDQ6VXNlcjM2NTkwMzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/serhiy-storchaka",
        "html_url": "https://github.com/serhiy-storchaka",
        "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
        "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
        "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
        "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
        "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 7,
      "created_at": "2016-01-12T09:54:15Z",
      "updated_at": "2024-06-12T09:13:42Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [26090](https://bugs.python.org/issue26090)\n--- | :---\nNosy | @gvanrossum, @vstinner, @ezio-melotti, @serhiy-storchaka\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2016-01-12.09:54:14.845>\nlabels = ['interpreter-core', 'type-feature']\ntitle = 'More correct string truncating in PyUnicode_FromFormat()'\nupdated_at = <Date 2016-06-21.07:22:59.885>\nuser = 'https://github.com/serhiy-storchaka'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2016-06-21.07:22:59.885>\nactor = 'Drekin'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Interpreter Core']\ncreation = <Date 2016-01-12.09:54:14.845>\ncreator = 'serhiy.storchaka'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 26090\nkeywords = []\nmessage_count = 5.0\nmessages = ['258092', '258095', '258108', '258111', '258118']\nnosy_count = 5.0\nnosy_names = ['gvanrossum', 'vstinner', 'ezio.melotti', 'serhiy.storchaka', 'Drekin']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = 'needs patch'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue26090'\nversions = ['Python 3.6']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-120365\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/70278/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/70278/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/69753",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/69753/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/69753/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/69753/events",
      "html_url": "https://github.com/python/cpython/issues/69753",
      "id": 1198943574,
      "node_id": "MDU6SXNzdWUxMTk4OTQzNTc0",
      "number": 69753,
      "title": "shlex.quote doesn't work on bytestrings",
      "user": {
        "login": "32835a6c-75a4-4231-9231-3d8eb0d9d3a0",
        "id": 101775022,
        "node_id": "M_kgDOBhD2rg",
        "avatar_url": "https://avatars.githubusercontent.com/u/101775022?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/32835a6c-75a4-4231-9231-3d8eb0d9d3a0",
        "html_url": "https://github.com/JonasThiem",
        "followers_url": "https://api.github.com/users/32835a6c-75a4-4231-9231-3d8eb0d9d3a0/followers",
        "following_url": "https://api.github.com/users/32835a6c-75a4-4231-9231-3d8eb0d9d3a0/following{/other_user}",
        "gists_url": "https://api.github.com/users/32835a6c-75a4-4231-9231-3d8eb0d9d3a0/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/32835a6c-75a4-4231-9231-3d8eb0d9d3a0/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/32835a6c-75a4-4231-9231-3d8eb0d9d3a0/subscriptions",
        "organizations_url": "https://api.github.com/users/32835a6c-75a4-4231-9231-3d8eb0d9d3a0/orgs",
        "repos_url": "https://api.github.com/users/32835a6c-75a4-4231-9231-3d8eb0d9d3a0/repos",
        "events_url": "https://api.github.com/users/32835a6c-75a4-4231-9231-3d8eb0d9d3a0/events{/privacy}",
        "received_events_url": "https://api.github.com/users/32835a6c-75a4-4231-9231-3d8eb0d9d3a0/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 11,
      "created_at": "2015-11-06T12:52:24Z",
      "updated_at": "2024-12-15T11:53:56Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [25567](https://bugs.python.org/issue25567)\n--- | :---\nNosy | @bitdancer, @vadmium, @The-Compiler, @willingc, @csabella, @tirkarthi, @aldwinaldwin, @HassanAbouelela, @hrik2001\nPRs | <li>python/cpython#10871</li><li>python/cpython#22657</li>\nFiles | <li>[shlex_quote_bytes_support.patch](https://bugs.python.org/file40992/shlex_quote_bytes_support.patch \"Uploaded as text/plain at 2015-11-10.03:27:53 by Nan Wu\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2015-11-06.12:52:23.798>\nlabels = ['easy', 'type-feature', 'library', '3.10']\ntitle = \"shlex.quote doesn't work on bytestrings\"\nupdated_at = <Date 2021-04-26.21:09:05.326>\nuser = 'https://bugs.python.org/JonasThiem'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2021-04-26.21:09:05.326>\nactor = 'hrik2001'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)']\ncreation = <Date 2015-11-06.12:52:23.798>\ncreator = 'Jonas Thiem'\ndependencies = []\nfiles = ['40992']\nhgrepos = []\nissue_num = 25567\nkeywords = ['patch', 'easy']\nmessage_count = 9.0\nmessages = ['254186', '254196', '254429', '256413', '326163', '345569', '370274', '385605', '391986']\nnosy_count = 12.0\nnosy_names = ['r.david.murray', 'martin.panter', 'The Compiler', 'willingc', 'Nan Wu', 'Jonas Thiem', 'cheryl.sabella', 'xtreak', 'aldwinaldwin', 'HassanAbouelela', 'techfixya', 'hrik2001']\npr_nums = ['10871', '22657']\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue25567'\nversions = ['Python 3.10']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-121741\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/69753/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/69753/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/69639",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/69639/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/69639/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/69639/events",
      "html_url": "https://github.com/python/cpython/issues/69639",
      "id": 1198942983,
      "node_id": "MDU6SXNzdWUxMTk4OTQyOTgz",
      "number": 69639,
      "title": "Arithmetics with complex infinities is inconsistent with C/C++",
      "user": {
        "login": "326e1fe0-4c40-4e08-a9b7-069ffdf24d01",
        "id": 101771972,
        "node_id": "M_kgDOBhDqxA",
        "avatar_url": "https://avatars.githubusercontent.com/u/101771972?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/326e1fe0-4c40-4e08-a9b7-069ffdf24d01",
        "html_url": "https://github.com/FrancescoBiscani",
        "followers_url": "https://api.github.com/users/326e1fe0-4c40-4e08-a9b7-069ffdf24d01/followers",
        "following_url": "https://api.github.com/users/326e1fe0-4c40-4e08-a9b7-069ffdf24d01/following{/other_user}",
        "gists_url": "https://api.github.com/users/326e1fe0-4c40-4e08-a9b7-069ffdf24d01/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/326e1fe0-4c40-4e08-a9b7-069ffdf24d01/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/326e1fe0-4c40-4e08-a9b7-069ffdf24d01/subscriptions",
        "organizations_url": "https://api.github.com/users/326e1fe0-4c40-4e08-a9b7-069ffdf24d01/orgs",
        "repos_url": "https://api.github.com/users/326e1fe0-4c40-4e08-a9b7-069ffdf24d01/repos",
        "events_url": "https://api.github.com/users/326e1fe0-4c40-4e08-a9b7-069ffdf24d01/events{/privacy}",
        "received_events_url": "https://api.github.com/users/326e1fe0-4c40-4e08-a9b7-069ffdf24d01/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "skirpichev",
        "id": 2155800,
        "node_id": "MDQ6VXNlcjIxNTU4MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2155800?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skirpichev",
        "html_url": "https://github.com/skirpichev",
        "followers_url": "https://api.github.com/users/skirpichev/followers",
        "following_url": "https://api.github.com/users/skirpichev/following{/other_user}",
        "gists_url": "https://api.github.com/users/skirpichev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/skirpichev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/skirpichev/subscriptions",
        "organizations_url": "https://api.github.com/users/skirpichev/orgs",
        "repos_url": "https://api.github.com/users/skirpichev/repos",
        "events_url": "https://api.github.com/users/skirpichev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/skirpichev/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "skirpichev",
          "id": 2155800,
          "node_id": "MDQ6VXNlcjIxNTU4MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2155800?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/skirpichev",
          "html_url": "https://github.com/skirpichev",
          "followers_url": "https://api.github.com/users/skirpichev/followers",
          "following_url": "https://api.github.com/users/skirpichev/following{/other_user}",
          "gists_url": "https://api.github.com/users/skirpichev/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/skirpichev/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/skirpichev/subscriptions",
          "organizations_url": "https://api.github.com/users/skirpichev/orgs",
          "repos_url": "https://api.github.com/users/skirpichev/repos",
          "events_url": "https://api.github.com/users/skirpichev/events{/privacy}",
          "received_events_url": "https://api.github.com/users/skirpichev/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 17,
      "created_at": "2015-10-21T12:20:44Z",
      "updated_at": "2024-10-01T08:27:56Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [25453](https://bugs.python.org/issue25453)\n--- | :---\nNosy | @malemburg, @tim-one, @mdickinson, @ericvsmith, @ezio-melotti, @stevendaprano, @asmeurer, @berkerpeksag\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2015-10-21.12:20:43.550>\nlabels = ['interpreter-core', 'type-feature']\ntitle = 'Arithmetics with complex infinities is inconsistent with C/C++'\nupdated_at = <Date 2016-05-16.21:29:52.095>\nuser = 'https://bugs.python.org/FrancescoBiscani'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2016-05-16.21:29:52.095>\nactor = 'Aaron.Meurer'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Interpreter Core']\ncreation = <Date 2015-10-21.12:20:43.550>\ncreator = 'Francesco Biscani'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 25453\nkeywords = []\nmessage_count = 15.0\nmessages = ['253283', '253284', '253286', '253289', '253290', '253293', '253295', '253296', '253297', '253301', '253304', '253305', '253306', '253308', '253337']\nnosy_count = 11.0\nnosy_names = ['lemburg', 'tim.peters', 'mark.dickinson', 'eric.smith', 'stutzbach', 'ezio.melotti', 'steven.daprano', 'Aaron.Meurer', 'berker.peksag', 'Francesco Biscani', 'Saksham Agrawal']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = None\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue25453'\nversions = ['Python 3.6']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124829\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/69639/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/69639/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/69557",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/69557/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/69557/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/69557/events",
      "html_url": "https://github.com/python/cpython/issues/69557",
      "id": 1198942523,
      "node_id": "MDU6SXNzdWUxMTk4OTQyNTIz",
      "number": 69557,
      "title": "Add support of pickling very large bytes and str objects with protocol < 4",
      "user": {
        "login": "serhiy-storchaka",
        "id": 3659035,
        "node_id": "MDQ6VXNlcjM2NTkwMzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/serhiy-storchaka",
        "html_url": "https://github.com/serhiy-storchaka",
        "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
        "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
        "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
        "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
        "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018672955,
          "node_id": "LA_kwDOBN0Z8c7viBU7",
          "url": "https://api.github.com/repos/python/cpython/labels/extension-modules",
          "name": "extension-modules",
          "color": "09fc59",
          "default": false,
          "description": "C modules in the Modules dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2015-10-10T20:03:10Z",
      "updated_at": "2022-12-23T18:36:06Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [25370](https://bugs.python.org/issue25370)\n--- | :---\nNosy | @pitrou, @avassalotti, @serhiy-storchaka\nFiles | <li>[pickle_large_strings_2.patch](https://bugs.python.org/file40781/pickle_large_strings_2.patch \"Uploaded as text/plain at 2015-10-14.10:14:11 by @serhiy-storchaka\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2015-10-10.20:03:10.022>\nlabels = ['extension-modules', 'type-feature', 'library']\ntitle = 'Add support of pickling very large bytes and str objects with protocol < 4'\nupdated_at = <Date 2018-04-08.16:55:06.625>\nuser = 'https://github.com/serhiy-storchaka'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2018-04-08.16:55:06.625>\nactor = 'pitrou'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Extension Modules', 'Library (Lib)']\ncreation = <Date 2015-10-10.20:03:10.022>\ncreator = 'serhiy.storchaka'\ndependencies = []\nfiles = ['40781']\nhgrepos = []\nissue_num = 25370\nkeywords = ['patch']\nmessage_count = 4.0\nmessages = ['252745', '252956', '252983', '315087']\nnosy_count = 4.0\nnosy_names = ['pitrou', 'alexandre.vassalotti', 'serhiy.storchaka', 'i3v']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue25370'\nversions = ['Python 3.6']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-100469\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/69557/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/69557/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/68335",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/68335/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/68335/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/68335/events",
      "html_url": "https://github.com/python/cpython/issues/68335",
      "id": 1198935067,
      "node_id": "MDU6SXNzdWUxMTk4OTM1MDY3",
      "number": 68335,
      "title": "Dialect class defaults are not documented.",
      "user": {
        "login": "67c2a47c-b60f-407f-89c9-6d706c900abf",
        "id": 101769304,
        "node_id": "M_kgDOBhDgWA",
        "avatar_url": "https://avatars.githubusercontent.com/u/101769304?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/67c2a47c-b60f-407f-89c9-6d706c900abf",
        "html_url": "https://github.com/MiK",
        "followers_url": "https://api.github.com/users/67c2a47c-b60f-407f-89c9-6d706c900abf/followers",
        "following_url": "https://api.github.com/users/67c2a47c-b60f-407f-89c9-6d706c900abf/following{/other_user}",
        "gists_url": "https://api.github.com/users/67c2a47c-b60f-407f-89c9-6d706c900abf/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/67c2a47c-b60f-407f-89c9-6d706c900abf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/67c2a47c-b60f-407f-89c9-6d706c900abf/subscriptions",
        "organizations_url": "https://api.github.com/users/67c2a47c-b60f-407f-89c9-6d706c900abf/orgs",
        "repos_url": "https://api.github.com/users/67c2a47c-b60f-407f-89c9-6d706c900abf/repos",
        "events_url": "https://api.github.com/users/67c2a47c-b60f-407f-89c9-6d706c900abf/events{/privacy}",
        "received_events_url": "https://api.github.com/users/67c2a47c-b60f-407f-89c9-6d706c900abf/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018743106,
          "node_id": "LA_kwDOBN0Z8c7viSdC",
          "url": "https://api.github.com/repos/python/cpython/labels/easy",
          "name": "easy",
          "color": "0e8a16",
          "default": false,
          "description": null
        },
        {
          "id": 4018772048,
          "node_id": "LA_kwDOBN0Z8c7viZhQ",
          "url": "https://api.github.com/repos/python/cpython/labels/3.10",
          "name": "3.10",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 16,
      "created_at": "2015-05-09T01:05:19Z",
      "updated_at": "2024-02-09T06:16:51Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [24147](https://bugs.python.org/issue24147)\n--- | :---\nNosy | @smontanaro, @bitdancer, @berkerpeksag, @iritkatriel, @uniocto\nPRs | <li>python/cpython#25989</li>\nFiles | <li>[sans_headers.csv](https://bugs.python.org/file39328/sans_headers.csv \"Uploaded as text/csv at 2015-05-09.16:29:21 by MiK\")</li><li>[quotebug.py](https://bugs.python.org/file39406/quotebug.py \"Uploaded as text/plain at 2015-05-17.12:54:17 by @smontanaro\")</li><li>[csv_dialect_doc_clarify.patch](https://bugs.python.org/file39552/csv_dialect_doc_clarify.patch \"Uploaded as text/plain at 2015-05-29.19:28:39 by jbmilam\"): Document clarification</li><li>[csv.html](https://bugs.python.org/file39553/csv.html \"Uploaded as text/plain at 2015-05-29.19:29:23 by jbmilam\"): html file holding the changes</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2015-05-09.01:05:19.126>\nlabels = ['easy', 'type-bug', '3.10', 'docs']\ntitle = 'Dialect class defaults are not documented.'\nupdated_at = <Date 2021-05-08.12:32:59.244>\nuser = 'https://bugs.python.org/MiK'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2021-05-08.12:32:59.244>\nactor = 'uniocto'\nassignee = 'docs@python'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Documentation']\ncreation = <Date 2015-05-09.01:05:19.126>\ncreator = 'MiK'\ndependencies = []\nfiles = ['39328', '39406', '39552', '39553']\nhgrepos = []\nissue_num = 24147\nkeywords = ['patch', 'easy']\nmessage_count = 14.0\nmessages = ['242787', '242807', '242811', '242818', '243396', '243397', '243399', '243402', '244344', '244347', '244400', '244407', '389327', '393254']\nnosy_count = 8.0\nnosy_names = ['skip.montanaro', 'r.david.murray', 'docs@python', 'berker.peksag', 'jbmilam', 'MiK', 'iritkatriel', 'uniocto']\npr_nums = ['25989']\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue24147'\nversions = ['Python 3.10']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-96842\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "smontanaro",
        "id": 3427745,
        "node_id": "MDQ6VXNlcjM0Mjc3NDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3427745?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/smontanaro",
        "html_url": "https://github.com/smontanaro",
        "followers_url": "https://api.github.com/users/smontanaro/followers",
        "following_url": "https://api.github.com/users/smontanaro/following{/other_user}",
        "gists_url": "https://api.github.com/users/smontanaro/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/smontanaro/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/smontanaro/subscriptions",
        "organizations_url": "https://api.github.com/users/smontanaro/orgs",
        "repos_url": "https://api.github.com/users/smontanaro/repos",
        "events_url": "https://api.github.com/users/smontanaro/events{/privacy}",
        "received_events_url": "https://api.github.com/users/smontanaro/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/68335/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/68335/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/67766",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/67766/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/67766/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/67766/events",
      "html_url": "https://github.com/python/cpython/issues/67766",
      "id": 1198932123,
      "node_id": "MDU6SXNzdWUxMTk4OTMyMTIz",
      "number": 67766,
      "title": "struct.pack error messages do not indicate which argument was invalid",
      "user": {
        "login": "554e7265-70b7-4e66-a722-6e428fa417d2",
        "id": 101776756,
        "node_id": "M_kgDOBhD9dA",
        "avatar_url": "https://avatars.githubusercontent.com/u/101776756?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/554e7265-70b7-4e66-a722-6e428fa417d2",
        "html_url": "https://github.com/alynn",
        "followers_url": "https://api.github.com/users/554e7265-70b7-4e66-a722-6e428fa417d2/followers",
        "following_url": "https://api.github.com/users/554e7265-70b7-4e66-a722-6e428fa417d2/following{/other_user}",
        "gists_url": "https://api.github.com/users/554e7265-70b7-4e66-a722-6e428fa417d2/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/554e7265-70b7-4e66-a722-6e428fa417d2/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/554e7265-70b7-4e66-a722-6e428fa417d2/subscriptions",
        "organizations_url": "https://api.github.com/users/554e7265-70b7-4e66-a722-6e428fa417d2/orgs",
        "repos_url": "https://api.github.com/users/554e7265-70b7-4e66-a722-6e428fa417d2/repos",
        "events_url": "https://api.github.com/users/554e7265-70b7-4e66-a722-6e428fa417d2/events{/privacy}",
        "received_events_url": "https://api.github.com/users/554e7265-70b7-4e66-a722-6e428fa417d2/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018743106,
          "node_id": "LA_kwDOBN0Z8c7viSdC",
          "url": "https://api.github.com/repos/python/cpython/labels/easy",
          "name": "easy",
          "color": "0e8a16",
          "default": false,
          "description": null
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2015-03-03T17:03:06Z",
      "updated_at": "2023-05-13T21:40:10Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [23578](https://bugs.python.org/issue23578)\n--- | :---\nNosy | @mdickinson, @meadori, @serhiy-storchaka, @mlouielu\nPRs | <li>python/cpython#291</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = 'https://github.com/serhiy-storchaka'\nclosed_at = None\ncreated_at = <Date 2015-03-03.17:03:05.610>\nlabels = ['easy', 'type-feature', 'library', '3.11']\ntitle = 'struct.pack error messages do not indicate which argument was invalid'\nupdated_at = <Date 2022-03-24.00:24:53.123>\nuser = 'https://bugs.python.org/alynn'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2022-03-24.00:24:53.123>\nactor = 'iritkatriel'\nassignee = 'serhiy.storchaka'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)']\ncreation = <Date 2015-03-03.17:03:05.610>\ncreator = 'alynn'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 23578\nkeywords = ['easy (C)']\nmessage_count = 4.0\nmessages = ['237153', '288565', '288569', '288570']\nnosy_count = 5.0\nnosy_names = ['mark.dickinson', 'meador.inge', 'serhiy.storchaka', 'alynn', 'louielu']\npr_nums = ['291']\npriority = 'low'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue23578'\nversions = ['Python 3.11']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-103657\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/67766/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/67766/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/66944",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/66944/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/66944/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/66944/events",
      "html_url": "https://github.com/python/cpython/issues/66944",
      "id": 1198927460,
      "node_id": "MDU6SXNzdWUxMTk4OTI3NDYw",
      "number": 66944,
      "title": "contextlib.closing documentation should use a new example",
      "user": {
        "login": "652782da-b5f3-46b2-ae1b-1f73662bb759",
        "id": 92819591,
        "node_id": "M_kgDOBYhQhw",
        "avatar_url": "https://avatars.githubusercontent.com/u/92819591?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/652782da-b5f3-46b2-ae1b-1f73662bb759",
        "html_url": "https://github.com/mjpieters",
        "followers_url": "https://api.github.com/users/652782da-b5f3-46b2-ae1b-1f73662bb759/followers",
        "following_url": "https://api.github.com/users/652782da-b5f3-46b2-ae1b-1f73662bb759/following{/other_user}",
        "gists_url": "https://api.github.com/users/652782da-b5f3-46b2-ae1b-1f73662bb759/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/652782da-b5f3-46b2-ae1b-1f73662bb759/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/652782da-b5f3-46b2-ae1b-1f73662bb759/subscriptions",
        "organizations_url": "https://api.github.com/users/652782da-b5f3-46b2-ae1b-1f73662bb759/orgs",
        "repos_url": "https://api.github.com/users/652782da-b5f3-46b2-ae1b-1f73662bb759/repos",
        "events_url": "https://api.github.com/users/652782da-b5f3-46b2-ae1b-1f73662bb759/events{/privacy}",
        "received_events_url": "https://api.github.com/users/652782da-b5f3-46b2-ae1b-1f73662bb759/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018772048,
          "node_id": "LA_kwDOBN0Z8c7viZhQ",
          "url": "https://api.github.com/repos/python/cpython/labels/3.10",
          "name": "3.10",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018772049,
          "node_id": "LA_kwDOBN0Z8c7viZhR",
          "url": "https://api.github.com/repos/python/cpython/labels/3.9",
          "name": "3.9",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2014-10-28T22:40:52Z",
      "updated_at": "2024-01-23T01:01:12Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [22755](https://bugs.python.org/issue22755)\n--- | :---\nNosy | @rhettinger, @mjpieters, @vadmium\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2014-10-28.22:40:52.490>\nlabels = ['3.11', '3.9', '3.10', 'docs']\ntitle = 'contextlib.closing documentation should use a new example'\nupdated_at = <Date 2021-11-27.15:16:37.307>\nuser = 'https://github.com/mjpieters'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2021-11-27.15:16:37.307>\nactor = 'iritkatriel'\nassignee = 'docs@python'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Documentation']\ncreation = <Date 2014-10-28.22:40:52.490>\ncreator = 'mjpieters'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 22755\nkeywords = []\nmessage_count = 4.0\nmessages = ['230184', '230185', '230186', '230430']\nnosy_count = 5.0\nnosy_names = ['rhettinger', 'mjpieters', 'docs@python', 'martin.panter', 'abarnert']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = None\nstatus = 'open'\nsuperseder = None\ntype = None\nurl = 'https://bugs.python.org/issue22755'\nversions = ['Python 3.9', 'Python 3.10', 'Python 3.11']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-112198\n* gh-114458\n* gh-114459\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/66944/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/66944/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/66819",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/66819/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/66819/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/66819/events",
      "html_url": "https://github.com/python/cpython/issues/66819",
      "id": 1198926846,
      "node_id": "MDU6SXNzdWUxMTk4OTI2ODQ2",
      "number": 66819,
      "title": "Idle: update htest.py and htests",
      "user": {
        "login": "terryjreedy",
        "id": 19036496,
        "node_id": "MDQ6VXNlcjE5MDM2NDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/19036496?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/terryjreedy",
        "html_url": "https://github.com/terryjreedy",
        "followers_url": "https://api.github.com/users/terryjreedy/followers",
        "following_url": "https://api.github.com/users/terryjreedy/following{/other_user}",
        "gists_url": "https://api.github.com/users/terryjreedy/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/terryjreedy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/terryjreedy/subscriptions",
        "organizations_url": "https://api.github.com/users/terryjreedy/orgs",
        "repos_url": "https://api.github.com/users/terryjreedy/repos",
        "events_url": "https://api.github.com/users/terryjreedy/events{/privacy}",
        "received_events_url": "https://api.github.com/users/terryjreedy/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 4018676472,
          "node_id": "LA_kwDOBN0Z8c7viCL4",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-IDLE",
          "name": "topic-IDLE",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4018775327,
          "node_id": "LA_kwDOBN0Z8c7viaUf",
          "url": "https://api.github.com/repos/python/cpython/labels/3.8%20(EOL)",
          "name": "3.8 (EOL)",
          "color": "888888",
          "default": false,
          "description": "end of life"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
        {
          "login": "terryjreedy",
          "id": 19036496,
          "node_id": "MDQ6VXNlcjE5MDM2NDk2",
          "avatar_url": "https://avatars.githubusercontent.com/u/19036496?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/terryjreedy",
          "html_url": "https://github.com/terryjreedy",
          "followers_url": "https://api.github.com/users/terryjreedy/followers",
          "following_url": "https://api.github.com/users/terryjreedy/following{/other_user}",
          "gists_url": "https://api.github.com/users/terryjreedy/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/terryjreedy/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/terryjreedy/subscriptions",
          "organizations_url": "https://api.github.com/users/terryjreedy/orgs",
          "repos_url": "https://api.github.com/users/terryjreedy/repos",
          "events_url": "https://api.github.com/users/terryjreedy/events{/privacy}",
          "received_events_url": "https://api.github.com/users/terryjreedy/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2014-10-14T03:33:51Z",
      "updated_at": "2023-12-04T06:37:02Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [22629](https://bugs.python.org/issue22629)\n--- | :---\nNosy | @terryjreedy\nFiles | <li>[@htest-34.diff](https://bugs.python.org/file36906/%40htest-34.diff \"Uploaded as text/plain at 2014-10-14.03:33:48 by @terryjreedy\")</li><li>[@htest-34-2.diff](https://bugs.python.org/file36954/%40htest-34-2.diff \"Uploaded as text/plain at 2014-10-17.05:31:20 by @terryjreedy\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = 'https://github.com/terryjreedy'\nclosed_at = None\ncreated_at = <Date 2014-10-14.03:33:50.580>\nlabels = ['expert-IDLE', 'type-bug', '3.8']\ntitle = 'Idle: update htest.py and htests'\nupdated_at = <Date 2019-02-21.00:50:19.172>\nuser = 'https://github.com/terryjreedy'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2019-02-21.00:50:19.172>\nactor = 'terry.reedy'\nassignee = 'terry.reedy'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['IDLE']\ncreation = <Date 2014-10-14.03:33:50.580>\ncreator = 'terry.reedy'\ndependencies = []\nfiles = ['36906', '36954']\nhgrepos = []\nissue_num = 22629\nkeywords = ['patch']\nmessage_count = 5.0\nmessages = ['229278', '229565', '229566', '229567', '336168']\nnosy_count = 3.0\nnosy_names = ['terry.reedy', 'python-dev', 'Saimadhav.Heblikar']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = 'needs patch'\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue22629'\nversions = ['Python 3.8']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-112574\n* gh-112575\n* gh-112576\n* gh-112642\n* gh-112643\n* gh-112644\n* gh-112683\n* gh-112684\n* gh-112685\n* gh-112686\n* gh-112688\n* gh-112689\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/66819/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/66819/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/65961",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/65961/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/65961/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/65961/events",
      "html_url": "https://github.com/python/cpython/issues/65961",
      "id": 1198922271,
      "node_id": "MDU6SXNzdWUxMTk4OTIyMjcx",
      "number": 65961,
      "title": "update the import machinery to only use __spec__",
      "user": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4095883204,
          "node_id": "LA_kwDOBN0Z8c70IjfE",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-importlib",
          "name": "topic-importlib",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
        {
          "login": "brettcannon",
          "id": 54418,
          "node_id": "MDQ6VXNlcjU0NDE4",
          "avatar_url": "https://avatars.githubusercontent.com/u/54418?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/brettcannon",
          "html_url": "https://github.com/brettcannon",
          "followers_url": "https://api.github.com/users/brettcannon/followers",
          "following_url": "https://api.github.com/users/brettcannon/following{/other_user}",
          "gists_url": "https://api.github.com/users/brettcannon/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/brettcannon/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/brettcannon/subscriptions",
          "organizations_url": "https://api.github.com/users/brettcannon/orgs",
          "repos_url": "https://api.github.com/users/brettcannon/repos",
          "events_url": "https://api.github.com/users/brettcannon/events{/privacy}",
          "received_events_url": "https://api.github.com/users/brettcannon/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": true
        }
      ],
      "milestone": null,
      "comments": 15,
      "created_at": "2014-06-14T21:33:52Z",
      "updated_at": "2024-09-26T08:37:44Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [21762](https://bugs.python.org/issue21762)\n--- | :---\nNosy | @warsaw, @brettcannon, @ncoghlan, @ericsnowcurrently, @nanjekyejoannah\nDependencies | <li>bpo-25791: Raise an ImportWarning when __spec__.parent/__package__ isn&#x27;t defined for a relative import</li><li>bpo-42132: Use specs instead of just __loader__ in C code</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = 'https://github.com/brettcannon'\nclosed_at = None\ncreated_at = <Date 2014-06-14.21:33:51.833>\nlabels = ['interpreter-core', 'type-feature']\ntitle = 'update the import machinery to only use __spec__'\nupdated_at = <Date 2022-02-04.20:50:24.662>\nuser = 'https://github.com/ericsnowcurrently'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2022-02-04.20:50:24.662>\nactor = 'brett.cannon'\nassignee = 'brett.cannon'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Interpreter Core']\ncreation = <Date 2014-06-14.21:33:51.833>\ncreator = 'eric.snow'\ndependencies = ['25791', '42132']\nfiles = []\nhgrepos = []\nissue_num = 21762\nkeywords = []\nmessage_count = 13.0\nmessages = ['220581', '220597', '220606', '220610', '258332', '258357', '258398', '258440', '258443', '258844', '258845', '379490', '412537']\nnosy_count = 5.0\nnosy_names = ['barry', 'brett.cannon', 'ncoghlan', 'eric.snow', 'nanjekyejoannah']\npr_nums = []\npriority = 'low'\nresolution = None\nstage = 'needs patch'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue21762'\nversions = ['Python 3.6']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124377\n* gh-124380\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/65961/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/65961/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/65824",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/65824/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/65824/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/65824/events",
      "html_url": "https://github.com/python/cpython/issues/65824",
      "id": 1198921583,
      "node_id": "MDU6SXNzdWUxMTk4OTIxNTgz",
      "number": 65824,
      "title": "Make help() beginner helpful when no PAGER or LESS variable",
      "user": {
        "login": "nedbat",
        "id": 23789,
        "node_id": "MDQ6VXNlcjIzNzg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/23789?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nedbat",
        "html_url": "https://github.com/nedbat",
        "followers_url": "https://api.github.com/users/nedbat/followers",
        "following_url": "https://api.github.com/users/nedbat/following{/other_user}",
        "gists_url": "https://api.github.com/users/nedbat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nedbat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nedbat/subscriptions",
        "organizations_url": "https://api.github.com/users/nedbat/orgs",
        "repos_url": "https://api.github.com/users/nedbat/repos",
        "events_url": "https://api.github.com/users/nedbat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nedbat/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018775327,
          "node_id": "LA_kwDOBN0Z8c7viaUf",
          "url": "https://api.github.com/repos/python/cpython/labels/3.8%20(EOL)",
          "name": "3.8 (EOL)",
          "color": "888888",
          "default": false,
          "description": "end of life"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 13,
      "created_at": "2014-06-01T12:04:38Z",
      "updated_at": "2024-06-15T15:41:21Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [21625](https://bugs.python.org/issue21625)\n--- | :---\nNosy | @terryjreedy, @jcea, @nedbat, @stevendaprano, @bitdancer, @serhiy-storchaka, @eryksun, @ZackerySpytz, @nagarajan\nPRs | <li>python/cpython#21520</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2014-06-01.12:04:38.377>\nlabels = ['type-feature', '3.8']\ntitle = 'Make help() beginner helpful when no PAGER or LESS variable'\nupdated_at = <Date 2020-07-18.16:49:12.756>\nuser = 'https://github.com/nedbat'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2020-07-18.16:49:12.756>\nactor = 'nagarajan'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = []\ncreation = <Date 2014-06-01.12:04:38.377>\ncreator = 'nedbat'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 21625\nkeywords = ['patch']\nmessage_count = 9.0\nmessages = ['219497', '219516', '219520', '219547', '219566', '219595', '219596', '338493', '373909']\nnosy_count = 9.0\nnosy_names = ['terry.reedy', 'jcea', 'nedbat', 'steven.daprano', 'r.david.murray', 'serhiy.storchaka', 'eryksun', 'ZackerySpytz', 'nagarajan']\npr_nums = ['21520']\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue21625'\nversions = ['Python 3.8']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-116050\n* gh-116183\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/65824/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/65824/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/64660",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/64660/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/64660/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/64660/events",
      "html_url": "https://github.com/python/cpython/issues/64660",
      "id": 1198913779,
      "node_id": "MDU6SXNzdWUxMTk4OTEzNzc5",
      "number": 64660,
      "title": "Argument Clinic included return converters hard code use of ``_return_value``",
      "user": {
        "login": "brettcannon",
        "id": 54418,
        "node_id": "MDQ6VXNlcjU0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/54418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brettcannon",
        "html_url": "https://github.com/brettcannon",
        "followers_url": "https://api.github.com/users/brettcannon/followers",
        "following_url": "https://api.github.com/users/brettcannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/brettcannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brettcannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brettcannon/subscriptions",
        "organizations_url": "https://api.github.com/users/brettcannon/orgs",
        "repos_url": "https://api.github.com/users/brettcannon/repos",
        "events_url": "https://api.github.com/users/brettcannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brettcannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": true
      },
      "labels": [
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        },
        {
          "id": 4019554242,
          "node_id": "LA_kwDOBN0Z8c7vlYfC",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-argument-clinic",
          "name": "topic-argument-clinic",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
        {
          "login": "larryhastings",
          "id": 14175923,
          "node_id": "MDQ6VXNlcjE0MTc1OTIz",
          "avatar_url": "https://avatars.githubusercontent.com/u/14175923?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/larryhastings",
          "html_url": "https://github.com/larryhastings",
          "followers_url": "https://api.github.com/users/larryhastings/followers",
          "following_url": "https://api.github.com/users/larryhastings/following{/other_user}",
          "gists_url": "https://api.github.com/users/larryhastings/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/larryhastings/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/larryhastings/subscriptions",
          "organizations_url": "https://api.github.com/users/larryhastings/orgs",
          "repos_url": "https://api.github.com/users/larryhastings/repos",
          "events_url": "https://api.github.com/users/larryhastings/events{/privacy}",
          "received_events_url": "https://api.github.com/users/larryhastings/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2014-01-31T17:28:47Z",
      "updated_at": "2023-05-05T13:05:24Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [20461](https://bugs.python.org/issue20461)\n--- | :---\nNosy | @larryhastings\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = 'https://github.com/larryhastings'\nclosed_at = None\ncreated_at = <Date 2014-01-31.17:28:47.030>\nlabels = ['build', 'expert-argument-clinic']\ntitle = 'Argument Clinic included return converters hard code use of ``_return_value``'\nupdated_at = <Date 2020-03-18.18:40:11.018>\nuser = 'https://github.com/brettcannon'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2020-03-18.18:40:11.018>\nactor = 'brett.cannon'\nassignee = 'larry'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Build', 'Argument Clinic']\ncreation = <Date 2014-01-31.17:28:47.030>\ncreator = 'brett.cannon'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 20461\nkeywords = []\nmessage_count = 1.0\nmessages = ['209808']\nnosy_count = 1.0\nnosy_names = ['larry']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = 'test needed'\nstatus = 'open'\nsuperseder = None\ntype = None\nurl = 'https://bugs.python.org/issue20461'\nversions = ['Python 3.4']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-104200\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/64660/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/64660/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/64595",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/64595/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/64595/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/64595/events",
      "html_url": "https://github.com/python/cpython/issues/64595",
      "id": 1198913487,
      "node_id": "MDU6SXNzdWUxMTk4OTEzNDg3",
      "number": 64595,
      "title": "Argument Clinic: Touch source file if any output file changed",
      "user": {
        "login": "larryhastings",
        "id": 14175923,
        "node_id": "MDQ6VXNlcjE0MTc1OTIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/14175923?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/larryhastings",
        "html_url": "https://github.com/larryhastings",
        "followers_url": "https://api.github.com/users/larryhastings/followers",
        "following_url": "https://api.github.com/users/larryhastings/following{/other_user}",
        "gists_url": "https://api.github.com/users/larryhastings/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/larryhastings/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/larryhastings/subscriptions",
        "organizations_url": "https://api.github.com/users/larryhastings/orgs",
        "repos_url": "https://api.github.com/users/larryhastings/repos",
        "events_url": "https://api.github.com/users/larryhastings/events{/privacy}",
        "received_events_url": "https://api.github.com/users/larryhastings/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        },
        {
          "id": 4019554242,
          "node_id": "LA_kwDOBN0Z8c7vlYfC",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-argument-clinic",
          "name": "topic-argument-clinic",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
        {
          "login": "larryhastings",
          "id": 14175923,
          "node_id": "MDQ6VXNlcjE0MTc1OTIz",
          "avatar_url": "https://avatars.githubusercontent.com/u/14175923?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/larryhastings",
          "html_url": "https://github.com/larryhastings",
          "followers_url": "https://api.github.com/users/larryhastings/followers",
          "following_url": "https://api.github.com/users/larryhastings/following{/other_user}",
          "gists_url": "https://api.github.com/users/larryhastings/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/larryhastings/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/larryhastings/subscriptions",
          "organizations_url": "https://api.github.com/users/larryhastings/orgs",
          "repos_url": "https://api.github.com/users/larryhastings/repos",
          "events_url": "https://api.github.com/users/larryhastings/events{/privacy}",
          "received_events_url": "https://api.github.com/users/larryhastings/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 10,
      "created_at": "2014-01-26T14:02:22Z",
      "updated_at": "2024-01-17T17:57:04Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [20396](https://bugs.python.org/issue20396)\n--- | :---\nNosy | @ncoghlan, @larryhastings, @zware, @serhiy-storchaka\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = 'https://github.com/larryhastings'\nclosed_at = None\ncreated_at = <Date 2014-01-26.14:02:21.527>\nlabels = ['type-feature', 'expert-argument-clinic']\ntitle = 'Argument Clinic: Touch source file if any output file changed'\nupdated_at = <Date 2015-02-25.15:25:31.345>\nuser = 'https://github.com/larryhastings'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2015-02-25.15:25:31.345>\nactor = 'serhiy.storchaka'\nassignee = 'larry'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Argument Clinic']\ncreation = <Date 2014-01-26.14:02:21.527>\ncreator = 'larry'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 20396\nkeywords = []\nmessage_count = 3.0\nmessages = ['209315', '209318', '209323']\nnosy_count = 4.0\nnosy_names = ['ncoghlan', 'larry', 'zach.ware', 'serhiy.storchaka']\npr_nums = []\npriority = 'low'\nresolution = None\nstage = 'needs patch'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue20396'\nversions = []\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-104152\n* gh-104507\n* gh-106449\n* gh-106452\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "erlend-aasland",
        "id": 13780613,
        "node_id": "MDQ6VXNlcjEzNzgwNjEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erlend-aasland",
        "html_url": "https://github.com/erlend-aasland",
        "followers_url": "https://api.github.com/users/erlend-aasland/followers",
        "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
        "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
        "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
        "repos_url": "https://api.github.com/users/erlend-aasland/repos",
        "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/64595/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/64595/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/64019",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/64019/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/64019/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/64019/events",
      "html_url": "https://github.com/python/cpython/issues/64019",
      "id": 1198910152,
      "node_id": "MDU6SXNzdWUxMTk4OTEwMTUy",
      "number": 64019,
      "title": "docs are missing info about module attributes",
      "user": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018743106,
          "node_id": "LA_kwDOBN0Z8c7viSdC",
          "url": "https://api.github.com/repos/python/cpython/labels/easy",
          "name": "easy",
          "color": "0e8a16",
          "default": false,
          "description": null
        },
        {
          "id": 4018772048,
          "node_id": "LA_kwDOBN0Z8c7viZhQ",
          "url": "https://api.github.com/repos/python/cpython/labels/3.10",
          "name": "3.10",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 9,
      "created_at": "2013-11-28T06:42:21Z",
      "updated_at": "2024-07-21T15:16:25Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [19820](https://bugs.python.org/issue19820)\n--- | :---\nNosy | @ericsnowcurrently, @eamanu, @MichaelAnckaert, @anilbey\nPRs | <li>python/cpython#15359</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2013-11-28.06:42:20.974>\nlabels = ['easy', '3.7', '3.8', '3.9', 'type-feature', 'docs']\ntitle = 'docs are missing info about module attributes'\nupdated_at = <Date 2019-08-21.12:23:23.366>\nuser = 'https://github.com/ericsnowcurrently'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2019-08-21.12:23:23.366>\nactor = 'michaelanckaert'\nassignee = 'docs@python'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Documentation']\ncreation = <Date 2013-11-28.06:42:20.974>\ncreator = 'eric.snow'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 19820\nkeywords = ['patch', 'easy']\nmessage_count = 6.0\nmessages = ['204642', '347930', '349712', '349718', '349727', '349735']\nnosy_count = 6.0\nnosy_names = ['Arfrever', 'docs@python', 'eric.snow', 'eamanu', 'michaelanckaert', 'anilbey']\npr_nums = ['15359']\npriority = 'low'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue19820'\nversions = ['Python 3.7', 'Python 3.8', 'Python 3.9']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-99782\n* gh-99783\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "brettcannon",
        "id": 54418,
        "node_id": "MDQ6VXNlcjU0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/54418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brettcannon",
        "html_url": "https://github.com/brettcannon",
        "followers_url": "https://api.github.com/users/brettcannon/followers",
        "following_url": "https://api.github.com/users/brettcannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/brettcannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brettcannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brettcannon/subscriptions",
        "organizations_url": "https://api.github.com/users/brettcannon/orgs",
        "repos_url": "https://api.github.com/users/brettcannon/repos",
        "events_url": "https://api.github.com/users/brettcannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brettcannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": true
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/64019/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/64019/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/63080",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/63080/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/63080/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/63080/events",
      "html_url": "https://github.com/python/cpython/issues/63080",
      "id": 1198904447,
      "node_id": "MDU6SXNzdWUxMTk4OTA0NDQ3",
      "number": 63080,
      "title": "ssl.SSLSocket shutdown doesn't behave like socket.shutdown",
      "user": {
        "login": "614783e3-0c6b-47f0-af06-b3212152b317",
        "id": 101766056,
        "node_id": "M_kgDOBhDTqA",
        "avatar_url": "https://avatars.githubusercontent.com/u/101766056?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/614783e3-0c6b-47f0-af06-b3212152b317",
        "html_url": "https://github.com/zielmicha",
        "followers_url": "https://api.github.com/users/614783e3-0c6b-47f0-af06-b3212152b317/followers",
        "following_url": "https://api.github.com/users/614783e3-0c6b-47f0-af06-b3212152b317/following{/other_user}",
        "gists_url": "https://api.github.com/users/614783e3-0c6b-47f0-af06-b3212152b317/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/614783e3-0c6b-47f0-af06-b3212152b317/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/614783e3-0c6b-47f0-af06-b3212152b317/subscriptions",
        "organizations_url": "https://api.github.com/users/614783e3-0c6b-47f0-af06-b3212152b317/orgs",
        "repos_url": "https://api.github.com/users/614783e3-0c6b-47f0-af06-b3212152b317/repos",
        "events_url": "https://api.github.com/users/614783e3-0c6b-47f0-af06-b3212152b317/events{/privacy}",
        "received_events_url": "https://api.github.com/users/614783e3-0c6b-47f0-af06-b3212152b317/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4019305351,
          "node_id": "LA_kwDOBN0Z8c7vkbuH",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-SSL",
          "name": "topic-SSL",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2013-08-29T21:36:58Z",
      "updated_at": "2024-09-28T18:30:13Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [18880](https://bugs.python.org/issue18880)\n--- | :---\nNosy | @pitrou, @tiran, @alex, @dstufft, @matrixise\nFiles | <li>[ssl-shutdown-fail.patch](https://bugs.python.org/file31514/ssl-shutdown-fail.patch \"Uploaded as text/plain at 2013-08-29.21:36:58 by zielmicha\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2013-08-29.21:36:58.431>\nlabels = ['3.7', 'expert-SSL', 'type-bug', 'library']\ntitle = \"ssl.SSLSocket shutdown doesn't behave like socket.shutdown\"\nupdated_at = <Date 2017-09-05.22:55:28.333>\nuser = 'https://bugs.python.org/zielmicha'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2017-09-05.22:55:28.333>\nactor = 'christian.heimes'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)', 'SSL']\ncreation = <Date 2013-08-29.21:36:58.431>\ncreator = 'zielmicha'\ndependencies = []\nfiles = ['31514']\nhgrepos = []\nissue_num = 18880\nkeywords = ['patch']\nmessage_count = 6.0\nmessages = ['196494', '272351', '277423', '301389', '301390', '301392']\nnosy_count = 7.0\nnosy_names = ['janssen', 'pitrou', 'christian.heimes', 'alex', 'dstufft', 'matrixise', 'zielmicha']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue18880'\nversions = ['Python 2.7', 'Python 3.6', 'Python 3.7']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124731\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/63080/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/63080/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/63062",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/63062/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/63062/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/63062/events",
      "html_url": "https://github.com/python/cpython/issues/63062",
      "id": 1198904386,
      "node_id": "MDU6SXNzdWUxMTk4OTA0Mzg2",
      "number": 63062,
      "title": "Implement __subclasshook__() for Finders and Loaders in importlib.abc",
      "user": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018743106,
          "node_id": "LA_kwDOBN0Z8c7viSdC",
          "url": "https://api.github.com/repos/python/cpython/labels/easy",
          "name": "easy",
          "color": "0e8a16",
          "default": false,
          "description": null
        },
        {
          "id": 4095883204,
          "node_id": "LA_kwDOBN0Z8c70IjfE",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-importlib",
          "name": "topic-importlib",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2013-08-28T03:10:37Z",
      "updated_at": "2023-03-22T00:33:36Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [18862](https://bugs.python.org/issue18862)\n--- | :---\nNosy | @ncoghlan, @ericsnowcurrently\nFiles | <li>[issue18862-importlib-abc-subclasshooks.diff](https://bugs.python.org/file31960/issue18862-importlib-abc-subclasshooks.diff \"Uploaded as text/plain at 2013-10-05.05:10:49 by @ericsnowcurrently\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2013-08-28.03:10:36.721>\nlabels = ['easy', 'type-feature', 'library']\ntitle = 'Implement __subclasshook__() for Finders and Loaders in importlib.abc'\nupdated_at = <Date 2020-03-06.20:29:42.464>\nuser = 'https://github.com/ericsnowcurrently'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2020-03-06.20:29:42.464>\nactor = 'brett.cannon'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)']\ncreation = <Date 2013-08-28.03:10:36.721>\ncreator = 'eric.snow'\ndependencies = []\nfiles = ['31960']\nhgrepos = []\nissue_num = 18862\nkeywords = ['patch', 'easy']\nmessage_count = 2.0\nmessages = ['196346', '198982']\nnosy_count = 2.0\nnosy_names = ['ncoghlan', 'eric.snow']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue18862'\nversions = ['Python 3.4']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-102763\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/63062/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/63062/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/61215",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/61215/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/61215/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/61215/events",
      "html_url": "https://github.com/python/cpython/issues/61215",
      "id": 1198893537,
      "node_id": "MDU6SXNzdWUxMTk4ODkzNTM3",
      "number": 61215,
      "title": "Allow waiting on a mock",
      "user": {
        "login": "pitrou",
        "id": 1721820,
        "node_id": "MDQ6VXNlcjE3MjE4MjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pitrou",
        "html_url": "https://github.com/pitrou",
        "followers_url": "https://api.github.com/users/pitrou/followers",
        "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
        "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
        "organizations_url": "https://api.github.com/users/pitrou/orgs",
        "repos_url": "https://api.github.com/users/pitrou/repos",
        "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pitrou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 18,
      "created_at": "2013-01-22T12:15:48Z",
      "updated_at": "2023-07-17T12:18:24Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [17013](https://bugs.python.org/issue17013)\n--- | :---\nNosy | @jcea, @pitrou, @rbtcollins, @cjw296, @ezio-melotti, @voidspace, @Kentzo, @lisroach, @mariocj89, @pablogsal, @Kentzo, @tirkarthi\nPRs | <li>python/cpython#12818</li><li>python/cpython#16094</li><li>python/cpython#17133</li><li>python/cpython#20759</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2013-01-22.12:15:47.799>\nlabels = ['type-feature', 'library', '3.9']\ntitle = 'Allow waiting on a mock'\nupdated_at = <Date 2020-06-10.14:37:15.926>\nuser = 'https://github.com/pitrou'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2020-06-10.14:37:15.926>\nactor = 'Kentzo'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)']\ncreation = <Date 2013-01-22.12:15:47.799>\ncreator = 'pitrou'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 17013\nkeywords = ['patch']\nmessage_count = 18.0\nmessages = ['180377', '181398', '247777', '340146', '340153', '340158', '340164', '352211', '356898', '367446', '371133', '371165', '371175', '371193', '371195', '371196', '371202', '371207']\nnosy_count = 13.0\nnosy_names = ['jcea', 'pitrou', 'rbcollins', 'cjw296', 'ezio.melotti', 'michael.foord', 'Ilya.Kulakov', 'lisroach', 'mariocj89', 'lkollar', 'pablogsal', 'Kentzo', 'xtreak']\npr_nums = ['12818', '16094', '17133', '20759']\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue17013'\nversions = ['Python 3.9']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-106366\n* gh-106414\n* gh-106591\n* gh-106822\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/61215/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/61215/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/60712",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/60712/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/60712/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/60712/events",
      "html_url": "https://github.com/python/cpython/issues/60712",
      "id": 1198891005,
      "node_id": "MDU6SXNzdWUxMTk4ODkxMDA1",
      "number": 60712,
      "title": "Include the \"object\" type in the lists of documented types",
      "user": {
        "login": "cjerdonek",
        "id": 355822,
        "node_id": "MDQ6VXNlcjM1NTgyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/355822?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cjerdonek",
        "html_url": "https://github.com/cjerdonek",
        "followers_url": "https://api.github.com/users/cjerdonek/followers",
        "following_url": "https://api.github.com/users/cjerdonek/following{/other_user}",
        "gists_url": "https://api.github.com/users/cjerdonek/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/cjerdonek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/cjerdonek/subscriptions",
        "organizations_url": "https://api.github.com/users/cjerdonek/orgs",
        "repos_url": "https://api.github.com/users/cjerdonek/repos",
        "events_url": "https://api.github.com/users/cjerdonek/events{/privacy}",
        "received_events_url": "https://api.github.com/users/cjerdonek/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
        {
          "login": "cjerdonek",
          "id": 355822,
          "node_id": "MDQ6VXNlcjM1NTgyMg==",
          "avatar_url": "https://avatars.githubusercontent.com/u/355822?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/cjerdonek",
          "html_url": "https://github.com/cjerdonek",
          "followers_url": "https://api.github.com/users/cjerdonek/followers",
          "following_url": "https://api.github.com/users/cjerdonek/following{/other_user}",
          "gists_url": "https://api.github.com/users/cjerdonek/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/cjerdonek/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/cjerdonek/subscriptions",
          "organizations_url": "https://api.github.com/users/cjerdonek/orgs",
          "repos_url": "https://api.github.com/users/cjerdonek/repos",
          "events_url": "https://api.github.com/users/cjerdonek/events{/privacy}",
          "received_events_url": "https://api.github.com/users/cjerdonek/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 7,
      "created_at": "2012-11-19T00:14:41Z",
      "updated_at": "2024-10-30T18:20:28Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [16508](https://bugs.python.org/issue16508)\n--- | :---\nNosy | @birkenfeld, @terryjreedy, @ezio-melotti, @merwok, @bitdancer, @cjerdonek, @vadmium\nFiles | <li>[object-type.patch](https://bugs.python.org/file40066/object-type.patch \"Uploaded as text/plain at 2015-07-30.12:43:03 by @vadmium\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = 'https://github.com/cjerdonek'\nclosed_at = None\ncreated_at = <Date 2012-11-19.00:14:41.072>\nlabels = ['type-feature', 'docs']\ntitle = 'include the \"object\" type in the lists of documented types'\nupdated_at = <Date 2015-07-30.12:43:07.495>\nuser = 'https://github.com/cjerdonek'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2015-07-30.12:43:07.495>\nactor = 'martin.panter'\nassignee = 'chris.jerdonek'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Documentation']\ncreation = <Date 2012-11-19.00:14:41.072>\ncreator = 'chris.jerdonek'\ndependencies = []\nfiles = ['40066']\nhgrepos = []\nissue_num = 16508\nkeywords = ['patch']\nmessage_count = 6.0\nmessages = ['175938', '176235', '213058', '213267', '213335', '247663']\nnosy_count = 9.0\nnosy_names = ['georg.brandl', 'terry.reedy', 'ezio.melotti', 'eric.araujo', 'r.david.murray', 'chris.jerdonek', 'docs@python', 'martin.panter', 'mvolz']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue16508'\nversions = ['Python 3.4', 'Python 3.5', 'Python 3.6']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-103036\n* gh-126197\n* gh-126198\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/60712/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/60712/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/59956",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/59956/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/59956/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/59956/events",
      "html_url": "https://github.com/python/cpython/issues/59956",
      "id": 1198887438,
      "node_id": "MDU6SXNzdWUxMTk4ODg3NDM4",
      "number": 59956,
      "title": "[subinterpreters] Make the PyGILState API compatible with subinterpreters",
      "user": {
        "login": "ncoghlan",
        "id": 1026649,
        "node_id": "MDQ6VXNlcjEwMjY2NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1026649?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ncoghlan",
        "html_url": "https://github.com/ncoghlan",
        "followers_url": "https://api.github.com/users/ncoghlan/followers",
        "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}",
        "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions",
        "organizations_url": "https://api.github.com/users/ncoghlan/orgs",
        "repos_url": "https://api.github.com/users/ncoghlan/repos",
        "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ncoghlan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018993468,
          "node_id": "LA_kwDOBN0Z8c7vjPk8",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-subinterpreters",
          "name": "topic-subinterpreters",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4019060898,
          "node_id": "LA_kwDOBN0Z8c7vjgCi",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-C-API",
          "name": "topic-C-API",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "ericsnowcurrently",
          "id": 1152074,
          "node_id": "MDQ6VXNlcjExNTIwNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ericsnowcurrently",
          "html_url": "https://github.com/ericsnowcurrently",
          "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
          "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
          "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
          "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
          "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
          "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 54,
      "created_at": "2012-08-21T05:18:01Z",
      "updated_at": "2023-10-05T15:49:42Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [15751](https://bugs.python.org/issue15751)\n--- | :---\nNosy | @mhammond, @jcea, @ronaldoussoren, @ncoghlan, @pitrou, @vstinner, @phsilva, @asvetlov, @ericsnowcurrently, @soltysh, @seberg, @erlend-aasland, @Felk, @h-vetinari\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2012-08-21.05:18:00.735>\nlabels = ['expert-subinterpreters', 'expert-C-API', 'type-feature', '3.10']\ntitle = '[subinterpreters] Make the PyGILState API compatible with subinterpreters'\nupdated_at = <Date 2022-01-07.18:32:22.492>\nuser = 'https://github.com/ncoghlan'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2022-01-07.18:32:22.492>\nactor = 'vstinner'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['C API', 'Subinterpreters']\ncreation = <Date 2012-08-21.05:18:00.735>\ncreator = 'ncoghlan'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 15751\nkeywords = []\nmessage_count = 49.0\nmessages = ['168742', '168759', '168764', '168766', '168768', '168769', '168771', '168772', '168776', '168779', '168780', '168787', '168789', '168790', '168792', '168812', '168815', '168816', '168818', '168832', '169008', '169010', '169013', '169014', '169278', '169280', '169284', '169286', '169310', '169329', '169330', '169332', '169333', '169334', '169352', '169354', '169359', '198115', '206016', '206017', '206042', '206048', '261779', '368885', '368904', '368906', '375134', '380325', '409995']\nnosy_count = 17.0\nnosy_names = ['mhammond', 'jcea', 'ronaldoussoren', 'ncoghlan', 'pitrou', 'vstinner', 'phsilva', 'grahamd', 'asvetlov', 'python-dev', 'eric.snow', 'maciej.szulik', 'seberg', 'erlendaasland', 'felk', 'h-vetinari', 'gabrielhae']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = 'needs patch'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue15751'\nversions = ['Python 3.10']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-101161\n* gh-101172\n* gh-101209\n* gh-101308\n* gh-101431\n* gh-101625\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/59956/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/59956/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/59705",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/59705/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/59705/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/59705/events",
      "html_url": "https://github.com/python/cpython/issues/59705",
      "id": 1198886247,
      "node_id": "MDU6SXNzdWUxMTk4ODg2MjQ3",
      "number": 59705,
      "title": "Python should support exporting thread names to the OS",
      "user": {
        "login": "f7ea1b17-2187-492a-b063-90a55b3ccf6a",
        "id": 101771427,
        "node_id": "M_kgDOBhDoow",
        "avatar_url": "https://avatars.githubusercontent.com/u/101771427?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/f7ea1b17-2187-492a-b063-90a55b3ccf6a",
        "html_url": "https://github.com/bra",
        "followers_url": "https://api.github.com/users/f7ea1b17-2187-492a-b063-90a55b3ccf6a/followers",
        "following_url": "https://api.github.com/users/f7ea1b17-2187-492a-b063-90a55b3ccf6a/following{/other_user}",
        "gists_url": "https://api.github.com/users/f7ea1b17-2187-492a-b063-90a55b3ccf6a/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/f7ea1b17-2187-492a-b063-90a55b3ccf6a/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/f7ea1b17-2187-492a-b063-90a55b3ccf6a/subscriptions",
        "organizations_url": "https://api.github.com/users/f7ea1b17-2187-492a-b063-90a55b3ccf6a/orgs",
        "repos_url": "https://api.github.com/users/f7ea1b17-2187-492a-b063-90a55b3ccf6a/repos",
        "events_url": "https://api.github.com/users/f7ea1b17-2187-492a-b063-90a55b3ccf6a/events{/privacy}",
        "received_events_url": "https://api.github.com/users/f7ea1b17-2187-492a-b063-90a55b3ccf6a/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 16,
      "created_at": "2012-07-30T12:19:30Z",
      "updated_at": "2024-12-06T17:19:28Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [15500](https://bugs.python.org/issue15500)\n--- | :---\nNosy | @jcea, @pitrou, @vstinner, @tiran, @bitdancer, @asvetlov, @florentx, @socketpair, @eryksun, @ZackerySpytz, @arhadthedev\nPRs | <li>python/cpython#14578</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2012-07-30.12:19:30.305>\nlabels = ['type-feature', 'library', '3.10', '3.11']\ntitle = 'Python should support exporting thread names to the OS'\nupdated_at = <Date 2022-01-18.21:32:45.293>\nuser = 'https://bugs.python.org/bra'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2022-01-18.21:32:45.293>\nactor = 'pitrou'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)']\ncreation = <Date 2012-07-30.12:19:30.305>\ncreator = 'bra'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 15500\nkeywords = ['patch']\nmessage_count = 10.0\nmessages = ['166890', '167166', '167459', '167552', '167560', '230736', '377332', '406336', '410896', '410898']\nnosy_count = 14.0\nnosy_names = ['jcea', 'pitrou', 'vstinner', 'christian.heimes', 'Arfrever', 'r.david.murray', 'asvetlov', 'flox', 'bra', 'kovid', 'socketpair', 'eryksun', 'ZackerySpytz', 'arhadthedev']\npr_nums = ['14578']\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue15500'\nversions = ['Python 3.10', 'Python 3.11']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-127338\n* gh-127702\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/59705/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/59705/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/58247",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/58247/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/58247/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/58247/events",
      "html_url": "https://github.com/python/cpython/issues/58247",
      "id": 1198877798,
      "node_id": "MDU6SXNzdWUxMTk4ODc3Nzk4",
      "number": 58247,
      "title": "Add \"metavar\" argument to add_subparsers() in argparse",
      "user": {
        "login": "ncoghlan",
        "id": 1026649,
        "node_id": "MDQ6VXNlcjEwMjY2NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1026649?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ncoghlan",
        "html_url": "https://github.com/ncoghlan",
        "followers_url": "https://api.github.com/users/ncoghlan/followers",
        "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}",
        "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions",
        "organizations_url": "https://api.github.com/users/ncoghlan/orgs",
        "repos_url": "https://api.github.com/users/ncoghlan/repos",
        "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ncoghlan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018743106,
          "node_id": "LA_kwDOBN0Z8c7viSdC",
          "url": "https://api.github.com/repos/python/cpython/labels/easy",
          "name": "easy",
          "color": "0e8a16",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2012-02-16T23:51:44Z",
      "updated_at": "2024-09-28T15:20:33Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [14039](https://bugs.python.org/issue14039)\n--- | :---\nNosy | @ncoghlan, @cjerdonek, @vadmium, @kushaldas\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2012-02-16.23:51:44.012>\nlabels = ['type-feature', 'docs']\ntitle = 'Add \"metavar\" argument to add_subparsers() in argparse'\nupdated_at = <Date 2017-04-10.02:42:35.617>\nuser = 'https://github.com/ncoghlan'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2017-04-10.02:42:35.617>\nactor = 'martin.panter'\nassignee = 'docs@python'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Documentation']\ncreation = <Date 2012-02-16.23:51:44.012>\ncreator = 'ncoghlan'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 14039\nkeywords = []\nmessage_count = 4.0\nmessages = ['153516', '180960', '180961', '291404']\nnosy_count = 7.0\nnosy_names = ['ncoghlan', 'bethard', 'chris.jerdonek', 'docs@python', 'tshepang', 'martin.panter', 'kushal.das']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = 'needs patch'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue14039'\nversions = ['Python 2.7', 'Python 3.4']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-99736\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/58247/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/58247/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/57531",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/57531/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/57531/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/57531/events",
      "html_url": "https://github.com/python/cpython/issues/57531",
      "id": 1198874496,
      "node_id": "MDU6SXNzdWUxMTk4ODc0NDk2",
      "number": 57531,
      "title": "The io module doesn't support non-blocking files",
      "user": {
        "login": "e26428b1-70cf-4e9f-ae3c-9ef0478633fb",
        "id": 92819834,
        "node_id": "M_kgDOBYhReg",
        "avatar_url": "https://avatars.githubusercontent.com/u/92819834?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/e26428b1-70cf-4e9f-ae3c-9ef0478633fb",
        "html_url": "https://github.com/sbt",
        "followers_url": "https://api.github.com/users/e26428b1-70cf-4e9f-ae3c-9ef0478633fb/followers",
        "following_url": "https://api.github.com/users/e26428b1-70cf-4e9f-ae3c-9ef0478633fb/following{/other_user}",
        "gists_url": "https://api.github.com/users/e26428b1-70cf-4e9f-ae3c-9ef0478633fb/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/e26428b1-70cf-4e9f-ae3c-9ef0478633fb/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/e26428b1-70cf-4e9f-ae3c-9ef0478633fb/subscriptions",
        "organizations_url": "https://api.github.com/users/e26428b1-70cf-4e9f-ae3c-9ef0478633fb/orgs",
        "repos_url": "https://api.github.com/users/e26428b1-70cf-4e9f-ae3c-9ef0478633fb/repos",
        "events_url": "https://api.github.com/users/e26428b1-70cf-4e9f-ae3c-9ef0478633fb/events{/privacy}",
        "received_events_url": "https://api.github.com/users/e26428b1-70cf-4e9f-ae3c-9ef0478633fb/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018834665,
          "node_id": "LA_kwDOBN0Z8c7viozp",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-IO",
          "name": "topic-IO",
          "color": "0052cc",
          "default": false,
          "description": ""
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "serhiy-storchaka",
        "id": 3659035,
        "node_id": "MDQ6VXNlcjM2NTkwMzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/serhiy-storchaka",
        "html_url": "https://github.com/serhiy-storchaka",
        "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
        "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
        "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
        "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
        "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "serhiy-storchaka",
          "id": 3659035,
          "node_id": "MDQ6VXNlcjM2NTkwMzU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/serhiy-storchaka",
          "html_url": "https://github.com/serhiy-storchaka",
          "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
          "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
          "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
          "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
          "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
          "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
          "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 48,
      "created_at": "2011-11-02T15:08:55Z",
      "updated_at": "2024-09-14T05:13:15Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [13322](https://bugs.python.org/issue13322)\n--- | :---\nNosy | @pitrou, @vstinner, @benjaminp, @jab, @vadmium, @jstasiak, @bharel, @izbyshev\nFiles | <li>[blockingioerror.py](https://bugs.python.org/file23590/blockingioerror.py \"Uploaded as text/plain at 2011-11-02.15:08:54 by sbt\")</li><li>[blockingioerror.py](https://bugs.python.org/file23598/blockingioerror.py \"Uploaded as text/plain at 2011-11-02.22:28:30 by sbt\")</li><li>[write_blockingioerror.patch](https://bugs.python.org/file23613/write_blockingioerror.patch \"Uploaded as text/plain at 2011-11-05.00:20:54 by sbt\")</li><li>[write_blockingioerror.patch](https://bugs.python.org/file23628/write_blockingioerror.patch \"Uploaded as text/plain at 2011-11-07.17:52:39 by sbt\")</li><li>[write_blockingioerror.patch](https://bugs.python.org/file23693/write_blockingioerror.patch \"Uploaded as text/plain at 2011-11-15.12:24:25 by sbt\")</li><li>[write_blockingioerror.patch](https://bugs.python.org/file23724/write_blockingioerror.patch \"Uploaded as text/plain at 2011-11-18.14:35:42 by sbt\")</li><li>[nonblock-none.patch](https://bugs.python.org/file37995/nonblock-none.patch \"Uploaded as text/plain at 2015-02-03.07:17:41 by @vadmium\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2011-11-02.15:08:55.126>\nlabels = ['type-bug', 'library', '3.9']\ntitle = \"The io module doesn't support non-blocking files\"\nupdated_at = <Date 2020-08-16.18:51:47.700>\nuser = 'https://bugs.python.org/sbt'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2020-08-16.18:51:47.700>\nactor = 'bar.harel'\nassignee = 'docs@python'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)']\ncreation = <Date 2011-11-02.15:08:55.126>\ncreator = 'sbt'\ndependencies = []\nfiles = ['23590', '23598', '23613', '23628', '23693', '23724', '37995']\nhgrepos = []\nissue_num = 13322\nkeywords = ['patch']\nmessage_count = 43.0\nmessages = ['146841', '146878', '146936', '146940', '146998', '147003', '147004', '147009', '147011', '147012', '147013', '147023', '147027', '147028', '147048', '147061', '147071', '147242', '147387', '147405', '147409', '147664', '147682', '147875', '147916', '147923', '148074', '151937', '235023', '235249', '235316', '239371', '307763', '307764', '307770', '307773', '334044', '354337', '354339', '354341', '354342', '354345', '375519']\nnosy_count = 14.0\nnosy_names = ['pitrou', 'vstinner', 'benjamin.peterson', 'stutzbach', 'jab', 'neologix', 'abacabadabacaba', 'docs@python', 'python-dev', 'sbt', 'martin.panter', 'jstasiak', 'bar.harel', 'izbyshev']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue13322'\nversions = ['Python 3.9']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-105224\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/57531/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/57531/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/57141",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/57141/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/57141/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/57141/events",
      "html_url": "https://github.com/python/cpython/issues/57141",
      "id": 1198872733,
      "node_id": "MDU6SXNzdWUxMTk4ODcyNzMz",
      "number": 57141,
      "title": "filecmp.dircmp does not allow non-shallow comparisons",
      "user": {
        "login": "70016164-7717-4b4e-bfab-f9063e654a22",
        "id": 101775310,
        "node_id": "M_kgDOBhD3zg",
        "avatar_url": "https://avatars.githubusercontent.com/u/101775310?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/70016164-7717-4b4e-bfab-f9063e654a22",
        "html_url": "https://github.com/kesmit",
        "followers_url": "https://api.github.com/users/70016164-7717-4b4e-bfab-f9063e654a22/followers",
        "following_url": "https://api.github.com/users/70016164-7717-4b4e-bfab-f9063e654a22/following{/other_user}",
        "gists_url": "https://api.github.com/users/70016164-7717-4b4e-bfab-f9063e654a22/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/70016164-7717-4b4e-bfab-f9063e654a22/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/70016164-7717-4b4e-bfab-f9063e654a22/subscriptions",
        "organizations_url": "https://api.github.com/users/70016164-7717-4b4e-bfab-f9063e654a22/orgs",
        "repos_url": "https://api.github.com/users/70016164-7717-4b4e-bfab-f9063e654a22/repos",
        "events_url": "https://api.github.com/users/70016164-7717-4b4e-bfab-f9063e654a22/events{/privacy}",
        "received_events_url": "https://api.github.com/users/70016164-7717-4b4e-bfab-f9063e654a22/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 16,
      "created_at": "2011-09-07T16:01:36Z",
      "updated_at": "2024-07-14T22:54:04Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [12932](https://bugs.python.org/issue12932)\n--- | :---\nNosy | @terryjreedy, @rbtcollins, @merwok, @regebro, @mitar, @cjerdonek\nFiles | <li>[issue12932.diff](https://bugs.python.org/file30589/issue12932.diff \"Uploaded as text/plain at 2013-06-14.21:24:16 by planet36\"): Add input parameter 'shallow' to dircmp.</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2011-09-07.16:01:35.750>\nlabels = ['type-feature', 'library']\ntitle = 'filecmp.dircmp does not allow non-shallow comparisons'\nupdated_at = <Date 2018-01-03.09:42:28.161>\nuser = 'https://bugs.python.org/kesmit'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2018-01-03.09:42:28.161>\nactor = 'mitar'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)']\ncreation = <Date 2011-09-07.16:01:35.750>\ncreator = 'kesmit'\ndependencies = []\nfiles = ['30589']\nhgrepos = []\nissue_num = 12932\nkeywords = ['patch']\nmessage_count = 9.0\nmessages = ['143692', '156736', '160966', '161823', '164648', '166246', '191154', '247695', '247696']\nnosy_count = 8.0\nnosy_names = ['terry.reedy', 'rbcollins', 'eric.araujo', 'lregebro', 'mitar', 'chris.jerdonek', 'planet36', 'kesmit']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue12932'\nversions = ['Python 3.6']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-109499\n* gh-121767\n* gh-121777\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "encukou",
        "id": 302922,
        "node_id": "MDQ6VXNlcjMwMjkyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/encukou",
        "html_url": "https://github.com/encukou",
        "followers_url": "https://api.github.com/users/encukou/followers",
        "following_url": "https://api.github.com/users/encukou/following{/other_user}",
        "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
        "organizations_url": "https://api.github.com/users/encukou/orgs",
        "repos_url": "https://api.github.com/users/encukou/repos",
        "events_url": "https://api.github.com/users/encukou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/encukou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/57141/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/57141/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/56499",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/56499/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/56499/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/56499/events",
      "html_url": "https://github.com/python/cpython/issues/56499",
      "id": 1198870121,
      "node_id": "MDU6SXNzdWUxMTk4ODcwMTIx",
      "number": 56499,
      "title": "__setstate__ is called for false values",
      "user": {
        "login": "9e803d50-6238-47c1-84e6-b1d134a28aa9",
        "id": 93803184,
        "node_id": "M_kgDOBZdSsA",
        "avatar_url": "https://avatars.githubusercontent.com/u/93803184?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/9e803d50-6238-47c1-84e6-b1d134a28aa9",
        "html_url": "https://github.com/eltoder",
        "followers_url": "https://api.github.com/users/9e803d50-6238-47c1-84e6-b1d134a28aa9/followers",
        "following_url": "https://api.github.com/users/9e803d50-6238-47c1-84e6-b1d134a28aa9/following{/other_user}",
        "gists_url": "https://api.github.com/users/9e803d50-6238-47c1-84e6-b1d134a28aa9/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/9e803d50-6238-47c1-84e6-b1d134a28aa9/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/9e803d50-6238-47c1-84e6-b1d134a28aa9/subscriptions",
        "organizations_url": "https://api.github.com/users/9e803d50-6238-47c1-84e6-b1d134a28aa9/orgs",
        "repos_url": "https://api.github.com/users/9e803d50-6238-47c1-84e6-b1d134a28aa9/repos",
        "events_url": "https://api.github.com/users/9e803d50-6238-47c1-84e6-b1d134a28aa9/events{/privacy}",
        "received_events_url": "https://api.github.com/users/9e803d50-6238-47c1-84e6-b1d134a28aa9/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018772048,
          "node_id": "LA_kwDOBN0Z8c7viZhQ",
          "url": "https://api.github.com/repos/python/cpython/labels/3.10",
          "name": "3.10",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018772049,
          "node_id": "LA_kwDOBN0Z8c7viZhR",
          "url": "https://api.github.com/repos/python/cpython/labels/3.9",
          "name": "3.9",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 7,
      "created_at": "2011-06-09T02:20:57Z",
      "updated_at": "2024-02-17T10:52:03Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [12290](https://bugs.python.org/issue12290)\n--- | :---\nNosy | @birkenfeld, @abalkin, @pitrou, @avassalotti, @bitdancer, @eltoder, @serhiy-storchaka, @iritkatriel\nFiles | <li>[setstate.diff](https://bugs.python.org/file22375/setstate.diff \"Uploaded as text/plain at 2011-06-16.02:57:47 by @eltoder\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2011-06-09.02:20:57.341>\nlabels = ['3.11', 'type-bug', '3.9', '3.10', 'docs']\ntitle = '__setstate__ is called for false values'\nupdated_at = <Date 2021-12-05.23:10:56.438>\nuser = 'https://github.com/eltoder'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2021-12-05.23:10:56.438>\nactor = 'iritkatriel'\nassignee = 'docs@python'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Documentation']\ncreation = <Date 2011-06-09.02:20:57.341>\ncreator = 'eltoder'\ndependencies = []\nfiles = ['22375']\nhgrepos = []\nissue_num = 12290\nkeywords = ['patch']\nmessage_count = 6.0\nmessages = ['137935', '137936', '138410', '138573', '265087', '407755']\nnosy_count = 9.0\nnosy_names = ['georg.brandl', 'belopolsky', 'pitrou', 'alexandre.vassalotti', 'r.david.murray', 'docs@python', 'eltoder', 'serhiy.storchaka', 'iritkatriel']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue12290'\nversions = ['Python 3.9', 'Python 3.10', 'Python 3.11']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-101062\n* gh-115597\n* gh-115598\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/56499/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/56499/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/53203",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/53203/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/53203/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/53203/events",
      "html_url": "https://github.com/python/cpython/issues/53203",
      "id": 1198856506,
      "node_id": "MDU6SXNzdWUxMTk4ODU2NTA2",
      "number": 53203,
      "title": "strptime(.., '%c') fails to parse output of strftime('%c', ..) in some locales",
      "user": {
        "login": "abalkin",
        "id": 535197,
        "node_id": "MDQ6VXNlcjUzNTE5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/535197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/abalkin",
        "html_url": "https://github.com/abalkin",
        "followers_url": "https://api.github.com/users/abalkin/followers",
        "following_url": "https://api.github.com/users/abalkin/following{/other_user}",
        "gists_url": "https://api.github.com/users/abalkin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/abalkin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/abalkin/subscriptions",
        "organizations_url": "https://api.github.com/users/abalkin/orgs",
        "repos_url": "https://api.github.com/users/abalkin/repos",
        "events_url": "https://api.github.com/users/abalkin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/abalkin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018672955,
          "node_id": "LA_kwDOBN0Z8c7viBU7",
          "url": "https://api.github.com/repos/python/cpython/labels/extension-modules",
          "name": "extension-modules",
          "color": "09fc59",
          "default": false,
          "description": "C modules in the Modules dir"
        },
        {
          "id": 4105172434,
          "node_id": "LA_kwDOBN0Z8c70r_XS",
          "url": "https://api.github.com/repos/python/cpython/labels/3.12",
          "name": "3.12",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        },
        {
          "id": 6924881042,
          "node_id": "LA_kwDOBN0Z8c8AAAABnMFMkg",
          "url": "https://api.github.com/repos/python/cpython/labels/3.14",
          "name": "3.14",
          "color": "2e730f",
          "default": false,
          "description": "new features, bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "serhiy-storchaka",
        "id": 3659035,
        "node_id": "MDQ6VXNlcjM2NTkwMzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/serhiy-storchaka",
        "html_url": "https://github.com/serhiy-storchaka",
        "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
        "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
        "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
        "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
        "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
        "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "serhiy-storchaka",
          "id": 3659035,
          "node_id": "MDQ6VXNlcjM2NTkwMzU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/serhiy-storchaka",
          "html_url": "https://github.com/serhiy-storchaka",
          "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
          "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
          "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
          "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
          "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
          "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
          "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 27,
      "created_at": "2010-06-09T20:24:39Z",
      "updated_at": "2024-10-21T19:18:01Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "BPO | [8957](https://bugs.python.org/issue8957)\n--- | :---\nNosy | @abalkin, @vstinner, @ezio-melotti\nDependencies | <li>bpo-8915: Use locale.nl_langinfo in _strptime</li>\nFiles | <li>[strptime-locale-bug.c](https://bugs.python.org/file17601/strptime-locale-bug.c \"Uploaded as application/octet-stream at 2010-06-09.20:24:38 by @abalkin\"): Working C code</li><li>[strptime-locale-bug.py](https://bugs.python.org/file17602/strptime-locale-bug.py \"Uploaded as text/plain at 2010-06-09.20:25:05 by @abalkin\"): Failing python code</li><li>[cfmt.py](https://bugs.python.org/file20358/cfmt.py \"Uploaded as text/plain at 2011-01-12.00:08:40 by @abalkin\")</li><li>[issue8957.py3k.1.patch](https://bugs.python.org/file20412/issue8957.py3k.1.patch \"Uploaded as text/plain at 2011-01-15.07:20:49 by eli.bendersky\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2010-06-09.20:24:38.889>\nlabels = ['extension-modules', 'type-bug', '3.7']\ntitle = \"strptime(.., '%c') fails to parse output of strftime('%c', ..) in some locales\"\nupdated_at = <Date 2016-09-26.21:29:29.654>\nuser = 'https://github.com/abalkin'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2016-09-26.21:29:29.654>\nactor = 'belopolsky'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Extension Modules']\ncreation = <Date 2010-06-09.20:24:38.889>\ncreator = 'belopolsky'\ndependencies = ['8915']\nfiles = ['17601', '17602', '20358', '20412']\nhgrepos = []\nissue_num = 8957\nkeywords = ['patch']\nmessage_count = 18.0\nmessages = ['107413', '125966', '125968', '126043', '126045', '126055', '126057', '126059', '126084', '126235', '126313', '126316', '126339', '126340', '126345', '126347', '126358', '221924']\nnosy_count = 4.0\nnosy_names = ['belopolsky', 'vstinner', 'ezio.melotti', 'rpetrov']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = 'needs patch'\nstatus = 'open'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue8957'\nversions = ['Python 3.7']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-124946\n* gh-125090\n* gh-125091\n* gh-125093\n* gh-125369\n* gh-125370\n* gh-125406\n* gh-125454\n* gh-125469\n* gh-125483\n* gh-125785\n* gh-125806\n* gh-125807\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "abalkin",
        "id": 535197,
        "node_id": "MDQ6VXNlcjUzNTE5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/535197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/abalkin",
        "html_url": "https://github.com/abalkin",
        "followers_url": "https://api.github.com/users/abalkin/followers",
        "following_url": "https://api.github.com/users/abalkin/following{/other_user}",
        "gists_url": "https://api.github.com/users/abalkin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/abalkin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/abalkin/subscriptions",
        "organizations_url": "https://api.github.com/users/abalkin/orgs",
        "repos_url": "https://api.github.com/users/abalkin/repos",
        "events_url": "https://api.github.com/users/abalkin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/abalkin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/53203/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/53203/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/52769",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/52769/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/52769/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/52769/events",
      "html_url": "https://github.com/python/cpython/issues/52769",
      "id": 1198854694,
      "node_id": "MDU6SXNzdWUxMTk4ODU0Njk0",
      "number": 52769,
      "title": "shutil.rmtree and os.listdir cannot recover on error conditions",
      "user": {
        "login": "64cf541a-fd7f-4d6d-b9b7-543066221627",
        "id": 101765550,
        "node_id": "M_kgDOBhDRrg",
        "avatar_url": "https://avatars.githubusercontent.com/u/101765550?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/64cf541a-fd7f-4d6d-b9b7-543066221627",
        "html_url": "https://github.com/rubenlm",
        "followers_url": "https://api.github.com/users/64cf541a-fd7f-4d6d-b9b7-543066221627/followers",
        "following_url": "https://api.github.com/users/64cf541a-fd7f-4d6d-b9b7-543066221627/following{/other_user}",
        "gists_url": "https://api.github.com/users/64cf541a-fd7f-4d6d-b9b7-543066221627/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/64cf541a-fd7f-4d6d-b9b7-543066221627/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/64cf541a-fd7f-4d6d-b9b7-543066221627/subscriptions",
        "organizations_url": "https://api.github.com/users/64cf541a-fd7f-4d6d-b9b7-543066221627/orgs",
        "repos_url": "https://api.github.com/users/64cf541a-fd7f-4d6d-b9b7-543066221627/repos",
        "events_url": "https://api.github.com/users/64cf541a-fd7f-4d6d-b9b7-543066221627/events{/privacy}",
        "received_events_url": "https://api.github.com/users/64cf541a-fd7f-4d6d-b9b7-543066221627/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018743106,
          "node_id": "LA_kwDOBN0Z8c7viSdC",
          "url": "https://api.github.com/repos/python/cpython/labels/easy",
          "name": "easy",
          "color": "0e8a16",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [
        {
          "login": "508f7627-3797-4332-8a63-a38898672f33",
          "id": 92819880,
          "node_id": "M_kgDOBYhRqA",
          "avatar_url": "https://avatars.githubusercontent.com/u/92819880?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/508f7627-3797-4332-8a63-a38898672f33",
          "html_url": "https://github.com/tarekziade",
          "followers_url": "https://api.github.com/users/508f7627-3797-4332-8a63-a38898672f33/followers",
          "following_url": "https://api.github.com/users/508f7627-3797-4332-8a63-a38898672f33/following{/other_user}",
          "gists_url": "https://api.github.com/users/508f7627-3797-4332-8a63-a38898672f33/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/508f7627-3797-4332-8a63-a38898672f33/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/508f7627-3797-4332-8a63-a38898672f33/subscriptions",
          "organizations_url": "https://api.github.com/users/508f7627-3797-4332-8a63-a38898672f33/orgs",
          "repos_url": "https://api.github.com/users/508f7627-3797-4332-8a63-a38898672f33/repos",
          "events_url": "https://api.github.com/users/508f7627-3797-4332-8a63-a38898672f33/events{/privacy}",
          "received_events_url": "https://api.github.com/users/508f7627-3797-4332-8a63-a38898672f33/received_events",
          "type": "Mannequin",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 12,
      "created_at": "2010-04-24T18:57:42Z",
      "updated_at": "2023-12-05T19:06:39Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [8523](https://bugs.python.org/issue8523)\n--- | :---\nNosy | @tarekziade, @merwok, @bitdancer\nFiles | <li>[rmtree_ignore_errors_returns_list.patch](https://bugs.python.org/file29460/rmtree_ignore_errors_returns_list.patch \"Uploaded as text/plain at 2013-03-18.22:09:01 by andrewsg\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = 'https://github.com/tarekziade'\nclosed_at = None\ncreated_at = <Date 2010-04-24.18:57:42.010>\nlabels = ['easy', 'type-feature', 'library']\ntitle = 'shutil.rmtree and os.listdir cannot recover on error conditions'\nupdated_at = <Date 2013-04-07.19:11:40.267>\nuser = 'https://bugs.python.org/rubenlm'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2013-04-07.19:11:40.267>\nactor = 'r.david.murray'\nassignee = 'tarek'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)']\ncreation = <Date 2010-04-24.18:57:42.010>\ncreator = 'rubenlm'\ndependencies = []\nfiles = ['29460']\nhgrepos = []\nissue_num = 8523\nkeywords = ['patch', 'easy']\nmessage_count = 12.0\nmessages = ['104117', '104191', '104247', '104482', '104489', '104492', '104508', '104509', '104511', '104513', '184536', '186237']\nnosy_count = 5.0\nnosy_names = ['tarek', 'eric.araujo', 'r.david.murray', 'rubenlm', 'andrewsg']\npr_nums = []\npriority = 'low'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue8523'\nversions = ['Python 3.4']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-108255\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/52769/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/52769/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/44691",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/44691/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/44691/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/44691/events",
      "html_url": "https://github.com/python/cpython/issues/44691",
      "id": 1198821031,
      "node_id": "MDU6SXNzdWUxMTk4ODIxMDMx",
      "number": 44691,
      "title": "Efficient reverse line iterator",
      "user": {
        "login": "6bc90104-76d0-45f1-9261-88125b361eb8",
        "id": 101769042,
        "node_id": "M_kgDOBhDfUg",
        "avatar_url": "https://avatars.githubusercontent.com/u/101769042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/6bc90104-76d0-45f1-9261-88125b361eb8",
        "html_url": "https://github.com/marktrussell",
        "followers_url": "https://api.github.com/users/6bc90104-76d0-45f1-9261-88125b361eb8/followers",
        "following_url": "https://api.github.com/users/6bc90104-76d0-45f1-9261-88125b361eb8/following{/other_user}",
        "gists_url": "https://api.github.com/users/6bc90104-76d0-45f1-9261-88125b361eb8/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/6bc90104-76d0-45f1-9261-88125b361eb8/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/6bc90104-76d0-45f1-9261-88125b361eb8/subscriptions",
        "organizations_url": "https://api.github.com/users/6bc90104-76d0-45f1-9261-88125b361eb8/orgs",
        "repos_url": "https://api.github.com/users/6bc90104-76d0-45f1-9261-88125b361eb8/repos",
        "events_url": "https://api.github.com/users/6bc90104-76d0-45f1-9261-88125b361eb8/events{/privacy}",
        "received_events_url": "https://api.github.com/users/6bc90104-76d0-45f1-9261-88125b361eb8/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 5354314490,
          "node_id": "LA_kwDOBN0Z8c8AAAABPyRa-g",
          "url": "https://api.github.com/repos/python/cpython/labels/3.13",
          "name": "3.13",
          "color": "2e730f",
          "default": false,
          "description": "bugs and security fixes"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 13,
      "created_at": "2007-03-10T13:47:37Z",
      "updated_at": "2024-06-19T09:36:34Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [1677872](https://bugs.python.org/issue1677872)\n--- | :---\nNosy | @rhettinger, @abalkin, @pitrou, @giampaolo, @tiran, @benjaminp, @merwok, @florentx, @james-emerton\nFiles | <li>[reverse_file_iterator.diff](https://bugs.python.org/file7854/reverse_file_iterator.diff \"Uploaded as text/plain at 2007-03-10.13:47:37 by mark_t_russell\"): Reverse file iterator implementation</li><li>[reverse-file-iterator-20071209.diff](https://bugs.python.org/file8902/reverse-file-iterator-20071209.diff \"Uploaded as text/plain at 2007-12-09.20:36:09 by mark_t_russell\")</li><li>[reverse-file-iterator-20071210.diff](https://bugs.python.org/file8913/reverse-file-iterator-20071210.diff \"Uploaded as text/plain at 2007-12-10.20:56:41 by mark_t_russell\")</li><li>[readprevline-20140415.diff](https://bugs.python.org/file34894/readprevline-20140415.diff \"Uploaded as text/plain at 2014-04-15.20:32:01 by @james-emerton\"): Implementation of BufferedReader.readprevline()</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2007-03-10.13:47:37.000>\nlabels = ['library', 'performance']\ntitle = 'Efficient reverse line iterator'\nupdated_at = <Date 2014-04-15.20:32:03.033>\nuser = 'https://bugs.python.org/marktrussell'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2014-04-15.20:32:03.033>\nactor = 'jemerton'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)']\ncreation = <Date 2007-03-10.13:47:37.000>\ncreator = 'mark_t_russell'\ndependencies = []\nfiles = ['7854', '8902', '8913', '34894']\nhgrepos = []\nissue_num = 1677872\nkeywords = ['patch']\nmessage_count = 12.0\nmessages = ['52152', '52153', '57266', '57269', '58326', '58361', '58370', '110532', '110533', '111041', '115651', '216381']\nnosy_count = 11.0\nnosy_names = ['rhettinger', 'belopolsky', 'pitrou', 'giampaolo.rodola', 'christian.heimes', 'mark_t_russell', 'benjamin.peterson', 'eric.araujo', 'flox', 'jcon', 'jemerton']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = 'needs patch'\nstatus = 'open'\nsuperseder = None\ntype = 'performance'\nurl = 'https://bugs.python.org/issue1677872'\nversions = ['Python 3.3']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-120710\n* gh-120728\n<!-- /gh-linked-prs -->\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/44691/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/44691/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/44626",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/44626/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/44626/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/44626/events",
      "html_url": "https://github.com/python/cpython/issues/44626",
      "id": 1198820774,
      "node_id": "MDU6SXNzdWUxMTk4ODIwNzc0",
      "number": 44626,
      "title": "Add os.path.isrelative() and improve ntpath.isabs()",
      "user": {
        "login": "b52c9f2e-124d-410a-ae85-1405da6b7705",
        "id": 92819615,
        "node_id": "M_kgDOBYhQnw",
        "avatar_url": "https://avatars.githubusercontent.com/u/92819615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/b52c9f2e-124d-410a-ae85-1405da6b7705",
        "html_url": "https://github.com/jongfoster",
        "followers_url": "https://api.github.com/users/b52c9f2e-124d-410a-ae85-1405da6b7705/followers",
        "following_url": "https://api.github.com/users/b52c9f2e-124d-410a-ae85-1405da6b7705/following{/other_user}",
        "gists_url": "https://api.github.com/users/b52c9f2e-124d-410a-ae85-1405da6b7705/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/b52c9f2e-124d-410a-ae85-1405da6b7705/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/b52c9f2e-124d-410a-ae85-1405da6b7705/subscriptions",
        "organizations_url": "https://api.github.com/users/b52c9f2e-124d-410a-ae85-1405da6b7705/orgs",
        "repos_url": "https://api.github.com/users/b52c9f2e-124d-410a-ae85-1405da6b7705/repos",
        "events_url": "https://api.github.com/users/b52c9f2e-124d-410a-ae85-1405da6b7705/events{/privacy}",
        "received_events_url": "https://api.github.com/users/b52c9f2e-124d-410a-ae85-1405da6b7705/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 24,
      "created_at": "2007-02-26T23:07:51Z",
      "updated_at": "2025-01-04T12:48:05Z",
      "closed_at": null,
      "author_association": "MANNEQUIN",
      "active_lock_reason": null,
      "body": "BPO | [1669539](https://bugs.python.org/issue1669539)\n--- | :---\nNosy | @mhammond, @terryjreedy, @tiran, @tjguk, @ezio-melotti, @bitdancer, @zware, @serhiy-storchaka\nDependencies | <li>bpo-15414: os.path.join behavior on Windows (ntpath.join) is not well documented</li>\nFiles | <li>[win32_absolute_paths.patch](https://bugs.python.org/file7798/win32_absolute_paths.patch \"Uploaded as text/plain at 2007-02-26.23:07:51 by jongfoster\"): Patch v1</li><li>[win32_absolute_paths_2.patch](https://bugs.python.org/file7799/win32_absolute_paths_2.patch \"Uploaded as text/plain at 2007-03-07.23:09:38 by jongfoster\"): Patch v2 - with docs</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = None\ncreated_at = <Date 2007-02-26.23:07:51.000>\nlabels = ['type-feature', 'library']\ntitle = 'Add os.path.isrelative() and improve ntpath.isabs()'\nupdated_at = <Date 2019-04-26.17:48:31.669>\nuser = 'https://bugs.python.org/jongfoster'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2019-04-26.17:48:31.669>\nactor = 'BreamoreBoy'\nassignee = 'none'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Library (Lib)']\ncreation = <Date 2007-02-26.23:07:51.000>\ncreator = 'jongfoster'\ndependencies = ['15414']\nfiles = ['7798', '7799']\nhgrepos = []\nissue_num = 1669539\nkeywords = ['patch']\nmessage_count = 15.0\nmessages = ['51978', '51979', '51980', '51981', '51982', '51983', '51984', '58743', '110297', '117582', '138215', '166066', '218560', '222855', '229053']\nnosy_count = 11.0\nnosy_names = ['mhammond', 'terry.reedy', 'jorend', 'christian.heimes', 'tim.golden', 'ezio.melotti', 'eckhardt', 'r.david.murray', 'zach.ware', 'serhiy.storchaka', 'mdengler']\npr_nums = []\npriority = 'normal'\nresolution = None\nstage = 'patch review'\nstatus = 'open'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue1669539'\nversions = ['Python 3.5']\n```\n\n</p></details>\n\n\n<!-- gh-linked-prs -->\n### Linked PRs\n* gh-113829\n<!-- /gh-linked-prs -->\n",
      "closed_by": {
        "login": "barneygale",
        "id": 960340,
        "node_id": "MDQ6VXNlcjk2MDM0MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/barneygale",
        "html_url": "https://github.com/barneygale",
        "followers_url": "https://api.github.com/users/barneygale/followers",
        "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
        "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
        "organizations_url": "https://api.github.com/users/barneygale/orgs",
        "repos_url": "https://api.github.com/users/barneygale/repos",
        "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
        "received_events_url": "https://api.github.com/users/barneygale/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/44626/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/44626/timeline",
      "performed_via_github_app": null,
      "state_reason": "reopened"
    }
  ]
}